<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Helper Function for Clean code (Python)</title>
      <link href="/2020/02/04/python-skills/"/>
      <url>/2020/02/04/python-skills/</url>
      
        <content type="html"><![CDATA[<center><span style="color: orange; font-size: 35px">Python 코드의 가독성을 높여보자</span></center><br><h1 id="상황-1-URL에서-쿼리-문자열을-디코드해야-할-때"><a href="#상황-1-URL에서-쿼리-문자열을-디코드해야-할-때" class="headerlink" title="#상황 1. URL에서 쿼리 문자열을 디코드해야 할 때"></a>#상황 1. URL에서 쿼리 문자열을 디코드해야 할 때</h1><br><blockquote><p>URL에서 인코딩, 디코딩의 의미는 보안에서의 의미와 살짝 다르다. <br><br>인코딩 <br><br><a href="http://www.google.com/떡볶이" target="_blank" rel="noopener">http://www.google.com/떡볶이</a> 먹고싶다!! <br><br>=&gt; <a href="http://www.google.com/search?sxsrf=ACYBGNTgapWszfC06soR1IlVyLsC2w_7EQ%" target="_blank" rel="noopener">http://www.google.com/search?sxsrf=ACYBGNTgapWszfC06soR1IlVyLsC2w_7EQ%</a> <br><br>3A1580777854450&amp;source=hp&amp;ei=fsE4Xri1GdWRr7wPvM2UOA&amp;q=떡볶이+먹고싶다!! <br><br>주소에 한글/공백/특수기호가 들어가면 안되기 때문에 가능하도록 변환하는 작업 <br><br>디코딩은 그 반대</p></blockquote><h2 id="Boolean-표현식"><a href="#Boolean-표현식" class="headerlink" title="Boolean 표현식"></a>Boolean 표현식</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line">my_values = parse_qs(<span class="string">'red=5&amp;blue=0&amp;green='</span>,keep_blank_values=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 값 전체 (dictionary로 저장)</span></span><br><span class="line">print(my_values)</span><br><span class="line">: &#123;<span class="string">'red'</span>: [<span class="string">'5'</span>], <span class="string">'green'</span>:[<span class="string">''</span>],<span class="string">'blue'</span>:[<span class="string">'0'</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 각각의 값을 뽑을 때</span></span><br><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>평가 =&gt;</code> 이 표현식은 읽기도 불편하고 필요한 작업을 수행하지도 못하는 좋지 못한 코딩</p><br><h3 id="Boolean-표현식-변형"><a href="#Boolean-표현식-변형" class="headerlink" title="Boolean 표현식 변형"></a>Boolean 표현식 변형</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">                    ∥</span><br><span class="line">                    ∨</span><br><span class="line">red = int(my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">green = int(my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">opacity = int(my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><br><h2 id="if-else-조건식-삼항-표현식"><a href="#if-else-조건식-삼항-표현식" class="headerlink" title="if/else 조건식(삼항 표현식)"></a>if/else 조건식(삼항 표현식)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line">my_values = parse_qs(<span class="string">'red=5&amp;blue=0&amp;green='</span>,keep_blank_values=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])</span><br><span class="line">red = int(red[<span class="number">0</span>]) <span class="keyword">if</span> red[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])</span><br><span class="line">green = int(green[<span class="number">0</span>]) <span class="keyword">if</span> green[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])</span><br><span class="line">opacity = int(opacity[<span class="number">0</span>]) <span class="keyword">if</span> opacity[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br><p><code>평가 =&gt;</code> 삼항 표현식은 코드를 짧게 유지하면서도 명확하게 표현 할 수 있는 장점이 있지만 복잡한 로직일 경우 남발하면 안된다.</p><br><h2 id="여러줄에-걸친-if-else-문"><a href="#여러줄에-걸친-if-else-문" class="headerlink" title="여러줄에 걸친 if/else 문"></a>여러줄에 걸친 if/else 문</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])</span><br><span class="line"><span class="keyword">if</span> green[<span class="number">0</span>]:</span><br><span class="line">    green = int(green[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    green = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])</span><br><span class="line"><span class="keyword">if</span> red[<span class="number">0</span>]:</span><br><span class="line">    red = int(red[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    red = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])</span><br><span class="line"><span class="keyword">if</span> opacity[<span class="number">0</span>]:</span><br><span class="line">    opacity = int(opacity[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opacity = <span class="number">0</span></span><br></pre></td></tr></table></figure><br><p><code>평가 =&gt;</code> 직관적이고 이해하기 편하나 코드의 길이가 길어 속도가 느려질 수 있다. 그리고 오히려 복잡한 수학 문제 같은 경우 코드가 길면 이해하기 더 힘들 수 있다.</p><br><h2 id="Helper-Function"><a href="#Helper-Function" class="headerlink" title="Helper Function"></a>Helper Function</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_first_int</span><span class="params">(values, key, default=<span class="number">0</span>)</span>:</span></span><br><span class="line">     found = values.get(key, [<span class="string">''</span>])</span><br><span class="line">     <span class="keyword">if</span> found[<span class="number">0</span>]:</span><br><span class="line">         found = int(found[<span class="number">0</span>])</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         found = default</span><br><span class="line">     <span class="keyword">return</span> found</span><br><span class="line"></span><br><span class="line">green = get_first_int(my_values, <span class="string">'green'</span>)</span><br><span class="line">red = get_first_int(my_values, <span class="string">'red'</span>)</span><br><span class="line">opacity = get_first_int(my_values, <span class="string">'opacity'</span>)</span><br></pre></td></tr></table></figure><p><code>평가 =&gt;</code> 복잡한 표현식보다 호출 코드가 훨씬 명확해진다. 하지만 아주 간단한 문제인데도 불구하고 너무 헬퍼 함수를 쓰는 것도 그리 좋지 않다.</p><center><span style="color: #ca6257; font-size: 20px">최종 평가</span></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">상황에 잘 맞게 적절하게 코드를 짜야 한다!</span><br><span class="line">그리고</span><br><span class="line">표현식이 복잡해지기 시작하면 최대한 빨리 해당 표현식을 작은 조각으로 분할하고</span><br><span class="line">로직을 헬퍼 함수로 옮기는 방안을 고려해야 한다.</span><br><span class="line"></span><br><span class="line">무조건 짧은 코드를 만들기보다는 가독성을 선택하는 편이 나을때가 많다.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> clean code </tag>
            
            <tag> helper function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yield와 send 함수를 알아보자 (Python)</title>
      <link href="/2020/02/03/python-yield-send/"/>
      <url>/2020/02/03/python-yield-send/</url>
      
        <content type="html"><![CDATA[<center> <span style="color: orange; font-size:35px">Generator의 yield와 send에 대해 알아보자!</span></center><br><blockquote><p>Generator, Yield, Send가 도대체 뭐야? <br></p></blockquote><br><center>우선 Generator는 generator(iterator를 반환하기 위한 객체)를 생성해주는 함수!</center><center>그럼 iterator는 무엇이냐! iterator는 반복할 수 있는 객체의 요소를 리턴할 때 호출 한 시점에 값을 리턴하며 값을 지우고 그 상태를 유지해준다.</center><center>그러면 Yield는 무슨 관계가 있는데? yield는 generator를 만들때 함수 안에 yield를 삽입하면 yield를 만나는 순간 iterator 처럼 행동한다.</center><br><blockquote><p>Generator 작동 순서</p></blockquote><br><p><span style="color: orange">Step 1: </span>Generator 메소드 호출 (Generator 객체 생성)<br><br><span style="color: orange">Step 2: </span>생성된 generator를 next함수로 호출<br><br><span style="color: orange">Step 3: </span>yield까지 실행<br><br><span style="color: orange">Step 4: </span>첫번째 yield에서 중단(suspend)<br><br><span style="color: orange">Step 5: </span>호출자에게 expression_list 값을 반환(return)<br><br><span style="color: orange">Step 6: </span>중단된 지점에서 모든 상태가 보존(지역 변수들의 현재 연결들, 명령 포인터, 내부 연산 스택, 모든 예외처리)<br><br><span style="color: orange">Step 7: </span>1~5 step 반복<br></p><br><p><strong>※ next함수 vs send함수</strong> next함수를 통해 호출되면 return은 None, send함수를 통해 호출되면 return은 메소드로 전달된 값<br>{: .notice}</p><br><blockquote><p>Generator랑 Coroutine과의 관계는? 둘이 같은건가?</p></blockquote><br><p>우선 컴퓨터 프로그램에서 <span style="color: orange; font-weight:bold;">routine</span>이라는 말을 자주 찾아 볼 수 있는데, 이때의 routine은 “어떤 일을 담당하는 하나의 정리된 일” 이라고 한다.<br><br>프로그램은 여러가지 routine을 조합하여 만들어지며, <span style="color: orange; font-weight:bold;">main routine</span>과 <span style="color: orange; font-weight:bold;">sub routine</span>으로 나눌 수 있다. <br><br>main routine은 프로그램의 주요한 부분이고 전체의 개략적인 동작 절차를 표시하도록 만들어진다. <br><br>sub routine은 사용빈도가 높고 자주 사용하는 부분을 모아 별도로 묶어 놓은 것으로 메인루틴을 보조한다. (메소로 묶음)<br><br>(서브루틴을 사용하면 함수호출시에만 저장된 메모리로 이동하기 때문에 메모리를 효율적으로 사용할 수 있다)<br>이제 진짜로 알아보려고 했던 <span style="color: orange; font-weight:bold;">Co-routine</span>은 sub-routine과 비슷하다. <br><br>자주 쓰는 기능들을 별도의 공간에 모아 두었다는 점에서 서브루틴과 동일하지만, 코루틴은 yield까지 수행하고 상태를 중지한 후<br>메인루틴으로 돌아가 마치 동시에 실행되는 것처럼 작동한다. (co에서 볼 수 있듯 메인루틴과 협력관계임)<br><span style="color:#f35952; font-size: 20px;">따라서 코루틴은 메인루틴에 종속적이지 않아 데이터를 주고 받을 수 있다! (이러한 특성때문에 send가 가능한 것임) </span><br><br><span style="color:#f35952; font-size: 20px;">결국 Generator로 생성된 generator객체(iterator)는 co-routine과 같은 역할을 한다고 보면된다!</span></p><br><p><img src="https://user-images.githubusercontent.com/33630505/74531168-39541f80-4f6f-11ea-8e78-e4764567af65.png" alt="mainroutine"><br><br><img src="https://user-images.githubusercontent.com/33630505/74531171-3a854c80-4f6f-11ea-87f4-a1788bd13552.png" alt="coroutine"><br><img src="https://user-images.githubusercontent.com/33630505/74531173-3b1de300-4f6f-11ea-8ce1-7e4ee456f29b.jpg" alt="coroutine2"></p><br><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        number *= <span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> number</span><br><span class="line"></span><br><span class="line">d = double(<span class="number">3</span>)</span><br><span class="line">d.send(<span class="literal">None</span>)  <span class="comment"># 처음에 왜 None을 넣어야 모르겠음 .... ㅠㅠ</span></span><br><span class="line">: <span class="number">6</span></span><br><span class="line">d.send(<span class="number">1</span>)</span><br><span class="line">: <span class="number">12</span></span><br><span class="line">d.send(<span class="number">10</span>)</span><br><span class="line">: <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double2</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        number *= <span class="number">2</span></span><br><span class="line">number = <span class="keyword">yield</span> number</span><br><span class="line"></span><br><span class="line">d2 = double2(<span class="number">4</span>)</span><br><span class="line">d2.send(<span class="literal">None</span>)</span><br><span class="line">: <span class="number">8</span></span><br><span class="line">d2.send(<span class="number">1</span>)</span><br><span class="line">: <span class="number">2</span></span><br><span class="line">d2.send(<span class="number">100</span>)</span><br><span class="line">: <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">yield</span> x == number</span><br><span class="line"></span><br><span class="line">number = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">c1 = check1()</span><br><span class="line">c1.send(<span class="literal">None</span>)</span><br><span class="line">c1.send(<span class="number">123</span>)</span><br><span class="line">: <span class="literal">True</span></span><br><span class="line">c1.send(<span class="literal">None</span>)</span><br><span class="line">c1.send(<span class="number">1234</span>)</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check2</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">yield</span> x == number2</span><br><span class="line"></span><br><span class="line">number2 = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line">c2 = check2()</span><br><span class="line">c2.send(<span class="literal">None</span>)</span><br><span class="line">c2.send(<span class="number">1234</span>)</span><br><span class="line">:<span class="literal">True</span></span><br><span class="line">c2.send(<span class="number">1234</span>)</span><br><span class="line">: StopIteration</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> (<span class="keyword">yield</span>) == number3</span><br><span class="line"></span><br><span class="line">number3 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c3 = check3()</span><br><span class="line">c3.send(<span class="literal">None</span>)</span><br><span class="line">c3.send(<span class="number">123</span>)</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line">c3.send(<span class="number">2</span>)</span><br><span class="line">: StopIteration</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> (<span class="keyword">yield</span>) == number4</span><br><span class="line"></span><br><span class="line">number4 = <span class="number">777</span></span><br><span class="line"></span><br><span class="line">c4 = check4()</span><br><span class="line">c4.send(<span class="literal">None</span>)</span><br><span class="line">c4.send(<span class="number">123</span>)</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line">c4.send(<span class="number">7777</span>) <span class="comment"># interger 객체 7777은 return 값이 None이기 때문에 None을 넣었을 때와 같음</span></span><br><span class="line">c4.send(<span class="number">777</span>) </span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    n = c4.send(<span class="number">777</span>)</span><br><span class="line">    print(n)</span><br><span class="line">: <span class="literal">None</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line">  <span class="literal">None</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line">  <span class="literal">None</span></span><br></pre></td></tr></table></figure><br><p>출처: <a href="https://blueshw.github.io/2016/01/25/python-co-routine-vs-sub-routine/" target="_blank" rel="noopener">co-routine</a>, <a href="https://m.blog.naver.com/PostView.nhn?blogId=pxkey&logNo=221296053953&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">co-routine2</a> <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://devbox.tistory.com/entry/IT%EC%9A%A9%EC%96%B4-%E3%84%B9" target="_blank" rel="noopener">IT 용어</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> generator </tag>
            
            <tag> yield </tag>
            
            <tag> send </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeSignal Arcade 문제 풀이2</title>
      <link href="/2020/01/07/codesignal2/"/>
      <url>/2020/01/07/codesignal2/</url>
      
        <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Intro     &#x3D;&gt; 문제해결 프로그래밍, 알고리즘 문제</span><br><span class="line">2. DataBase  &#x3D;&gt; SQL 문제</span><br><span class="line">3. The Core  &#x3D;&gt; 아직 안풀어봄</span><br><span class="line">4. Python    &#x3D;&gt; Python 문법 문제</span><br><span class="line">5. Graphs    &#x3D;&gt; 아직 안풀어봄</span><br></pre></td></tr></table></figure><br><p><span style="font-size: 20px; background: rgb(36, 54, 76); color: white; padding: 2px;">Navigation</span> <br><br><a href="#1st"><span style="font-size: 18px; background: rgb(76, 217, 229); color: white; padding: 2px;">Intro</span></a> &nbsp;<br><a href="#2nd"><span style="font-size: 18px; background: rgb(30, 219, 173); color: white; padding: 2px;">DataBase</span></a> &nbsp;<br><a href="#3rd"><span style="font-size: 18px; background: rgb(226, 71, 0); color: white; padding: 2px;">The Core</span></a> &nbsp;<br><a href="#4th"><span style="font-size: 18px; background: rgb(71, 182, 127); color: white; padding: 2px;">Python</span></a> &nbsp;<br><a href="#5th"><span style="font-size: 18px; background: rgb(125, 73, 194); color: white; padding: 2px;">Graphs</span></a> &nbsp;</p><hr><br><p><a id = '1st'></a></p><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><br><hr><a id = '2nd'></a># DataBase (MySQL 문법)<br><hr><a id = '3rd'></a># The Core<br><hr><a id = '4th'></a># Python<h2 id="Unique-Characters"><a href="#Unique-Characters" class="headerlink" title="Unique Characters"></a>Unique Characters</h2><blockquote><p>문장에서 사용된 Characters type 문자를 중복없이 순서대로 리스트에 나열하는 함수</p></blockquote><br><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">document = <span class="string">"Todd told Tom to trot to the timber"</span></span><br><span class="line"></span><br><span class="line">uniqueCharacters(document) = [<span class="string">' '</span>, <span class="string">'T'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>]</span><br><span class="line"></span><br><span class="line">' ' &lt; 'T' =&gt; True</span><br><span class="line">'T' &lt; 't' =&gt; True</span><br><span class="line"><span class="comment"># 오름차순 정렬</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer"><a href="#My-Answer" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 오름차순일 때</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniqueCharacters</span><span class="params">(document)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sorted(list(set(document))) <span class="comment"># sorted(set(document)) sorted 함수를 쓰면 리스트로 반환</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 내림차순일 때</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniqueCharacters</span><span class="params">(document)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sorted(list(set(document)), reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Correct-Scholarships"><a href="#Correct-Scholarships" class="headerlink" title="Correct Scholarships"></a>Correct Scholarships</h2><blockquote><p>예시 설명을 참고 해주세요.</p></blockquote><br><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bestStudents = [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">scholarships = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">allStudents = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">correctScholarships(bestStudents, scholarships, allStudents) = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">bestStudents = [<span class="number">3</span>]</span><br><span class="line">scholarships = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">allStudents = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">correctScholarships(bestStudents, scholarships, allStudents) = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">bestStudents = [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">scholarships = [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">allStudents = [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">correctScholarships(bestStudents, scholarships, allStudents) = <span class="literal">False</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-1"><a href="#My-Answer-1" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hidden test 1개 빼고 전부 통과..</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctScholarships</span><span class="params">(bestStudents, scholarships, allStudents)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> set(bestStudents) | set(scholarships) != set(allStudents) <span class="keyword">and</span> <span class="keyword">not</span> ((set(bestStudents) | set(scholarships)) - set(allStudents))</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer"><a href="#Another-Answer" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctScholarships</span><span class="params">(bestStudents, scholarships, allStudents)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(scholarships) &lt; len(allStudents) <span class="keyword">and</span> sum([x <span class="keyword">in</span> allStudents <span class="keyword">for</span> x <span class="keyword">in</span> scholarships]) == len(scholarships) <span class="keyword">and</span> sum([x <span class="keyword">in</span> scholarships <span class="keyword">for</span> x <span class="keyword">in</span> bestStudents])==min(len(bestStudents), len(scholarships))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctScholarships</span><span class="params">(bestStudents, scholarships, allStudents)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> set(bestStudents) &lt;= set(scholarships) &lt; set(allStudents)</span><br></pre></td></tr></table></figure><br><h2 id="Startup-Name"><a href="#Startup-Name" class="headerlink" title="Startup Name"></a>Startup Name</h2><blockquote><p>스타트업 회사를 차린다고 가정할 때 인기있는 경쟁사의 회사 이름 3개 중 중요한 철자를 골라내는 함수 <br><br>결국 3개 집합 전체에서 3개 집합의 대칭차집합을 뺀 부분을 골라내는 함수</p></blockquote><br><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">companies = [<span class="string">"coolcompany"</span>, <span class="string">"nicecompany"</span>, <span class="string">"legendarycompany"</span>]</span><br><span class="line">startupName(companies) = [<span class="string">'e'</span>, <span class="string">'l'</span>]</span><br><span class="line"></span><br><span class="line">companies = [<span class="string">"nameone"</span>, <span class="string">"nametwo"</span>, <span class="string">"namethree"</span>]   </span><br><span class="line">startupName(companies) = [<span class="string">'o'</span>, <span class="string">'t'</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-1"><a href="#Another-Answer-1" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startupName</span><span class="params">(companies)</span>:</span></span><br><span class="line">    cmp1 = set(companies[<span class="number">0</span>])</span><br><span class="line">    cmp2 = set(companies[<span class="number">1</span>])</span><br><span class="line">    cmp3 = set(companies[<span class="number">2</span>])</span><br><span class="line">    res = (set(companies[<span class="number">0</span>]) | set(companies[<span class="number">1</span>]) | set(companies[<span class="number">2</span>])) - (set(companies[<span class="number">0</span>])^set(companies[<span class="number">1</span>])^set(companies[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">return</span> list(sorted(list(res)))</span><br></pre></td></tr></table></figure><br><h2 id="Words-Recognition"><a href="#Words-Recognition" class="headerlink" title="Words Recognition"></a>Words Recognition</h2><blockquote><p>두 단어에서 공통적인 알파벳을 뺀 나머지 부분을 추출하는 함수</p></blockquote><br><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word1 = <span class="string">"program"</span></span><br><span class="line">word2 = <span class="string">"develop"</span></span><br><span class="line"></span><br><span class="line">wordsRecognition(word1, word2) = [<span class="string">'agmr'</span>, <span class="string">'delv'</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-2"><a href="#My-Answer-2" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordsRecognition</span><span class="params">(word1, word2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIdentifier</span><span class="params">(w1, w2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(sorted((set(w1) ^ set(w2)) - set(w2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [getIdentifier(word1, word2), getIdentifier(word2, word1)]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-2"><a href="#Another-Answer-2" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordsRecognition</span><span class="params">(word1, word2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIdentifier</span><span class="params">(w1, w2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(sorted(set(w1) - set(w2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [getIdentifier(word1, word2), getIdentifier(word2, word1)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordsRecognition</span><span class="params">(word1, word2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIdentifier</span><span class="params">(w1, w2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(sorted(frozenset(w1)-frozenset(w2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [getIdentifier(word1, word2), getIdentifier(word2, word1)]</span><br></pre></td></tr></table></figure><br><p><strong>Tip</strong> list or set to string =&gt; join<br>{: .notice}</p><br><h2 id="Transpose-Dictionary"><a href="#Transpose-Dictionary" class="headerlink" title="Transpose Dictionary"></a>Transpose Dictionary</h2><blockquote><p>Dictionary형태의 데이터 타입의 키, 값이 “설명”, “확장자 명”으로 되어 있는데 이를 “확장자 명”, “설명”으로 <br><br>구성된 리스트로 바꿔주는 함수</p></blockquote><br><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scriptByExtension = &#123;</span><br><span class="line">  <span class="string">"validate"</span>: <span class="string">"py"</span>,</span><br><span class="line">  <span class="string">"getLimits"</span>: <span class="string">"md"</span>,</span><br><span class="line">  <span class="string">"generateOutputs"</span>: <span class="string">"json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transposeDictionary(scriptByExtension) = [[<span class="string">"json"</span>,<span class="string">"generateOutputs"</span>],</span><br><span class="line">                                          [<span class="string">"md"</span>,<span class="string">"getLimits"</span>],</span><br><span class="line">   [<span class="string">"py"</span>,<span class="string">"validate"</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-3"><a href="#My-Answer-3" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transposeDictionary</span><span class="params">(scriptByExtension)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sorted([[y, x] <span class="keyword">for</span> x, y <span class="keyword">in</span> scriptByExtension.items()])</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-3"><a href="#Another-Answer-3" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transposeDictionary</span><span class="params">(scriptByExtension)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sorted(zip(scriptByExtension.values(), scriptByExtension.keys()))</span><br></pre></td></tr></table></figure><br><h2 id="Doodled-Password"><a href="#Doodled-Password" class="headerlink" title="Doodled Password"></a>Doodled Password</h2><blockquote><p>비밀번호 낙서? / queue의 FIFO 특성을 deque로 구현하는 함수. / 인덱스 수 만큼 First out Last in(맨 앞 요소)를 반복한다 <br><br>설명 잘 못하겠으니 밑에 예시를 참고해 주세요<br><br></p></blockquote><h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">doodledPassword(digits) = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">   [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">   [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                           [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">   [<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-4"><a href="#My-Answer-4" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doodledPassword</span><span class="params">(digits)</span>:</span></span><br><span class="line">    n = len(digits)</span><br><span class="line">    res = [deque(digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    [[res[x].insert(len(res)<span class="number">-1</span>, res[x].popleft()) <span class="keyword">for</span> y <span class="keyword">in</span> range(x)] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, len(res))]</span><br><span class="line">    <span class="keyword">return</span> [list(d) <span class="keyword">for</span> d <span class="keyword">in</span> res]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-4"><a href="#Another-Answer-4" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doodledPassword</span><span class="params">(digits)</span>:</span></span><br><span class="line">    n = len(digits)</span><br><span class="line">    res = [deque(digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    map(<span class="keyword">lambda</span> i: res[i].rotate(-i), range(n))</span><br><span class="line">    <span class="keyword">return</span> [list(d) <span class="keyword">for</span> d <span class="keyword">in</span> res]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doodledPassword</span><span class="params">(digits)</span>:</span></span><br><span class="line">    n = len(digits)</span><br><span class="line">    res = [deque(digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    deque(map(<span class="keyword">lambda</span> x,y: x.rotate(y), res, range(n,<span class="number">0</span>,<span class="number">-1</span>)), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> [list(d) <span class="keyword">for</span> d <span class="keyword">in</span> res]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doodledPassword</span><span class="params">(digits)</span>:</span></span><br><span class="line">    n = len(digits)</span><br><span class="line">    res = [deque(digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    deque(map(<span class="keyword">lambda</span> x: x[<span class="number">1</span>].rotate(-x[<span class="number">0</span>]), enumerate(res)), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> [list(d) <span class="keyword">for</span> d <span class="keyword">in</span> res]</span><br></pre></td></tr></table></figure><br><h2 id="Frequency-Analysis"><a href="#Frequency-Analysis" class="headerlink" title="Frequency Analysis"></a>Frequency Analysis</h2><blockquote><p>암호문으로 변경하는 encrypt 함수. 평문에서 가장 빈도수가 높은 문자로 치환한다.</p></blockquote><br><h3 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">encryptedText = <span class="string">"$~NmiNmim$/NVeirp@dlzrCCCCfFfQQQ"</span></span><br><span class="line"></span><br><span class="line">frequencyAnalysis(encryptedText) = <span class="string">'C'</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-5"><a href="#My-Answer-5" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frequencyAnalysis</span><span class="params">(encryptedText)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Counter(encryptedText).most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frequencyAnalysis</span><span class="params">(encryptedText)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(set(encryptedText))[[encryptedText.count(x) <span class="keyword">for</span> x <span class="keyword">in</span> list(set(encryptedText))].index(max([encryptedText.count(x) <span class="keyword">for</span> x <span class="keyword">in</span> list(set(encryptedText))]))]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-5"><a href="#Another-Answer-5" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frequencyAnalysis</span><span class="params">(encryptedText)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sorted(encryptedText, key=encryptedText.count, reverse=<span class="literal">True</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br><h2 id="Cyclic-Name"><a href="#Cyclic-Name" class="headerlink" title="Cyclic Name"></a>Cyclic Name</h2><blockquote><p>문자열이 주어지면 원하는 길이로 문자열이 순환하는 문자열 반환하는 함수</p></blockquote><br><h3 id="Example-7"><a href="#Example-7" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'jihyuk'</span></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">cyclicName(name, n) = <span class="string">'jihyukjihyuk'</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-6"><a href="#My-Answer-6" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cyclicName</span><span class="params">(name, n)</span>:</span></span><br><span class="line">    gen = (x <span class="keyword">for</span> x <span class="keyword">in</span> cycle(name))</span><br><span class="line">    res = [next(gen) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cyclicName</span><span class="params">(name, n)</span>:</span></span><br><span class="line">    gen = cycle(name)</span><br><span class="line">    res = [next(gen) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br></pre></td></tr></table></figure><br><p><strong>cycle 함수로 만든 객체는 generator 이다</strong></p><br><h2 id="Memory-Pills"><a href="#Memory-Pills" class="headerlink" title="Memory Pills"></a>Memory Pills</h2><blockquote><p>리스트의 요소중 길이가 짝수인 요소 다음부터 3개 요소를 추출하는 함수. 단, 추출된 요소가 3개 미만일 때 <br><br>부족한 요소는 “”로 채운다.</p></blockquote><br><h3 id="Example-8"><a href="#Example-8" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pills = [<span class="string">"Notforgetan"</span>, <span class="string">"Antimoron"</span>, <span class="string">"Rememberin"</span>, <span class="string">"Bestmedicen"</span>, <span class="string">"Superpillsus"</span>]</span><br><span class="line"></span><br><span class="line">=&gt; 11 , 9 , 10 , 11 , 12</span><br><span class="line"><span class="comment"># 따라서 10뒤부터 11, 12에 해당하는 요소와 ""를 반환하면 된다.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">memoryPills(pills) = [<span class="string">"Bestmedicen"</span>, <span class="string">"Superpillsus"</span>, <span class="string">""</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-6"><a href="#Another-Answer-6" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memoryPills</span><span class="params">(pills)</span>:</span></span><br><span class="line">    gen = dropwhile(<span class="keyword">lambda</span> x: len(x)%<span class="number">2</span>!=<span class="number">0</span>, pills + [<span class="string">""</span>]*<span class="number">3</span>)</span><br><span class="line">    next(gen)</span><br><span class="line">    <span class="keyword">return</span> [next(gen) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile, cycle, chain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memoryPills</span><span class="params">(pills)</span>:</span></span><br><span class="line">    gen = chain(dropwhile(<span class="keyword">lambda</span> x: len(x)%<span class="number">2</span> &gt; <span class="number">0</span>,pills),cycle([<span class="string">""</span>]))</span><br><span class="line">    next(gen)</span><br><span class="line">    <span class="keyword">return</span> [next(gen) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><br><h2 id="Float-Range"><a href="#Float-Range" class="headerlink" title="Float Range"></a>Float Range</h2><blockquote><p>시작, 끝, 간격을 입력값으로 주면(정수, 실수 둘다 가능) 시작부터 끝이전까지 간격을 순회로 하는 리스트를 반환하는 함수</p></blockquote><br><h3 id="Example-9"><a href="#Example-9" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">floatRange(<span class="number">-0.9</span>, <span class="number">0.45</span>, <span class="number">0.2</span>) = [<span class="number">-0.9</span>, <span class="number">-0.7</span>, <span class="number">-0.5</span>, <span class="number">-0.3</span>, <span class="number">-0.1</span>, <span class="number">0.1</span>, <span class="number">0.3</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-7"><a href="#My-Answer-7" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> takewhile, count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floatRange</span><span class="params">(start, stop, step)</span>:</span></span><br><span class="line">    gen = takewhile(<span class="keyword">lambda</span> x: x &lt; stop, count(start, step))</span><br><span class="line">    <span class="keyword">return</span> list(gen)</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-7"><a href="#Another-Answer-7" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floatRange</span><span class="params">(start, stop, step)</span>:</span></span><br><span class="line">    gen =islice(map(<span class="keyword">lambda</span> x:float(x)/<span class="number">100000.0</span>,list(range(int(start*<span class="number">100000</span>),int(stop*<span class="number">100000</span>),int(step*<span class="number">100000</span>)))),int((stop-start)/step)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> list(gen)</span><br></pre></td></tr></table></figure><br><h2 id="Rock-Paper-Scissors"><a href="#Rock-Paper-Scissors" class="headerlink" title="Rock Paper Scissors"></a>Rock Paper Scissors</h2><blockquote><p>N명의 사람이 있다고 했을 때 모든 사람이 모든 사람들과 2번씩 경기를 할 수 있도록 명단을 짜주는 함수</p></blockquote><br><h3 id="Example-10"><a href="#Example-10" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">"trainee"</span>, <span class="string">"warrior"</span>, <span class="string">"ninja"</span>]</span><br><span class="line"></span><br><span class="line">rockPaperScissors(players) =</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-8"><a href="#My-Answer-8" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rockPaperScissors</span><span class="params">(players)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sorted(list(permutations(players, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><br><h2 id="Kth-Permutation"><a href="#Kth-Permutation" class="headerlink" title="Kth Permutation"></a>Kth Permutation</h2><blockquote><p>n개의 순열 조합 중 n번째 순열을 뽑는 함수</p></blockquote><br><h3 id="Example-11"><a href="#Example-11" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">k = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">kthPermutation(numbers, k) = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-9"><a href="#My-Answer-9" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kthPermutation</span><span class="params">(numbers, k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(permutations(numbers, len(numbers)))[k<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-8"><a href="#Another-Answer-8" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice, permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kthPermutation</span><span class="params">(numbers, k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> next(islice(permutations(numbers), k - <span class="number">1</span>, <span class="literal">None</span>)) <span class="comment"># None대신 k도 가능</span></span><br></pre></td></tr></table></figure><br><h2 id="Crazyball"><a href="#Crazyball" class="headerlink" title="Crazyball"></a>Crazyball</h2><blockquote><p>n개의 리스트에서 k개를 뽑아 조합하는 함수. (combination)</p></blockquote><br><h3 id="Example-12"><a href="#Example-12" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">"Ninja"</span>, <span class="string">"Warrior"</span>, <span class="string">"Trainee"</span>, <span class="string">"Newbie"</span>]</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">crazyball(players, k) = [[<span class="string">'Ninja'</span>, <span class="string">'Warrior'</span>, <span class="string">'Trainee'</span>],</span><br><span class="line"> [<span class="string">'Ninja'</span>, <span class="string">'Warrior'</span>, <span class="string">'Newbie'</span>],</span><br><span class="line">  [<span class="string">'Ninja'</span>, <span class="string">'Trainee'</span>, <span class="string">'Newbie'</span>],</span><br><span class="line">  [<span class="string">'Warrior'</span>, <span class="string">'Trainee'</span>, <span class="string">'Newbie'</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-10"><a href="#My-Answer-10" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crazyball</span><span class="params">(players, k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(combinations(sorted(players), k))</span><br></pre></td></tr></table></figure><br><h2 id="Twins-Score"><a href="#Twins-Score" class="headerlink" title="Twins Score"></a>Twins Score</h2><blockquote><p>두 개의 리스트를 입력값으로 받아 같은 인덱스끼리 합하여 하나의 리스트로 반환하는 함수</p></blockquote><br><h3 id="Example-13"><a href="#Example-13" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">22</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">32</span>]</span><br><span class="line">m = [<span class="number">28</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">twinsScore(b, m) = [<span class="number">50</span>, <span class="number">54</span>, <span class="number">58</span>, <span class="number">64</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-11"><a href="#My-Answer-11" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twinsScore</span><span class="params">(b, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(np.array(b)+np.array(m))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twinsScoer</span><span class="params">(b,m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [x[<span class="number">0</span>]+x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> list(zip(b,m))]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-9"><a href="#Another-Answer-9" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twinsScore</span><span class="params">(b, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> map(sum, zip(b,m))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twinsScore</span><span class="params">(b, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [u + v <span class="keyword">for</span> u, v <span class="keyword">in</span> zip(b, m)]</span><br></pre></td></tr></table></figure><br><h2 id="Pressure-Gauges"><a href="#Pressure-Gauges" class="headerlink" title="Pressure Gauges"></a>Pressure Gauges</h2><blockquote><p>두 개의 리스트를 입력 받으면 각각의 인덱스에 맞게 짝지어 작은 값을 1행 리스트에 큰 값을 2행 리스트에 묶어 반환하는 함수</p></blockquote><br><h3 id="Example-14"><a href="#Example-14" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">morning = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">evening = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">pressureGauges(morning, evening) = [[<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">     [<span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-12"><a href="#My-Answer-12" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pressureGauges</span><span class="params">(morning, evening)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [list(map(min, zip(morning,evening))), list(map(max, zip(morning,evening)))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pressureGauges</span><span class="params">(morning, evening)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[min(x) <span class="keyword">for</span> x <span class="keyword">in</span> zip(morning, evening)], [max(x) <span class="keyword">for</span> x <span class="keyword">in</span> zip(morning, evening)]]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-10"><a href="#Another-Answer-10" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pressureGauges</span><span class="params">(morning, evening)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(zip(*map(sorted, zip(morning, evening))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pressureGauges</span><span class="params">(morning, evening)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [list(map(op, zip(morning, evening))) <span class="keyword">for</span> op <span class="keyword">in</span> [min, max]]</span><br></pre></td></tr></table></figure><br><p><span style="color: orange">zip과 *의 조합으로 여러개 리스트를 받을 때 각각의 인덱스에 해당하는 요소끼리 합칠 수 있다.</span><br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">c = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">d = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">11</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line">list(zip(a,b))</span><br><span class="line">=&gt; [(1, 1), (2, 2), (3, 3), (4, 4)]</span><br><span class="line"></span><br><span class="line">list(zip(*c))</span><br><span class="line">=&gt; [(1, 3, 5), (2, 4, 6)]</span><br><span class="line"></span><br><span class="line">list(zip(*d))</span><br><span class="line">=&gt; [(1, 3, 5), (2, 4, 6), (10, 11, 12)]</span><br></pre></td></tr></table></figure><br><h2 id="Correct-Lineup"><a href="#Correct-Lineup" class="headerlink" title="Correct Lineup"></a>Correct Lineup</h2><blockquote><p>짝수인 리스트를 입력 받으면 앞에서 부터 두 요소씩 짝을 지어 순서를 뒤 바꾸는 함수</p></blockquote><br><h3 id="Example-15"><a href="#Example-15" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">athletes = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">correctLineup(athletes) = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-13"><a href="#My-Answer-13" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctLineup</span><span class="params">(athletes)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [a[b] <span class="keyword">for</span> a <span class="keyword">in</span> [[y,x] <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(athletes[::<span class="number">2</span>], athletes[<span class="number">1</span>::<span class="number">2</span>])] <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-11"><a href="#Another-Answer-11" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctLineup</span><span class="params">(athletes)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [athletes[i^<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(athletes))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctLineup</span><span class="params">(athletes)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [athletes[i+(<span class="number">-1</span>)**i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(athletes))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctLineup</span><span class="params">(athletes)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [athletes[i+<span class="number">1</span>] <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> athletes[i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(athletes)) ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctLineup</span><span class="params">(athletes)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(sum(zip(athletes[<span class="number">1</span>::<span class="number">2</span>], athletes[<span class="number">0</span>::<span class="number">2</span>]), ()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correctLineup</span><span class="params">(athletes)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x+y, zip(athletes[<span class="number">1</span>::<span class="number">2</span>], athletes[::<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><br><h2 id="Group-Dating"><a href="#Group-Dating" class="headerlink" title="Group Dating"></a>Group Dating</h2><blockquote><p>입력 받은 두 리스트에서 같은 인덱스의 값이 다를 경우 짝을 지어주는 함수</p></blockquote><br><h3 id="Example-16"><a href="#Example-16" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">male = [<span class="number">5</span>, <span class="number">28</span>, <span class="number">14</span>, <span class="number">99</span>, <span class="number">17</span>]</span><br><span class="line">female = [<span class="number">5</span>, <span class="number">14</span>, <span class="number">28</span>, <span class="number">99</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">groupDating(male, female) = [[<span class="number">28</span>, <span class="number">14</span>, <span class="number">17</span>], [<span class="number">14</span>, <span class="number">28</span>, <span class="number">16</span>]]</span><br><span class="line"></span><br><span class="line">male = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">female = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">groupDating(male, female) = [[],[]]</span><br><span class="line"></span><br><span class="line">male = [<span class="number">12</span>]</span><br><span class="line">female = [<span class="number">43</span>]</span><br><span class="line"></span><br><span class="line">groupDating(male, female) = [[<span class="number">12</span>], [<span class="number">43</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-14"><a href="#My-Answer-14" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupDating</span><span class="params">(male, female)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[],[]] <span class="keyword">if</span> male==female <span class="keyword">else</span> list(zip(*[[x[<span class="number">0</span>],x[<span class="number">1</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> list(zip(male, female)) <span class="keyword">if</span> x[<span class="number">0</span>]!=x[<span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-12"><a href="#Another-Answer-12" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupDating</span><span class="params">(male, female)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[x <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(male, female) <span class="keyword">if</span> x!=y], [y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(male, female) <span class="keyword">if</span> x!=y]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupDating</span><span class="params">(male, female)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> zip(*[[m, f] <span class="keyword">for</span> (m, f) <span class="keyword">in</span> zip(male, female) <span class="keyword">if</span> m != f])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupDating</span><span class="params">(male, female)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(zip(*[x <span class="keyword">for</span> x <span class="keyword">in</span> list(zip(male,female)) <span class="keyword">if</span> x[<span class="number">0</span>]!=x[<span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><br><h2 id="Fix-Tree"><a href="#Fix-Tree" class="headerlink" title="Fix Tree"></a>Fix Tree</h2><blockquote><p>리스트를 입력 받으면 제대로된 트리 모양으로 바꿔주는 함수</p></blockquote><br><h3 id="Example-17"><a href="#Example-17" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tree = [<span class="string">"      *  "</span>,</span><br><span class="line"> <span class="string">"    *    "</span>,</span><br><span class="line"> <span class="string">"***      "</span>,</span><br><span class="line"> <span class="string">"    *****"</span>,</span><br><span class="line"> <span class="string">"  *******"</span>,</span><br><span class="line"> <span class="string">"*********"</span>,</span><br><span class="line"> <span class="string">" ***     "</span>]</span><br><span class="line"></span><br><span class="line">fixTree(tree) = [<span class="string">"    *    "</span>,</span><br><span class="line">  <span class="string">"    *    "</span>,</span><br><span class="line">  <span class="string">"   ***   "</span>,</span><br><span class="line">  <span class="string">"  *****  "</span>,</span><br><span class="line">  <span class="string">" ******* "</span>,</span><br><span class="line">  <span class="string">"*********"</span>,</span><br><span class="line">  <span class="string">"   ***   "</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-15"><a href="#My-Answer-15" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixTree</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">" "</span>*int((len(x) - len(x.strip()))/<span class="number">2</span>) + x.strip() + <span class="string">" "</span>*int((len(x) - len(x.strip()))/<span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> tree]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-13"><a href="#Another-Answer-13" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixTree</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [x.strip().center(len(x))<span class="keyword">for</span> x <span class="keyword">in</span> tree]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixTree</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> s: s.strip().center(len(s)), tree))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixTree</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> map(<span class="keyword">lambda</span> x: <span class="string">' '</span> * (x.count(<span class="string">' '</span>) / <span class="number">2</span>) + <span class="string">'*'</span> * x.count(<span class="string">'*'</span>) + <span class="string">' '</span> * (x.count(<span class="string">' '</span>) / <span class="number">2</span>), tree)</span><br></pre></td></tr></table></figure><br><p><strong>center라는 좋은 함수가 있었구만!</strong></p><br><h2 id="Pref-Sum"><a href="#Pref-Sum" class="headerlink" title="Pref Sum"></a>Pref Sum</h2><blockquote><p>리스트를 하나의 수열이라고 했을 때, 즉 점화식 또는 일반항 이라고 보고 이에대한 부분합을 구하는 함수</p></blockquote><br><h3 id="Example-18"><a href="#Example-18" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">-5</span>]</span><br><span class="line"></span><br><span class="line">prefSum(a) = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">prefSum(a) = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-16"><a href="#My-Answer-16" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hidden test 1개 통과 못함... 뭘 못 통과한걸까!?</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [sum([a[x] <span class="keyword">for</span> x <span class="keyword">in</span> range(y+<span class="number">1</span>)]) <span class="keyword">for</span> y <span class="keyword">in</span> range(len(a))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [reduce(<span class="keyword">lambda</span> x,y:x+y,a[:i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(a)+<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-14"><a href="#Another-Answer-14" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> accumulate</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(accumulate(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y:x+[sum([y]+x[<span class="number">-1</span>:])],a,[])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> p, n: p + [p[<span class="number">-1</span>] + n], a, [<span class="number">0</span>])[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> numpy.cumsum(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefSum</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(__import__(<span class="string">'itertools'</span>).accumulate(a)) <span class="comment"># 요딴 방법으로도 가능하군!</span></span><br></pre></td></tr></table></figure><br><p><strong>새로 알게된 것들: numpy의 cumsum , itertools의 accumlate</strong></p><br><h2 id="Math-Practice"><a href="#Math-Practice" class="headerlink" title="Math Practice"></a>Math Practice</h2><blockquote><p>리스트를 입력값으로 받으면 더하고 곱하고를 반복하면서 하나의 값으로 만드는 함수. (자세한건 예시 확인)</p></blockquote><br><h3 id="Example-19"><a href="#Example-19" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">mathPractice(numbers) = ((<span class="number">1</span> + <span class="number">2</span>)*<span class="number">3</span> + <span class="number">4</span>)*<span class="number">5</span> + <span class="number">6</span> = <span class="number">71</span></span><br><span class="line"></span><br><span class="line">numbers2 = [<span class="number">9</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">mathPractice(numbers2) = <span class="number">1778151</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-17"><a href="#My-Answer-17" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test5에서 통과하지 못함.. 이유는 리스트 인덱스 <span class="number">15</span>번째에서 더해야 하는데 곱해서 중간에 값이 뻥튀기 됨..</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mathPractice</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y <span class="keyword">if</span> numbers.index(y)%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> x+y, numbers)</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-15"><a href="#Another-Answer-15" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mathPractice</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, (i,y): x+y <span class="keyword">if</span> i%<span class="number">2</span> <span class="keyword">else</span> x*y, enumerate(numbers), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mathPractice</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> z,(x,y):z*x+y, zip(numbers[::<span class="number">2</span>],numbers[<span class="number">1</span>::<span class="number">2</span>]+[<span class="number">0</span>]), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mathPractice</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> functools.reduce(<span class="keyword">lambda</span> s, a: s+numbers[a] <span class="keyword">if</span> a%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">else</span> s*numbers[a], range(<span class="number">1</span>, len(numbers)), numbers[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><br><h2 id="Fibonacci-List"><a href="#Fibonacci-List" class="headerlink" title="Fibonacci List"></a>Fibonacci List</h2><blockquote><p>피보나치 수열 응용 함수</p></blockquote><br><h3 id="Example-20"><a href="#Example-20" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">fibonacciList(n) = [[],</span><br><span class="line">                    [<span class="number">0</span>],</span><br><span class="line">                    [<span class="number">0</span>],</span><br><span class="line">                    [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-16"><a href="#Another-Answer-16" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacciList</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="number">0</span>] * x <span class="keyword">for</span> x <span class="keyword">in</span> reduce(<span class="keyword">lambda</span> a, b: a+[a[<span class="number">-2</span>]+a[<span class="number">-1</span>]], range(n<span class="number">-2</span>), [<span class="number">0</span>,<span class="number">1</span>])]  </span><br><span class="line">    <span class="comment"># [0,1] =&gt; 첫 항을 보여주고 타입을 설정하기 위한 부분 (빈 리스트를 넣어도 똑같이 작동한다)</span></span><br></pre></td></tr></table></figure><br><p><strong>Fibonacci 관련 문제는 여러번 다양한 문제로 연습 해보자</strong></p><h2 id="Primes-Sum"><a href="#Primes-Sum" class="headerlink" title="Primes Sum"></a>Primes Sum</h2><blockquote><p>범위 안의 숫자 중에서 소수만 뽑아 더하는 함수</p></blockquote><br><h3 id="Example-21"><a href="#Example-21" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">primesSum(a,b) = <span class="number">11</span> + <span class="number">13</span> + <span class="number">17</span> + <span class="number">19</span> = <span class="number">60</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-18"><a href="#My-Answer-18" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primesSum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum([sum([<span class="number">0</span> <span class="keyword">if</span> y == <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span> <span class="keyword">in</span> [<span class="number">0</span> <span class="keyword">if</span> y%x==<span class="number">0</span> <span class="keyword">else</span> x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, y<span class="number">-1</span>)] <span class="keyword">else</span> y]) <span class="keyword">for</span> y <span class="keyword">in</span> range(a,b+<span class="number">1</span>)])</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-17"><a href="#Another-Answer-17" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primesSum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(filter(<span class="keyword">lambda</span> x: all(x % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(x**<span class="number">0.5</span>) + <span class="number">1</span>)), range(max(<span class="number">2</span>, a), b+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primesSum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum([n <span class="keyword">for</span> n <span class="keyword">in</span> range(a, b+<span class="number">1</span>) <span class="keyword">if</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> all([n % b <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(n))+ <span class="number">1</span>)])])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primesSum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum([x <span class="keyword">for</span> x <span class="keyword">in</span> range(max(a,<span class="number">2</span>),b+<span class="number">1</span>) <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> <span class="keyword">in</span> [x%z <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">2</span>, int(x**<span class="number">0.5</span>+<span class="number">1</span>))]])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primesSum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum([a <span class="keyword">for</span> a <span class="keyword">in</span> range(a, b+<span class="number">1</span>) <span class="keyword">if</span> <span class="keyword">not</span> (a &lt; <span class="number">2</span> <span class="keyword">or</span> any(a % x == <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, int(a ** <span class="number">0.5</span>) + <span class="number">1</span>))) ])</span><br></pre></td></tr></table></figure><br><h2 id="Fibonacci-Generator"><a href="#Fibonacci-Generator" class="headerlink" title="Fibonacci Generator"></a>Fibonacci Generator</h2><blockquote><p>숫자 n을 입력하면 피보나치 수열에서 n번째 항까지 출력하는 함수</p></blockquote><br><h3 id="Example-22"><a href="#Example-22" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">fibonacciGenerator(n) = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-19"><a href="#My-Answer-19" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacciGenerator</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></span><br><span class="line">        last = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> last[<span class="number">0</span>]</span><br><span class="line">            last = last[<span class="number">0</span>] + last[<span class="number">1</span>], last[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    gen = fib()</span><br><span class="line">    <span class="keyword">return</span> [next(gen) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><br><h2 id="Check-Password"><a href="#Check-Password" class="headerlink" title="Check Password"></a>Check Password</h2><blockquote><p>비밀번호를 몇번째 만에 성공하는지 확인하는 함수</p></blockquote><br><h3 id="Example-23"><a href="#Example-23" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">attempts = [<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"I"</span>, <span class="string">"like"</span>, <span class="string">"coding"</span>]</span><br><span class="line">password = <span class="string">"like"</span></span><br><span class="line"></span><br><span class="line">checkPassword(attempts, password) = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">attempts = [<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"I"</span>, <span class="string">"like"</span>, <span class="string">"coding"</span>]</span><br><span class="line">password = <span class="string">"qwerty123"</span></span><br><span class="line"></span><br><span class="line">checkPassword(attempts, password) = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">attempts = [<span class="string">"codesignal"</span>]</span><br><span class="line">password = <span class="string">"codesignal"</span></span><br><span class="line"></span><br><span class="line">checkPassword(attempts, password) = <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-18"><a href="#Another-Answer-18" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPassword</span><span class="params">(attempts, password)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            x = <span class="keyword">yield</span></span><br><span class="line">            <span class="keyword">yield</span> x == password</span><br><span class="line"></span><br><span class="line">    checker = check()</span><br><span class="line">    <span class="keyword">for</span> i, attempt <span class="keyword">in</span> enumerate(attempts):</span><br><span class="line">        next(checker)</span><br><span class="line">        <span class="keyword">if</span> checker.send(attempt):</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPassword</span><span class="params">(attempts, password)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> (<span class="keyword">yield</span>) == password</span><br><span class="line"></span><br><span class="line">    checker = check()</span><br><span class="line">    <span class="keyword">for</span> i, attempt <span class="keyword">in</span> enumerate(attempts):</span><br><span class="line">        next(checker)</span><br><span class="line">        <span class="keyword">if</span> checker.send(attempt):</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPassword</span><span class="params">(attempts, password)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="literal">True</span> <span class="keyword">if</span> attempt==password <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    checker = check()</span><br><span class="line">    <span class="keyword">for</span> i, attempt <span class="keyword">in</span> enumerate(attempts):</span><br><span class="line">        next(checker)</span><br><span class="line">        <span class="keyword">if</span> checker.send(attempt):</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><br><h2 id="Super-Prize"><a href="#Super-Prize" class="headerlink" title="Super Prize"></a>Super Prize</h2><blockquote><p>n의 배수 번째 손님의 구매금액을 d로 나누었을 때 나누어 떨어지면 상금을 주는 알고리즘을 갖는 객체를 생성하시오</p></blockquote><br><h3 id="Example-24"><a href="#Example-24" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">purchases: [<span class="number">41</span>, <span class="number">51</span>, <span class="number">91</span>, <span class="number">72</span>, <span class="number">71</span>, <span class="number">30</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">55</span>, <span class="number">62</span>, <span class="number">65</span>, <span class="number">45</span>, <span class="number">100</span>, <span class="number">54</span>, <span class="number">83</span>, <span class="number">69</span>, <span class="number">66</span>, <span class="number">43</span>]</span><br><span class="line">n: <span class="number">2</span></span><br><span class="line">d: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">superPrize(purchases, n, d): [<span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 총 18명의 손님중 2n 즉 2, 4, 6, 8, 10, 12, 14, 16, 18번째 손님의 구매금액을 5로 나누었을 때</span></span><br><span class="line"><span class="comment"># 나누어 떨어지는 손님에게 상금을 지급한다.</span></span><br><span class="line"></span><br><span class="line">purchases[<span class="number">1</span>::<span class="number">2</span>] = [<span class="number">51</span>, <span class="number">72</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">62</span>, <span class="number">45</span>, <span class="number">54</span>, <span class="number">69</span>, <span class="number">43</span>]</span><br><span class="line">[x % <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> purchases[<span class="number">1</span>::<span class="number">2</span>]] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>번째가 나누어 떨어지고 인덱스가 절반으로 줄었으니까</span><br><span class="line"><span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>번째의 손님이 상금을 차지하게 된다.</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-20"><a href="#My-Answer-20" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prizes</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, purchases, n ,d)</span>:</span></span><br><span class="line">        self.purchases = purchases</span><br><span class="line">        self.n = n</span><br><span class="line">        self.d = d</span><br><span class="line">        self.i = n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.i &lt; len(self.purchases):</span><br><span class="line">            i = self.i</span><br><span class="line">            self.i += self.n</span><br><span class="line">            <span class="keyword">if</span> self.purchases[i] % self.d == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superPrize</span><span class="params">(purchases, n, d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(Prizes(purchases, n, d))</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-19"><a href="#Another-Answer-19" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prizes</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, n, d)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.n = n</span><br><span class="line">        self.d = d</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(self.p):</span><br><span class="line">            <span class="keyword">if</span> i%self.n == self.n<span class="number">-1</span> <span class="keyword">and</span> x%self.d == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">yield</span> i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superPrize</span><span class="params">(purchases, n, d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(Prizes(purchases, n, d))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prizes</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,purchases,n,d)</span>:</span></span><br><span class="line">        self.winners = [(i+<span class="number">1</span>)*n <span class="keyword">for</span> i,x <span class="keyword">in</span> enumerate(purchases[n<span class="number">-1</span>::n]) <span class="keyword">if</span> x%d == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.winners)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superPrize</span><span class="params">(purchases, n, d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(Prizes(purchases, n, d))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prizes</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(_, p, n, d)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [(i+<span class="number">1</span>)*n <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(p[n<span class="number">-1</span>::n]) <span class="keyword">if</span> v%d == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superPrize</span><span class="params">(purchases, n, d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(Prizes(purchases, n, d))</span><br></pre></td></tr></table></figure><br><h2 id="Try-Functions"><a href="#Try-Functions" class="headerlink" title="Try Functions"></a>Try Functions</h2><blockquote><p>하나의 값을 여러가지 함수로 평가한 결과 리스트를 반환하는 함수</p></blockquote><br><h3 id="Example-25"><a href="#Example-25" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">functions = [<span class="string">"math.sin"</span>, <span class="string">"math.cos"</span>, <span class="string">"lambda x: x * 2"</span>, <span class="string">"lambda x: x ** 2"</span>]</span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">tryFunctions(x, functions) = [(<span class="number">0.8414709848078965</span>, <span class="number">0.5403023058681398</span>, <span class="number">2</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-21"><a href="#My-Answer-21" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tryFunctions</span><span class="params">(x, functions)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(zip(*[map(x, list([<span class="number">1</span>])) <span class="keyword">for</span> x <span class="keyword">in</span> func]))</span><br></pre></td></tr></table></figure><p>*<em>내가 만든 함수의 문제: *</em> 입력값으로 받는 함수리스트가 문자열로 구성되어 있으면 사용할 수 없다. 리스트 안에 있는 문자열을 함수 타입으로 만들고 싶었으나 함수 타입으로 만들어주는 최상위 클래스같은건 없기에 실패..<br>{: .notice}</p><br><h3 id="Another-Answer-20"><a href="#Another-Answer-20" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tryFunctions</span><span class="params">(x, functions)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [eval(f)(x) <span class="keyword">for</span> f <span class="keyword">in</span> functions)]</span><br></pre></td></tr></table></figure><p><span style='color:orange; font-weight:bold;'>eval 함수 언젠간 요긴하게 쓸거같았는데..! eval을 exec로 착각하는 바람에 결국 답을 봐버렸다.. </span><br><br><br><br></p><h2 id="Simple-Composition-amp-Functions-Composition"><a href="#Simple-Composition-amp-Functions-Composition" class="headerlink" title="Simple Composition &amp; Functions Composition"></a>Simple Composition &amp; Functions Composition</h2><blockquote><p>단일 합성함수의 연산 결과를 반환하는 함수 <br><br>n개 중첩 합성함수의 연산 결과를 반환하는 함수</p></blockquote><br><h3 id="Example-26"><a href="#Example-26" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 단일 합성함수</span></span><br><span class="line"></span><br><span class="line">f = <span class="string">"math.log10"</span>, g = <span class="string">"abs"</span> , x = <span class="number">-100</span></span><br><span class="line"></span><br><span class="line">simpleComposition(f, g, x) = math.log10(abs(<span class="number">-100</span>)) = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 중첩 합성함수</span></span><br><span class="line"></span><br><span class="line">functions = [<span class="string">"abs"</span>, <span class="string">"math.sin"</span>, <span class="string">"lambda x: 3 * x / 2"</span>]</span><br><span class="line">x = <span class="number">3.1415</span></span><br><span class="line"></span><br><span class="line">functionsComposition(functions, x) = abs(math.sin(<span class="number">3</span>*<span class="number">3.1415</span>/<span class="number">2</span>)) = <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-22"><a href="#My-Answer-22" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 단일 함성함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span><span class="params">(f, g)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x : f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simpleComposition</span><span class="params">(f, g, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> compose(eval(f), eval(g))(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simpleComposition2</span><span class="params">(f, g, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> eval(f)(eval(g)(x))    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 중첩 합성함수</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span><span class="params">(functions)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> f,g : <span class="keyword">lambda</span> x: f(g(x)), functions)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionsComposition</span><span class="params">(functions, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> compose(map(eval, functions))(x)</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-21"><a href="#Another-Answer-21" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 중첩 합성함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span><span class="params">(functions)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> functions[<span class="number">0</span>] <span class="keyword">if</span> len(functions) == <span class="number">1</span> <span class="keyword">else</span> compose([<span class="keyword">lambda</span> x: functions[<span class="number">0</span>](functions[<span class="number">1</span>](x))] + functions[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionsComposition</span><span class="params">(functions, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> compose(map(eval, functions))(x)</span><br></pre></td></tr></table></figure><br><br><p><a id = '5th'></a></p><h1 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h1>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 코딩연습 </tag>
            
            <tag> python </tag>
            
            <tag> database </tag>
            
            <tag> CodeSignal2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack, Queue, Deque</title>
      <link href="/2020/01/07/datastructure/"/>
      <url>/2020/01/07/datastructure/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><blockquote><p>스택은 한쪽 끝에서만 원소를 넣거나 뺄 수 있는 자료구조이다. <br><br>식후 커피를 제공하는 음식점에 가보면 기다란 원통형으로 된 종이컵 수거통이라고 생각하면 바로 이해가 될 것이다.<br>LIFO(Last In First Out) 구조</p></blockquote><br><p><img src="https://user-images.githubusercontent.com/33630505/72219628-95e8a700-358b-11ea-8012-a0b97ef4321a.JPG" alt="stack"></p><hr><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><blockquote><p>한쪽 끝에서 원소를 넣고 반대쪽 끝에서 원소를 뺄 수 있는 자료구조이다. <br><br>티켓팅을 하거나 줄을 설때 일반적으로 먼저온사람이 먼저 작업을 처리하는데 이와 같은 방식이다. <br><br>FIFO(First In First Out) 구조</p></blockquote><br><p><img src="https://user-images.githubusercontent.com/33630505/72219629-95e8a700-358b-11ea-9298-f66c0e162e0a.JPG" alt="queue"></p><hr><h1 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h1><blockquote><p>양쪽 끝에서 원소를 넣고 뺄 수 있는 자료구조이다. <br></p></blockquote><br><p><img src="https://user-images.githubusercontent.com/33630505/72219630-96813d80-358b-11ea-95a2-4b41e4205696.JPG" alt="deque"></p><hr><p><span style="color: orange">스택, 큐, 덱 자료구조 설명 출처 =&gt; &gt;</span> <a href="https://blog.encrypted.gg/727" target="_blank" rel="noopener">출처</a></p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> stack </tag>
            
            <tag> queue </tag>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 문법</title>
      <link href="/2019/11/10/java/"/>
      <url>/2019/11/10/java/</url>
      
        <content type="html"><![CDATA[<h1 id="Main-Method-with-public-static-void"><a href="#Main-Method-with-public-static-void" class="headerlink" title="Main Method (with public, static, void)"></a>Main Method (with public, static, void)</h1><p><strong>Calculator class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Calculator</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Calculator2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Calculator3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"This is Add Function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = Calculator.Calculator(a, b);</span><br><span class="line"><span class="keyword">int</span> result2 = Calculator(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">int</span> result3 = Calculator(Integer.parseInt(args[<span class="number">0</span>]),Integer.parseInt(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"a + b = "</span> + result);</span><br><span class="line">System.out.println(<span class="string">"10 + 20 = "</span> + result2);</span><br><span class="line">System.out.println(<span class="string">"입력 받는 값 합 = "</span> + result3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>main_test class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main_test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculator cal = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수</span></span><br><span class="line">System.out.println(cal.num1);</span><br><span class="line">System.out.println(cal.num2);</span><br><span class="line">System.out.println(Calculator.num1);</span><br><span class="line"><span class="comment">//System.out.println(Calculator.num2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Add</span></span><br><span class="line">Calculator.Add();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Calculator</span></span><br><span class="line"><span class="keyword">int</span> result = Calculator.Calculator(<span class="number">11</span>, <span class="number">11</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Calculator2</span></span><br><span class="line"><span class="comment">//int result2 = Calculator.Calculator2(22, 22);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Calculator3</span></span><br><span class="line"><span class="comment">//int result3 = Calculator.Calculator3(33, 33);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Main</span></span><br><span class="line">String[] num = <span class="keyword">new</span> String [<span class="number">2</span>];</span><br><span class="line">num[<span class="number">0</span>] = <span class="string">"1000"</span>;</span><br><span class="line">num[<span class="number">1</span>] = <span class="string">"4"</span>;</span><br><span class="line">Calculator.main(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><span style="font-size: 25px; color: #ea8857;">1. Java는 어플리케이션이 실행되면 가장 먼저 Main Method가 실행됩니다. (약속이기 때문에 그냥 받아들입시다)</span><br><br><span style="font-size: 25px; color: #ea8857;">2. Public은 말 그대로 공공성을 띄고 있어 어느 곳에서도 접근 할 수 있다는 의미 입니다.</span><br><br><span style="font-size: 25px; color: #ea8857;">3. Static은 정적임을 뜻하는데, 프로그램이 실행될 때 Java메모리에 할당되며, 프로그램이 종료 될 때 해제가 됩니다.(static이 가장 먼저 정의 됩니다)</span><br><br><span style="font-size: 25px; color: #ea8857;">4. void는 쉽게 말해 return값이 없음을 의미합니다. 그저 실행만 한다고 생각하면 됩니다.</span><br><br><br></p><p><span style="font-size:20px; color: orange;">ClassName name = new ClassName();</span></p><p><img src="https://user-images.githubusercontent.com/33630505/68542062-523abb00-03eb-11ea-880d-2ae23b8f59c6.JPG" alt="class"></p><p>사진 출처: <a href="http://blog.naver.com/PostView.nhn?blogId=heartflow89&logNo=220955262405" target="_blank" rel="noopener">naver blog</a></p><br><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array1.length; i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\n-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//string</span></span><br><span class="line">String[] array2 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">System.out.print(array2[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\n-----------------------"</span>);</span><br><span class="line"><span class="comment">//배열을 생성해 할당하면 배열의 주소가 들어간다</span></span><br><span class="line">String[] array3 = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">array3[<span class="number">0</span>] = <span class="string">"Jung"</span>;</span><br><span class="line">array3[<span class="number">1</span>] = <span class="string">"jihyuk"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j&lt;array3.length;j++) &#123;</span><br><span class="line">array3[j] = Integer.toString(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;array3.length; i++) &#123;</span><br><span class="line">System.out.print(array3[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"\n-----------------------"</span>);</span><br><span class="line"><span class="comment">//char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char array4[] = new char[];</span></span><br><span class="line"><span class="keyword">char</span> array4[] = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line"><span class="keyword">char</span>[] array5 = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;array4.length; n++) &#123;</span><br><span class="line">System.out.print(array4[n]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;array5.length; n++) &#123;</span><br><span class="line">System.out.print(array5[n]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">char</span> array6[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="keyword">char</span>[] array7 = s1.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m&lt;array7.length; m++) &#123;</span><br><span class="line">System.out.print(array7[m]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String s2 = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;array7.length; k++) &#123;</span><br><span class="line">s2+=Character.toString(array7[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\n"</span>+s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> [] array8 = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">String s3 = String.valueOf(array8);</span><br><span class="line">System.out.println(s3);</span><br><span class="line"></span><br><span class="line">String s4 = <span class="keyword">new</span> String(array8,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(s4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//byte </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>밑바닥부터 시작하는 딥러닝</title>
      <link href="/2019/11/03/deeplearning/"/>
      <url>/2019/11/03/deeplearning/</url>
      
        <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Chapter 2 &quot;Perceptron&quot;</span><br><span class="line">2. Chapter 3 &quot;신경망&quot;</span><br><span class="line">3. Chapter 4 &quot;신경망 학습&quot;</span><br></pre></td></tr></table></figure><br><p><span style="font-size: 20px; background: rgb(36, 54, 76); color: white; padding: 2px;">Navigation</span> <br><br><a href="#1st"><span style="font-size: 18px; background: rgb(76, 217, 229); color: white; padding: 2px;">Perceptron</span></a> &nbsp;<br><a href="#2nd"><span style="font-size: 18px; background: rgb(30, 219, 173); color: white; padding: 2px;">신경망</span></a> &nbsp;<br><a href="#3rd"><span style="font-size: 18px; background: rgb(226, 71, 0); color: white; padding: 2px;">신경망 학습</span></a> &nbsp;</p><hr><p><a id="1st"></a></p><h1 id="Chapter-2-“Perceptron”"><a href="#Chapter-2-“Perceptron”" class="headerlink" title="Chapter 2 “Perceptron”"></a>Chapter 2 “Perceptron”</h1><br><h2 id="AND-Gate-Python으로-구현하기"><a href="#AND-Gate-Python으로-구현하기" class="headerlink" title="AND Gate Python으로 구현하기"></a>AND Gate Python으로 구현하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 내가 만든</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">and1</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    <span class="keyword">return</span> x1*x2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">and3</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">-0.7</span></span><br><span class="line">    temp = np.sum(x*w) + b</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x:<span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x)) &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span>)(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 책 내용 변형</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">and2</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    w1, w2, threshold = <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.7</span></span><br><span class="line">    temp = x1*w1 + x2*w2</span><br><span class="line">    <span class="keyword">if</span> temp &gt; threshold:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">and1(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">138</span> ns ± <span class="number">11.7</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">and2(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">413</span> ns ± <span class="number">53</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">and3(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">12.8</span> µs ± <span class="number">389</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br></pre></td></tr></table></figure><br><h2 id="OR-Gate-Python으로-구현하기"><a href="#OR-Gate-Python으로-구현하기" class="headerlink" title="OR Gate Python으로 구현하기"></a>OR Gate Python으로 구현하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 내가 만든  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">or1</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x1, x2: <span class="number">1</span> <span class="keyword">if</span> x1+x2 &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)(x1, x2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">or4</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">-0.1</span></span><br><span class="line">    temp = np.sum(w*x) + b</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x)) &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span>)(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 책 내용 변형</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">or2</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    w1, w2, threshold = <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.2</span></span><br><span class="line">    temp = x1*w1 + x2*w2</span><br><span class="line">    <span class="keyword">if</span> temp &gt; threshold:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">or3</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">-0.2</span></span><br><span class="line">    temp = np.sum(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> temp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or1(<span class="number">0</span>,<span class="number">0</span>)      </span><br><span class="line"><span class="number">385</span> ns ± <span class="number">68.5</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or1(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">418</span> ns ± <span class="number">43.6</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or2(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">501</span> ns ± <span class="number">40</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or2(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">379</span> ns ± <span class="number">43.4</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or3(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">9.47</span> µs ± <span class="number">583</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or3(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">9.74</span> µs ± <span class="number">588</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">or4(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">13.9</span> µs ± <span class="number">1.57</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000</span> loops each)</span><br></pre></td></tr></table></figure><br><h2 id="XOR-Gate-Python으로-구현하기"><a href="#XOR-Gate-Python으로-구현하기" class="headerlink" title="XOR Gate Python으로 구현하기"></a>XOR Gate Python으로 구현하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">and1</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">-0.7</span></span><br><span class="line">    temp = np.sum(x*w) + b</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x:<span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x)) &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span>)(temp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">or1</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">-0.1</span></span><br><span class="line">    temp = np.sum(w*x) + b</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x)) &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span>)(temp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nand</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">-0.5</span>, <span class="number">-0.5</span>])</span><br><span class="line">    b = <span class="number">0.7</span></span><br><span class="line">    temp = np.sum(x*w) + b</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x:<span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x)) &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span>)(temp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(x1:int, x2:int)</span>-&gt;int:</span></span><br><span class="line">    s1 = nand(x1,x2)</span><br><span class="line">    s2 = or1(x1,x2)</span><br><span class="line">    result = and1(s1,s2)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">xor(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">40.7</span> µs ± <span class="number">4.55</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000</span> loops each)</span><br></pre></td></tr></table></figure><br><hr><p><a id="2nd"></a></p><h1 id="Chapter-3-“신경망”"><a href="#Chapter-3-“신경망”" class="headerlink" title="Chapter 3 “신경망”"></a>Chapter 3 “신경망”</h1><br><h2 id="활성화-함수"><a href="#활성화-함수" class="headerlink" title="활성화 함수"></a>활성화 함수</h2><blockquote><p>신호의 총 합을 출력 신호로 변환하는 함수</p></blockquote><br><h3 id="단층-퍼셉트론에서-사용하는-Step-Function"><a href="#단층-퍼셉트론에서-사용하는-Step-Function" class="headerlink" title="단층 퍼셉트론에서 사용하는 Step Function"></a>단층 퍼셉트론에서 사용하는 Step Function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">(x)</span>:</span></span><br><span class="line">    y = x &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> y.astype(np.int)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">y = step(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/68103497-6b8ac580-ff1a-11e9-9b10-7b83912d064f.JPG" alt="step"><br><br></p><h3 id="Sigmoid-Function"><a href="#Sigmoid-Function" class="headerlink" title="Sigmoid Function"></a>Sigmoid Function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/68103521-79d8e180-ff1a-11e9-8aa6-cd8c23ec31c8.JPG" alt="sigmoid"></p><br><h3 id="Relu-Function"><a href="#Relu-Function" class="headerlink" title="Relu Function"></a>Relu Function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">y = relu(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/68103558-adb40700-ff1a-11e9-91ba-3e00f6e486d2.JPG" alt="relu"></p><br><h3 id="Hyperbolic-Tangent-Function"><a href="#Hyperbolic-Tangent-Function" class="headerlink" title="Hyperbolic Tangent Function"></a>Hyperbolic Tangent Function</h3><blockquote><p>sigmoid보다 output 값의 범위가 넓어 vanishing gradient 문제가 발생할 가능성이 있는 모델에서 사용한다.<br><br>하지만 여전히 층이 많이 깊어지면 vanishing gradient 문제를 피할 수는 없다.<br><br></p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/70371772-c8630c80-191a-11ea-8ec7-8302070c9654.JPG" alt="tanh"><br><img src="https://user-images.githubusercontent.com/33630505/70371778-d153de00-191a-11ea-8aed-cc8b1ef1e4ea.JPG" alt="tanh func"></p><p><a href="http://taewan.kim/post/tanh_diff/" target="_blank" rel="noopener">그림 출처</a><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*sigmoid(<span class="number">2</span>*x) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y = tanh(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/70371764-a9fd1100-191a-11ea-9f8e-ea7d37267f19.JPG" alt="tanh plot"></p><br><h2 id="선형-VS-비선형"><a href="#선형-VS-비선형" class="headerlink" title="선형 VS 비선형"></a>선형 VS 비선형</h2><blockquote><p>중첩의 원리가 적용되면 선형! 적용되지 않으면 비선형!</p></blockquote><br><h3 id="입력값-각각을-함수에-대입한-결과의-합과"><a href="#입력값-각각을-함수에-대입한-결과의-합과" class="headerlink" title="입력값 각각을 함수에 대입한 결과의 합과"></a>입력값 각각을 함수에 대입한 결과의 합과</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">y &#x3D; ax1 + bx2 일때</span><br><span class="line"></span><br><span class="line">if x1, x2 &#x3D;&gt; 1, 2</span><br><span class="line">y1 &#x3D; a + 2b</span><br><span class="line"></span><br><span class="line">if x1, x2 &#x3D;&gt; 5, 10</span><br><span class="line">y2 &#x3D; 5a + 10b</span><br><span class="line"></span><br><span class="line">y &#x3D; y1 + y2</span><br><span class="line">  &#x3D; 6a + 12b</span><br></pre></td></tr></table></figure><br><h3 id="입력값의-합을-함수에-대입한-결과가-서로-같다면"><a href="#입력값의-합을-함수에-대입한-결과가-서로-같다면" class="headerlink" title="입력값의 합을 함수에 대입한 결과가 서로 같다면"></a>입력값의 합을 함수에 대입한 결과가 서로 같다면</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y &#x3D; ax1  + bx2 일때</span><br><span class="line"></span><br><span class="line">if x1, x2 &#x3D;&gt; (1+5), (2+10)</span><br><span class="line">y &#x3D; 6a + 12b</span><br></pre></td></tr></table></figure><br><p><span style="color: #fe8559; font-size: 30px">바로! 중첩의 원리가 적용되는 것!</span><br><br><br></p><h2 id="신경망에서는-활성화함수로-비선형-함수를-사용하는-이유는"><a href="#신경망에서는-활성화함수로-비선형-함수를-사용하는-이유는" class="headerlink" title="신경망에서는 활성화함수로 비선형 함수를 사용하는 이유는?"></a>신경망에서는 활성화함수로 비선형 함수를 사용하는 이유는?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">활성화 함수를 f(x) &#x3D; ax 라고 했을 때</span><br><span class="line"></span><br><span class="line">Layer가 3개인 다층 신경망을 식으로 나타내면</span><br><span class="line">y &#x3D; f(f(f(x)))가 됩니다</span><br><span class="line"></span><br><span class="line">그런데 이는 y &#x3D; a*a*a*x와 같고 하나의 선형 함수로 표현할 수 있기 때문에</span><br><span class="line">층을 아무리 깊게 해도 아무 의미가 없게 됩니다.</span><br></pre></td></tr></table></figure><br><h2 id="행렬-곱연산-VS-dot-VS-matmul"><a href="#행렬-곱연산-VS-dot-VS-matmul" class="headerlink" title="행렬 곱연산 VS dot VS matmul"></a>행렬 곱연산 VS dot VS matmul</h2><br>**행렬 곱연산(Element wise, 일반적인 행렬 곱셈과 다름)**<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">n = np.array([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">m = np.array([[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]])</span><br><span class="line"></span><br><span class="line">n*m</span><br><span class="line">: array([[[<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">8</span>]]])</span><br><span class="line"></span><br><span class="line">m*n</span><br><span class="line">: array([list([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), list([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])],</span><br><span class="line">      dtype=object)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = np.array([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">m = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">n*m</span><br><span class="line">: array([list([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), list([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])],</span><br><span class="line">      dtype=object)</span><br><span class="line"></span><br><span class="line">m*n</span><br><span class="line">: array([list([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), list([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])],</span><br><span class="line">      dtype=object)</span><br><span class="line"></span><br><span class="line">n = np.array([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">m = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]])</span><br><span class="line"></span><br><span class="line">n*m</span><br><span class="line">: ValueError: operands could <span class="keyword">not</span> be broadcast together <span class="keyword">with</span> shapes (<span class="number">2</span>,) (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><br><p><strong>dot(Element wise의 합, 내적)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">g = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]])</span><br><span class="line">h = np.array([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">np.dot(g,h)</span><br><span class="line">: array([<span class="number">8</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">i = np.array([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line">j = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).reshape(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">np.dot(i,j)</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3차원부터 matmul과 차이난다</span></span><br><span class="line">A = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">B = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">np.dot(A,B)</span><br><span class="line">: array([[[[  <span class="number">42</span>,   <span class="number">48</span>,   <span class="number">54</span>],</span><br><span class="line">         [ <span class="number">114</span>,  <span class="number">120</span>,  <span class="number">126</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">114</span>,  <span class="number">136</span>,  <span class="number">158</span>],</span><br><span class="line">         [ <span class="number">378</span>,  <span class="number">400</span>,  <span class="number">422</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">186</span>,  <span class="number">224</span>,  <span class="number">262</span>],</span><br><span class="line">         [ <span class="number">642</span>,  <span class="number">680</span>,  <span class="number">718</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       [[[ <span class="number">258</span>,  <span class="number">312</span>,  <span class="number">366</span>],</span><br><span class="line">         [ <span class="number">906</span>,  <span class="number">960</span>, <span class="number">1014</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">330</span>,  <span class="number">400</span>,  <span class="number">470</span>],</span><br><span class="line">         [<span class="number">1170</span>, <span class="number">1240</span>, <span class="number">1310</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">402</span>,  <span class="number">488</span>,  <span class="number">574</span>],</span><br><span class="line">         [<span class="number">1434</span>, <span class="number">1520</span>, <span class="number">1606</span>]]]])</span><br></pre></td></tr></table></figure><br><p><strong>matmul(@, 행렬 곱셈(matrix multiplication))</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">g = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]])</span><br><span class="line">h = np.array([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">np.matmul(g,h)</span><br><span class="line">: array([<span class="number">8</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">i = np.array([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line">j = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).reshape(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">np.matmul(i,j)</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3차원부터 dot과 차이가 난다</span></span><br><span class="line">A = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">B = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">np.matmul(A,B)</span><br><span class="line">: array([[[  <span class="number">42</span>,   <span class="number">48</span>,   <span class="number">54</span>],</span><br><span class="line">        [ <span class="number">114</span>,  <span class="number">136</span>,  <span class="number">158</span>],</span><br><span class="line">        [ <span class="number">186</span>,  <span class="number">224</span>,  <span class="number">262</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">906</span>,  <span class="number">960</span>, <span class="number">1014</span>],</span><br><span class="line">        [<span class="number">1170</span>, <span class="number">1240</span>, <span class="number">1310</span>],</span><br><span class="line">        [<span class="number">1434</span>, <span class="number">1520</span>, <span class="number">1606</span>]]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g @ h</span><br><span class="line">: array([<span class="number">8</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">i @ j</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">A @ B</span><br><span class="line">: array([[[  <span class="number">42</span>,   <span class="number">48</span>,   <span class="number">54</span>],</span><br><span class="line">        [ <span class="number">114</span>,  <span class="number">136</span>,  <span class="number">158</span>],</span><br><span class="line">        [ <span class="number">186</span>,  <span class="number">224</span>,  <span class="number">262</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">906</span>,  <span class="number">960</span>, <span class="number">1014</span>],</span><br><span class="line">        [<span class="number">1170</span>, <span class="number">1240</span>, <span class="number">1310</span>],</span><br><span class="line">        [<span class="number">1434</span>, <span class="number">1520</span>, <span class="number">1606</span>]]])</span><br></pre></td></tr></table></figure><br><p><strong>dot과 matmul</strong> dot은 내적을, matmul은 행렬의 곱을 의미하는데 3차원, 3차원 연산부터 값이 서로 상의 하게 나온다. 내적의 의미는 서로 다른 두 벡터의 방향성을 알 수 있는 연산값이지만 행렬의 곱의 의미는 무엇일까..? 왜 3차원 부터 다른것일까? 아는 사람은 메일 주세요 ㅠ<br>{: .notice}</p><br><h2 id="내적-inner-product"><a href="#내적-inner-product" class="headerlink" title="내적(inner product)"></a>내적(inner product)</h2><blockquote><p>방향이 있는 서로 다른 두 벡터가 있을 때 <br><br>한 벡터를 기준으로 같은 방향이 되도록 다른 한 벡터를 정사영시켜 <br><br>기준 벡터의 크기와 정사영시켜 생긴 벡터의 크기의 곱이다. <br><br>즉, 한쪽 방향으로의 크기의 곱!<br><br><br><img src="https://user-images.githubusercontent.com/33630505/68277234-1d102f00-00b2-11ea-8704-d603090c1c6c.JPG" alt="innerproduct"><br><img src="https://user-images.githubusercontent.com/33630505/68277266-2b5e4b00-00b2-11ea-9b1f-3b5ac13758e5.JPG" alt="innerproduct2"></p></blockquote><p><span style="color: #fe8559; font-size: 30px">내적을 구하면 두 벡터의 방향이 얼마나 일치하는지 알 수 있다!</span><br></p><br><h2 id="다층-신경망-구현하기-3층-신경망-또는-2층-신경망"><a href="#다층-신경망-구현하기-3층-신경망-또는-2층-신경망" class="headerlink" title="다층 신경망 구현하기(3층 신경망 또는 2층 신경망)"></a>다층 신경망 구현하기(3층 신경망 또는 2층 신경망)</h2><p><img src="https://user-images.githubusercontent.com/33630505/68211627-43cf5680-001b-11ea-80fe-1b7d59955ca9.JPG" alt="threelayer"><br><br></p><h3 id="version-1"><a href="#version-1" class="headerlink" title="version 1"></a>version 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity_function</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">X = np.array([<span class="number">1.0</span>, <span class="number">0.5</span>])</span><br><span class="line">W1 = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>]])</span><br><span class="line">B1 = np.array([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">L1 = np.dot(X, W1) + B1</span><br><span class="line">Z1 = sigmoid(L1)</span><br><span class="line"></span><br><span class="line">W2 = np.array([[<span class="number">0.1</span>, <span class="number">0.4</span>], [<span class="number">0.2</span>, <span class="number">0.5</span>], [<span class="number">0.3</span>, <span class="number">0.6</span>]])</span><br><span class="line">B2 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line"></span><br><span class="line">L2 = np.dot(Z1, W2) + B2</span><br><span class="line">Z2 = sigmoid(L2)</span><br><span class="line"></span><br><span class="line">W3 = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>]])</span><br><span class="line">B3 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line"></span><br><span class="line">A3 = np.dot(Z2, W3) + B3</span><br><span class="line">Y = identity_function(A3)</span><br></pre></td></tr></table></figure><br><h3 id="version-2"><a href="#version-2" class="headerlink" title="version 2"></a>version 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity_function</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">()</span>:</span></span><br><span class="line">    network = &#123; &#125;</span><br><span class="line">    network[<span class="string">'W1'</span>] = np.random.random((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">    network[<span class="string">'b1'</span>] = np.random.random((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    network[<span class="string">'W2'</span>] = np.random.random((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">    network[<span class="string">'b2'</span>] = np.random.random((<span class="number">2</span>))</span><br><span class="line">    network[<span class="string">'W3'</span>] = np.random.random((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    network[<span class="string">'b3'</span>] = np.random.random((<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(network, X)</span>:</span></span><br><span class="line">    W1, W2, W3 = network[<span class="string">'W1'</span>], network[<span class="string">'W2'</span>], network[<span class="string">'W3'</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">'b1'</span>], network[<span class="string">'b2'</span>], network[<span class="string">'b3'</span>]</span><br><span class="line"></span><br><span class="line">    L1 = np.dot(X, W1) + b1  <span class="comment"># hidden layer</span></span><br><span class="line">    z1 = sigmoid(L1)</span><br><span class="line"></span><br><span class="line">    L2 = np.dot(L1, W2) + b2 <span class="comment"># hidden layer</span></span><br><span class="line">    z2 = sigmoid(L2)</span><br><span class="line"></span><br><span class="line">    L3 = np.dot(L2, W3) + b3 <span class="comment"># output layer</span></span><br><span class="line">    y = identity_function(L3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">network = init_network()</span><br><span class="line">x = np.array([<span class="number">0.1</span>, <span class="number">0.5</span>])</span><br><span class="line">y = forward(network, x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><br><h2 id="출력층-설계하기"><a href="#출력층-설계하기" class="headerlink" title="출력층 설계하기"></a>출력층 설계하기</h2><blockquote><p>우선 학습의 결과값으로 유한개의 결과가 나오는가 무한개의 결과가 나오는가 판별해야 합니다 <br><br>유한개의 결과가 나온다면 분류 문제 (몇개로 분류되는지도 생각해봐야 함) <br><br>무한개의 결과가 나온다면 회귀 문제 <br></p></blockquote><p><span style="color: #fe8559; font-size: 30px">결과값을 달리 해야 하기 때문에 출력층에서 사용하는 활성화 함수도 분류 문제인지, 회귀 문제인지에 따라 달라져야 합니다.</span></p><br><h2 id="기계학습은-학습과-추론-두-단계를-거친다-backward-propagation-amp-forward-propagation"><a href="#기계학습은-학습과-추론-두-단계를-거친다-backward-propagation-amp-forward-propagation" class="headerlink" title="기계학습은 학습과 추론 두 단계를 거친다(backward propagation &amp; forward propagation)"></a>기계학습은 학습과 추론 두 단계를 거친다(backward propagation &amp; forward propagation)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">추론 &#x3D;&gt; 지금의 사고방식(가설함수, 모델)로 예측하는 것</span><br><span class="line">학습 &#x3D;&gt; 예측한 값과 현실의 답(실제값)의 차이를 줄여나가면서</span><br><span class="line">        기존의 사고방식(가설함수의 가중치 및 하이퍼파라미터)을 업데이트</span><br><span class="line"></span><br><span class="line">문제를 해결할 때</span><br><span class="line">사람은 어떤 현상을 보고 패턴을 찾고, 문제에 대한 질문을 생각하고, 답을 찾으며 경험과 직관으로 답을 찾는 반면</span><br><span class="line">기계는 어떤 현상을 인식하기 위해 데이터를 입력 받고, 패턴을 찾기 위해 데이터에서 중요한 데이터를 찾는 과정인</span><br><span class="line">특징을 추출하고 그 특징의 패턴을 찾아 모델을 만듭니다.</span><br><span class="line"></span><br><span class="line">그런데 어떠한 데이터를 벡터로 변환해야 할때</span><br><span class="line">변환을 위해 사용되는 특징은 여전히 사람이 설계해야 합니다.</span><br><span class="line"></span><br><span class="line">따라서 문제에 따라서 사람이 적절한 특징을 생각해내야 합니다.</span><br><span class="line">&#x3D;&gt; 문제를 해결하려는 도메인의 지식이 중요한 이유!</span><br></pre></td></tr></table></figure><br><h2 id="사람-VS-기계학습-VS-딥러닝"><a href="#사람-VS-기계학습-VS-딥러닝" class="headerlink" title="사람 VS 기계학습 VS 딥러닝"></a>사람 VS 기계학습 VS 딥러닝</h2><blockquote><p>딥러닝은 기계학습의 일종이지만 학습을 하는데 있어서 조금 차이를 보입니다.</p></blockquote><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ex) 숫자 5를 학습하는 법</span><br><span class="line"></span><br><span class="line">사람 &#x3D;&gt; 경험, 직관, 신념, 사고방식 등... &#x3D;&gt; 숫자 5구나!?</span><br><span class="line">기계학습 &#x3D;&gt; 사람이 생각한 특징(전처리 등..) &#x3D;&gt; SVM, KNN 등 알고리즘 사용 &#x3D;&gt; 숫자 5구나!?</span><br><span class="line">딥러닝 &#x3D;&gt; 기계가 데이터를 통해 특징 추출까지 직접 함 &#x3D;&gt; 숫자 5구나!?</span><br></pre></td></tr></table></figure><br><h3 id="분류"><a href="#분류" class="headerlink" title="분류"></a>분류</h3><blockquote><p>이중 분류라면 step function이나 sigmoid 다중 분류라면 softmax (step, sigmoid, softmax이외에 다른 함수가 될 수도 있다)<br><br>ex) 0 ~ 9사이의 숫자중 어느 하나를 분류해야하는 문제가 있다고 한다면 출력층의 노드의 수는 10개가 되고 <br><br>2개 이상의 분류이기 때문에 softmax같은 활성화 함수를 활용해 10개의 출력을 하되 마지막에는 가장 확률이 높은 값 하나만을 출력하면 된다</p></blockquote><br>**step, sigmoid는 많이 다뤘으므로 softmax를 알아보자**<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(x)</span>:</span></span><br><span class="line">    op = np.max(x)  <span class="comment"># 오버플로우가 발생 방지</span></span><br><span class="line">    x = x - op</span><br><span class="line">    exp = [np.exp(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">    sum_exps = sum(exp)</span><br><span class="line">    <span class="keyword">return</span> [j/sum_exps <span class="keyword">for</span> j <span class="keyword">in</span> exp]</span><br></pre></td></tr></table></figure><p><strong>softmax 계산시 오퍼플로우 문제</strong> softmax에 709이상의 입력값을 대입하면 오버플로우 현상이 발생한다. 따라서 오버플로우를 방지하기 위해서 입력값중 가장 큰 값을 뽑아 대입하는 값에 각각을 빼주고 계산하게 되면 각각의 값에 전부 같은 값을 빼주었기 때문에 softmax의 결과는 달라지지 않고 출력됨을 확인할 수 있다. softmax는 발생확률 값을 리턴하기 때문에 출력값의 총 합이 1이되기만 하면 된다.<br>{: .notice}</p><br><h3 id="MNIST-데이터-셋으로-추론-처리-구현하기-분류"><a href="#MNIST-데이터-셋으로-추론-처리-구현하기-분류" class="headerlink" title="MNIST 데이터 셋으로 추론 처리 구현하기(분류)"></a>MNIST 데이터 셋으로 추론 처리 구현하기(분류)</h3><blockquote><p>test data로 이미 학습된 모델(pickle) 정확도 확인하기 (test data의 예측값과 test data의 실제값 비교)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir) <span class="comment"># 부모 디렉터리의 파일을 가져올 수 있도록 설정</span></span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(x)</span>:</span></span><br><span class="line">    op = np.max(x)  </span><br><span class="line">    x = x - op</span><br><span class="line">    exp = [np.exp(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">    sum_exps = sum(exp)</span><br><span class="line">    <span class="keyword">return</span> [j/sum_exps <span class="keyword">for</span> j <span class="keyword">in</span> exp]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># flatten =&gt; 1차원 or 3차원 / normalize =&gt; 0 ~ 1 사이 정규화 할지</span></span><br><span class="line">    (x_train, y_train), (x_test, y_test) = load_mnist(normalize=<span class="literal">True</span>, flatten=<span class="literal">True</span>, one_hot_label=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> x_test, y_test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"sample_weight.pkl"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        network = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(network, x)</span>:</span></span><br><span class="line">    W1, W2, W3 = network[<span class="string">'W1'</span>], network[<span class="string">'W2'</span>], network[<span class="string">'W3'</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">'b1'</span>], network[<span class="string">'b2'</span>], network[<span class="string">'b3'</span>]</span><br><span class="line"></span><br><span class="line">    L1 = np.dot(x, W1) + b1  </span><br><span class="line">    z1 = sigmoid(L1)</span><br><span class="line"></span><br><span class="line">    L2 = np.dot(L1, W2) + b2</span><br><span class="line">    z2 = sigmoid(L2)</span><br><span class="line"></span><br><span class="line">    L3 = np.dot(L2, W3) + b3</span><br><span class="line">    y = softmax(L3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">x, y = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line"></span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    t = predict(network, x[i])</span><br><span class="line">    p = np.argmax(t)</span><br><span class="line">    <span class="keyword">if</span> (p == y[i]):</span><br><span class="line">        accuracy_cnt += <span class="number">1</span></span><br><span class="line">print(<span class="string">"Accuracy: "</span> + str(float(accuracy_cnt) / len(x)))</span><br></pre></td></tr></table></figure><p><a href="https://github.com/oreilly-japan/deep-learning-from-scratch" target="_blank" rel="noopener">MNIST 다운로드</a></p><br><h3 id="회귀"><a href="#회귀" class="headerlink" title="회귀"></a>회귀</h3><h3 id="배치-Batch"><a href="#배치-Batch" class="headerlink" title="배치 (Batch)"></a>배치 (Batch)</h3><blockquote><p>하나로 묶은 입력 데이터를 배치(Batch)라고 합니다. <br><br><br></p></blockquote><p><strong>MNIST데이터는 숫자 이미지 데이터로 이미지 크기가 28 X 28 =&gt; 784라고 했을 때</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">이미지 데이터 1장일 때</span><br><span class="line">        Input       W1        W2         W3      Output</span><br><span class="line">형상   1 X 784  784 X 50   50 X 100   100 X 10   1 X 10</span><br><span class="line"></span><br><span class="line">이미지 데이터 100장일 때</span><br><span class="line">        Input       W1        W2        W3      Output</span><br><span class="line">형상  100 X 784  784 X 50  50 X 100  100 X 10   100 X 10</span><br></pre></td></tr></table></figure><br><p><strong>배치 처리의 장점</strong> 1. numpy가 벡터연산을 효율적으로 처리하기 때문에 한번에 많은 데이터를 입력하더라도 빠른 시간에 처리할 수 있다. 2.<br>신경망에서 데이터 전송이 병목으로 작용하는 경우가 자주 있는데, 배치 처리를 함으로써 버스에 주는 부하를 줄일 수 있다.<br>{: .notice}<br><br></p><p><strong>배치 처리 구현 (위 MNIST 예제와 동일)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x, y = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(x), batch_size):</span><br><span class="line">    x_batch = x[i:i+batch_size]</span><br><span class="line">    y_batch = predict(network, x_batch)</span><br><span class="line">    p = np.argmax(y_batch, axis = <span class="number">1</span>) <span class="comment"># axis = 1하는 이유는?</span></span><br><span class="line">    accuracy_cnt += np.sum(p == y[i:i+batch_size])</span><br><span class="line">print(<span class="string">"Accuracy: "</span> + str(float(accuracy_cnt) / len(x)))</span><br></pre></td></tr></table></figure><br><h3 id="Batch-VS-Mini-Batch-VS-Stochastic-Gradient-Descent"><a href="#Batch-VS-Mini-Batch-VS-Stochastic-Gradient-Descent" class="headerlink" title="Batch VS Mini Batch VS Stochastic Gradient Descent"></a>Batch VS Mini Batch VS Stochastic Gradient Descent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Batch는 여러 데이터를 한 묶음으로 하여 1 Iteration에 사용되는 data set의 모음</span><br><span class="line">Mini Batch는 전체 데이터에서 특정 Batch Size로 나누어 학습시키는 방법</span><br><span class="line"> - Batch보다 빠르고 SGD보다는 낮은 오차율을 갖는다</span><br><span class="line">Stochastic Gradient Descent는 데이터를 한 개씩 뽑아서 처리하고 모든 데이터에 반복하는 방법이다.</span><br></pre></td></tr></table></figure><br><p><a id="3rd"></a></p><h1 id="Chapter-4-“신경망-학습”"><a href="#Chapter-4-“신경망-학습”" class="headerlink" title="Chapter 4 “신경망 학습”"></a>Chapter 4 “신경망 학습”</h1><br>## 학습하기<h3 id="Lose-Function-Cost-Function"><a href="#Lose-Function-Cost-Function" class="headerlink" title="Lose Function(Cost Function)"></a>Lose Function(Cost Function)</h3><blockquote><p>신경망 학습에서는 현재 상태를 하나의 지표로 표현하고 <br><br>그 지표를 가장 좋게 만들어주는 가중치 매개 변수의 값을 탐색해나갑니다. <br><br>이때 현재 상태와 다음 상태를 비교하여 최적의 상태를 만들기 위한 수단으로 손실 함수를 사용하게 됩니다.<br><br></p></blockquote><br><h3 id="Mean-Squared-Error-평균-제곱-오차"><a href="#Mean-Squared-Error-평균-제곱-오차" class="headerlink" title="Mean Squared Error(평균 제곱 오차)"></a>Mean Squared Error(평균 제곱 오차)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mse</span><span class="params">(y, t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * np.sum((y-t) **<span class="number">2</span>)</span><br></pre></td></tr></table></figure><br><h3 id="Cross-Entropy-Error-교차-엔트로피-오차"><a href="#Cross-Entropy-Error-교차-엔트로피-오차" class="headerlink" title="Cross Entropy Error(교차 엔트로피 오차)"></a>Cross Entropy Error(교차 엔트로피 오차)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cee</span><span class="params">(y, t)</span>:</span></span><br><span class="line">    delta = <span class="number">1e-7</span></span><br><span class="line">    <span class="keyword">return</span> -np.sum(t*np.log(y + delta))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cee</span><span class="params">(y, t)</span>:</span></span><br><span class="line">    delta = <span class="number">1e-7</span></span><br><span class="line">    <span class="keyword">return</span> -np.sum(t*np.log(y + delta) - (<span class="number">1</span>-t)*np.log(<span class="number">1</span>-y + delta))</span><br><span class="line"></span><br><span class="line"><span class="comment"># delta를 더하는 이유는 예측값이 0일 때 연산 결과가 -inf로 나오는 것을 방지하기위해 아주 작은 값을 더했습니다.</span></span><br></pre></td></tr></table></figure><br><h2 id="해석적-미분-VS-수치-미분"><a href="#해석적-미분-VS-수치-미분" class="headerlink" title="해석적 미분 VS 수치 미분"></a>해석적 미분 VS 수치 미분</h2><h3 id="해석적-미분"><a href="#해석적-미분" class="headerlink" title="해석적 미분"></a>해석적 미분</h3><blockquote><p>해석적으로 미분 <br><br>오차를 포함하지 않는 진정한 미분 값을 구할 수 있다</p></blockquote><p><strong>1. 전미분</strong><br><img src="https://user-images.githubusercontent.com/33630505/68744609-57d91080-0638-11ea-9183-15c19533d610.JPG" alt="전미분"></p><br><p><strong>2. 편미분</strong><br><img src="https://user-images.githubusercontent.com/33630505/68744724-9969bb80-0638-11ea-8d64-0f900004bb52.JPG" alt="편미분"></p><br><h3 id="수치-미분"><a href="#수치-미분" class="headerlink" title="수치 미분"></a>수치 미분</h3><blockquote><p>아주 작은 차분으로 미분하는 것 <br><br>수치 미분에는 오차가 포함된다 <br><br><br></p></blockquote><p><strong>반올림 오차</strong></p><blockquote><p>반올림 오차는 소수점 8자리 이하가 생략되어 최종 계산에 오차가 생기게 하는 경우를 말한다</p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.float32(<span class="number">1e-50</span>)</span><br><span class="line">: <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p><strong>차분</strong><br><img src="https://user-images.githubusercontent.com/33630505/68745204-8dcac480-0639-11ea-9f5e-8dd6eb56b002.JPG" alt="차분"></p><br><p><strong>중앙 차분</strong><br><img src="https://user-images.githubusercontent.com/33630505/68745459-18abbf00-063a-11ea-97df-e8ecf7a8e28d.JPG" alt="중앙 차분"><br><br></p><p><strong>수치 미분의 예</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 중앙 차분</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numerical_diff</span><span class="params">(f, x)</span>:</span></span><br><span class="line">    h = <span class="number">1e-4</span></span><br><span class="line">    <span class="keyword">return</span>(f(x+h) - f(x-h)) / (<span class="number">2</span>*h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># f(x) = 0.01x^2 + 0.1x</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.01</span>*x**<span class="number">2</span> + <span class="number">0.1</span>*x</span><br><span class="line"></span><br><span class="line"><span class="comment"># f(x), f(x)' 그래프 그리기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_draw</span><span class="params">(x1, y1,x2,y2)</span>:</span></span><br><span class="line">    plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"f(x)"</span>)</span><br><span class="line">    plt.plot(x1,y1, x2,y2, <span class="string">'-r'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># f(x)' 기울기, y 절편 구하기    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(x,y,f)</span>:</span></span><br><span class="line">    grad = numerical_diff(f, x)</span><br><span class="line">    b = y - grad*x</span><br><span class="line">    <span class="keyword">return</span> grad, b         </span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0.0</span>,<span class="number">20.0</span>,<span class="number">0.1</span>)</span><br><span class="line">y = func(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (x=5, y=0.75)</span></span><br><span class="line">function_1 = gen(<span class="number">5</span>, func(<span class="number">5</span>), func)[<span class="number">0</span>]*x + gen(<span class="number">5</span>, func(<span class="number">5</span>), func)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># (x=10, y=2)</span></span><br><span class="line">function_2 = gen(<span class="number">10</span>, func(<span class="number">10</span>), func)[<span class="number">0</span>]*x + gen(<span class="number">10</span>, func(<span class="number">10</span>), func1)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br><p><strong>func_draw(x, y, x, function_1)</strong><br><img src="https://user-images.githubusercontent.com/33630505/68746541-27937100-063c-11ea-9dba-b837df7a71c4.JPG" alt="func1"></p><br><p><strong>func_draw(x, y, x, function_2)</strong><br><img src="https://user-images.githubusercontent.com/33630505/68746563-3548f680-063c-11ea-8e37-232475752ad3.JPG" alt="func2"></p><br><h2 id="학습-알고리즘-구현하기"><a href="#학습-알고리즘-구현하기" class="headerlink" title="학습 알고리즘 구현하기"></a>학습 알고리즘 구현하기</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[학습] &#x3D;&gt; 데이터(Feature)의 중요도에 관여하는 가중치와 편향을 훈련 데이터에 적응하도록 조정하는 과정</span><br><span class="line"></span><br><span class="line">[1 단계] &gt; 미니 배치</span><br><span class="line">: 훈련 데이터 중 일부를 무작위로 가져옵니다. 선별한 데이터를 미니배치라 부르며,</span><br><span class="line">  미니배치의 loss function 값을 줄이는 것이 목표입니다.</span><br><span class="line"></span><br><span class="line">[2 단계] &gt; 기울기 산출</span><br><span class="line">: 미니 배치의 loss function 값을 줄이기 위해 각 가중치 매개변수의 기울기를 구합니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[3 단계] &gt; 매개변수 갱신</span><br><span class="line">: 가중치 매개변수의 값을 0에 가까워 지도록 갱신합니다.</span><br><span class="line">  그 기울기가 0에 가까워지면 정답 - 예측값이 작아짐을 의미하여 학습이 충분히 되었음을 의미합니다.</span><br><span class="line"></span><br><span class="line">[4 단계] &gt; 1~3 단계를 반복한다</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeSignal Arcade 문제 풀이</title>
      <link href="/2019/10/09/codesignal/"/>
      <url>/2019/10/09/codesignal/</url>
      
        <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Intro     &#x3D;&gt; 문제해결 프로그래밍, 알고리즘 문제</span><br><span class="line">2. DataBase  &#x3D;&gt; SQL 문제</span><br><span class="line">3. The Core  &#x3D;&gt; 아직 안풀어봄</span><br><span class="line">4. Python    &#x3D;&gt; Python 문법 문제</span><br><span class="line">5. Graphs    &#x3D;&gt; 아직 안풀어봄</span><br></pre></td></tr></table></figure><br><p><span style="font-size: 20px; background: rgb(36, 54, 76); color: white; padding: 2px;">Navigation</span> <br><br><a href="#1st"><span style="font-size: 18px; background: rgb(76, 217, 229); color: white; padding: 2px;">Intro</span></a> &nbsp;<br><a href="#2nd"><span style="font-size: 18px; background: rgb(30, 219, 173); color: white; padding: 2px;">DataBase</span></a> &nbsp;<br><a href="#3rd"><span style="font-size: 18px; background: rgb(226, 71, 0); color: white; padding: 2px;">The Core</span></a> &nbsp;<br><a href="#4th"><span style="font-size: 18px; background: rgb(71, 182, 127); color: white; padding: 2px;">Python</span></a> &nbsp;<br><a href="#5th"><span style="font-size: 18px; background: rgb(125, 73, 194); color: white; padding: 2px;">Graphs</span></a> &nbsp;</p><hr><br><p><a id = '1st'></a></p><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><br><h2 id="CenturyFromYear"><a href="#CenturyFromYear" class="headerlink" title="CenturyFromYear"></a>CenturyFromYear</h2><blockquote><p>연도를 입력 받으면 몇 세기인지 출력하는 함수 만들기</p></blockquote><br><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">For year &#x3D; 1905, the output should be</span><br><span class="line">centuryFromYear(year) &#x3D; 20</span><br><span class="line"></span><br><span class="line">For year &#x3D; 1700, the output should be</span><br><span class="line">centuryFromYear(year) &#x3D; 17</span><br></pre></td></tr></table></figure><br>### My Answer<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">centuryFromYear</span><span class="params">(year)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">100</span> != <span class="number">0</span>:</span><br><span class="line">        year = year / <span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> int(year + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        year = year / <span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> int(year)</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-Python"><a href="#Another-Answer-Python" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">centuryFromYear</span><span class="params">(year)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (year + <span class="number">99</span>) // <span class="number">100</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-JS"><a href="#Another-Answer-JS" class="headerlink" title="Another Answer (JS)"></a>Another Answer (JS)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPalindrome</span>(<span class="params">inputString</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inputString == inputString.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><h2 id="CheckPalindrome"><a href="#CheckPalindrome" class="headerlink" title="CheckPalindrome"></a>CheckPalindrome</h2><blockquote><p>회문인지 체크하는 함수, 앞으로 읽어도 뒤로 읽어도 똑같은 문자열이면 True 반환, 아니면 False 반환</p></blockquote><br><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">For inputString &#x3D; &quot;aabbaa&quot;, the output should be checkPalindrome(inputString) &#x3D; ture</span><br><span class="line"></span><br><span class="line">For inputString &#x3D; &quot;abac&quot;, the output should be checkPalindrome(inputString) &#x3D; false</span><br><span class="line"></span><br><span class="line">For inputString &#x3D; &quot;a&quot;, the output should be checkPalindrome(inputString) &#x3D; true</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer"><a href="#My-Answer" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPalindrome</span><span class="params">(inputString)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> inputString == inputString[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-Python-1"><a href="#Another-Answer-Python-1" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPalindrome</span><span class="params">(inputString)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> inputString == inputString[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-C"><a href="#Another-Answer-C" class="headerlink" title="Another Answer (C++)"></a>Another Answer (C++)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkPalindrome</span><span class="params">(<span class="built_in">string</span> is)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> is == <span class="built_in">string</span>(is.rbegin(),is.rend());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="AdjacentElementsProduct"><a href="#AdjacentElementsProduct" class="headerlink" title="AdjacentElementsProduct"></a>AdjacentElementsProduct</h2><blockquote><p>인접한 요소의 곱이 가장 큰 값 반환</p></blockquote><br><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">For inputArray &#x3D; [3, 6, -2, -5, 7, 3], the output should be</span><br><span class="line">adjacentElementsProduct(inputArray) &#x3D; 21</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-1"><a href="#My-Answer-1" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjacentElementsProduct</span><span class="params">(inputArray)</span>:</span></span><br><span class="line">    temp = <span class="number">-99999999999</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(inputArray)<span class="number">-1</span>):</span><br><span class="line">        result = inputArray[i] * inputArray[i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> temp &lt; result:</span><br><span class="line">            temp = result</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-Python-2"><a href="#Another-Answer-Python-2" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjacentElementsProduct</span><span class="params">(inputArray)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max([inputArray[i] * inputArray[i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(inputArray)<span class="number">-1</span>)])</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-JS-1"><a href="#Another-Answer-JS-1" class="headerlink" title="Another Answer (JS)"></a>Another Answer (JS)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjacentElementsProduct</span>(<span class="params">inputArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prod = inputArray[<span class="number">0</span>] * inputArray[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;inputArray.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">        prod = <span class="built_in">Math</span>.max(prod, inputArray[i] * inputArray[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> prod</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 2</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjacentElementsProduct</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr.slice(<span class="number">1</span>).map(<span class="function">(<span class="params">x,i</span>)=&gt;</span>[x*arr[i]]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-Java"><a href="#Another-Answer-Java" class="headerlink" title="Another Answer (Java)"></a>Another Answer (Java)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adjacentElementsProduct</span><span class="params">(<span class="keyword">int</span>[] inputArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IntStream.range(<span class="number">1</span>, inputArray.length).map(i-&gt;inputArray[i]*inputArray[i-<span class="number">1</span>]).max().getAsInt();&#125;</span><br></pre></td></tr></table></figure><br><h2 id="ShapeArea"><a href="#ShapeArea" class="headerlink" title="ShapeArea"></a>ShapeArea</h2><p><img src="https://user-images.githubusercontent.com/33630505/66472643-a25eee80-eac8-11e9-828c-5f7c78a5c6bb.JPG" alt="polygon"></p><br><h3 id="My-Answer-2"><a href="#My-Answer-2" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shapeArea</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * math.pow(n - <span class="number">1</span>, <span class="number">2</span>) + <span class="number">2</span> * (n - <span class="number">1</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-Python-3"><a href="#Another-Answer-Python-3" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shapeArea</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span> + (n<span class="number">-1</span>)**<span class="number">2</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-JS-2"><a href="#Another-Answer-JS-2" class="headerlink" title="Another Answer (JS)"></a>Another Answer (JS)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shapeArea</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*n + (n<span class="number">-1</span>)*(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-C-1"><a href="#Another-Answer-C-1" class="headerlink" title="Another Answer (C++)"></a>Another Answer (C++)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shapeArea</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="number">2</span> * n * (n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><a id = '2nd'></a># DataBase (MySQL 문법)<h2 id="MonthlyScholarships"><a href="#MonthlyScholarships" class="headerlink" title="MonthlyScholarships"></a>MonthlyScholarships</h2><blockquote><p>1년치 장학금이 기제되어 있는 DB에서 각 id별로 매달 장학금을 계산해서 id와 scholarship을 조회하라</p></blockquote><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p><strong>Table</strong><br><img src="https://user-images.githubusercontent.com/33630505/66551079-b61a5b80-eb81-11e9-9d70-7809ae97b4bf.JPG" alt="scholarship"><br><br><strong>Result</strong><br><img src="https://user-images.githubusercontent.com/33630505/66551431-6a1be680-eb82-11e9-8e17-f4f8c9c3985a.JPG" alt="scholarship2"></p><br><h3 id="My-Answer-3"><a href="#My-Answer-3" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> monthlyScholarships()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, scholarship/<span class="number">12</span> <span class="keyword">as</span> scholarship <span class="keyword">FROM</span> scholarships;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><br><h2 id="ProjectsTeam"><a href="#ProjectsTeam" class="headerlink" title="ProjectsTeam"></a>ProjectsTeam</h2><blockquote><p>중복되는 이름은 제거하고 이름을 오름차순으로 정렬하여 조회하라<br><br></p></blockquote><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h3><p><strong>Table</strong><br><img src="https://user-images.githubusercontent.com/33630505/66551762-0f36bf00-eb83-11e9-893d-3c28854a652c.JPG" alt="projectteam"><br><br></p><p><strong>Result</strong><br><img src="https://user-images.githubusercontent.com/33630505/66551799-21186200-eb83-11e9-80db-e9e6c7685b81.JPG" alt="projectteam2"><br><br></p><h3 id="My-Answer-4"><a href="#My-Answer-4" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> projectsTeam()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> projectLog <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><br><h2 id="AutomaticNotifications"><a href="#AutomaticNotifications" class="headerlink" title="AutomaticNotifications"></a>AutomaticNotifications</h2><blockquote><p>role 칼럼의 admin, premium을 제외한 행의 email을 조회하라</p></blockquote><br><h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h3><p><strong>Table</strong><br><img src="https://user-images.githubusercontent.com/33630505/66553990-165fcc00-eb87-11e9-9317-b25645d68d07.JPG" alt="automaticnotification"><br><br></p><p><strong>Result</strong><br><img src="https://user-images.githubusercontent.com/33630505/66553992-165fcc00-eb87-11e9-90f4-5ccb532d1341.JPG" alt="automaticnotification2"></p><h3 id="MyAnswer"><a href="#MyAnswer" class="headerlink" title="MyAnswer"></a>MyAnswer</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> automaticNotifications()</span><br><span class="line">    <span class="keyword">SELECT</span> email</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">users</span></span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">role</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">"admin"</span>, <span class="string">"premium"</span>)</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> email;</span><br></pre></td></tr></table></figure><hr><a id = '3rd'></a># The Core<hr><a id = '4th'></a># Python<h2 id="Collections-Truthness"><a href="#Collections-Truthness" class="headerlink" title="Collections Truthness"></a>Collections Truthness</h2><blockquote><p>Python에서 True와 False의 의미를 알 수 있는 문제</p></blockquote><br><h3 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xs = [()]</span><br><span class="line">res = [<span class="literal">False</span>] * <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> xs:</span><br><span class="line">    res[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> xs[<span class="number">0</span>]:</span><br><span class="line">    res[<span class="number">1</span>] = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-5"><a href="#My-Answer-5" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xs = [()]</span><br><span class="line">res = [<span class="literal">False</span>] * <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> xs:</span><br><span class="line">    res[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> xs[<span class="number">0</span>]:</span><br><span class="line">    res[<span class="number">1</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>xs 리스트는 첫번째 요소로 tuple을 갖기 때문에 존재론적 관점에서 True, 리스트의 첫번째 요소인 tuple의 첫번째 요소는 아무것도 없기 때문에 존재론적 관점에서 False이다</strong></p><br><h2 id="Efficient-Comparison"><a href="#Efficient-Comparison" class="headerlink" title="Efficient Comparison"></a>Efficient Comparison</h2><blockquote><p>효과적인 비교 방법을 찾는 문제</p></blockquote><br>### Example<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">if</span> L &lt; x**y &lt;=R:</span><br><span class="line"><span class="number">2.</span> <span class="keyword">if</span> x**y &gt; L <span class="keyword">and</span> x**y &lt;=R:</span><br><span class="line"><span class="number">3.</span> <span class="keyword">if</span> x**y <span class="keyword">in</span> range(L+<span class="number">1</span>, R+<span class="number">1</span>):</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-6"><a href="#My-Answer-6" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(x,y,L,R)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L &lt; x**y &lt;=R:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(x,y,L,R)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x**y &gt; L <span class="keyword">and</span> x**y &lt;=R:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(x,y,L,R)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x**y <span class="keyword">in</span> range(L+<span class="number">1</span>, R+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">func1(<span class="number">2</span>,<span class="number">3</span>, <span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">: <span class="number">480</span> ns ± <span class="number">34.7</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">func2(<span class="number">2</span>,<span class="number">3</span>, <span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">: <span class="number">763</span> ns ± <span class="number">23.8</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">func3(<span class="number">2</span>,<span class="number">3</span>, <span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">: <span class="number">806</span> ns ± <span class="number">45.6</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><p><strong>func1이 가장 빠르다</strong></p><br><h2 id="Count-Bits"><a href="#Count-Bits" class="headerlink" title="Count Bits"></a>Count Bits</h2><blockquote><p>숫자 n을 입력하면 bit수를 출력하는 함수</p></blockquote><br>### Example<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">50</span></span><br><span class="line">countBits(n) = <span class="number">6</span></span><br><span class="line">50(10진수) = 110010(2진수) =&gt; 6개 비트로 구성</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-7"><a href="#My-Answer-7" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countBits</span><span class="params">(n)</span>:</span></span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    rest = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">1</span>):</span><br><span class="line">        rest = n/<span class="number">2</span></span><br><span class="line">        n = int(rest)</span><br><span class="line">        cnt +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure><p><strong>함수가 잘 작동하고 정답처리가 되긴 했지만 자꾸 return문만 써서 간결하게 하라고 해서 다음 단계로 넘어가지 못했음..</strong></p><br><h3 id="Another-Answer-Python-4"><a href="#Another-Answer-Python-4" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countBits</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n.bit_length()</span><br></pre></td></tr></table></figure><p><strong>저런 내장 함수가 있는지 몰랐네…</strong></p><br><h2 id="Modulus"><a href="#Modulus" class="headerlink" title="Modulus"></a>Modulus</h2><blockquote><p>숫자 n이 정수형이면 return 1 아니면 return -1</p></blockquote><br>### Example<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">15</span></span><br><span class="line">modulus(n) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">23.12</span></span><br><span class="line">modulus(n) = <span class="number">-1</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-8"><a href="#My-Answer-8" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modulus</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(n, int):</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-Python-5"><a href="#Another-Answer-Python-5" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modulus</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==int(n) :</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><br><h2 id="Base-Conversion"><a href="#Base-Conversion" class="headerlink" title="Base Conversion"></a>Base Conversion</h2><blockquote><p>n진법으로 표기된 String을 16진수로 변환하기</p></blockquote><br><h3 id="Example-7"><a href="#Example-7" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="string">'1302'</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">1302(5) =&gt; 202(10) =&gt; ca</span><br><span class="line"></span><br><span class="line">baseConversion(<span class="string">'1302'</span>,<span class="number">5</span>) = <span class="string">'ca'</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-9"><a href="#My-Answer-9" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseConversion</span><span class="params">(n:str, x:int)</span>-&gt;int:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, n <span class="keyword">in</span> enumerate(n[::<span class="number">-1</span>]):</span><br><span class="line">        result += int(n) * pow(x, i)</span><br><span class="line">    <span class="keyword">return</span> hex(result)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseConversion</span><span class="params">(n, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hex(int(n,x))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure><p><strong>int 함수는 숫자를 넣었을 때 정수형으로 변환하지만, 문자열 형태의 숫자와 변환하고자 하는 진법의 수를 입력하면 원하는 진법을 변환해주기도 한다</strong></p><br><h3 id="Another-Answer-Python-6"><a href="#Another-Answer-Python-6" class="headerlink" title="Another Answer (Python)"></a>Another Answer (Python)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseConversion</span><span class="params">(n, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> format(int(n, x), <span class="string">'x'</span>)</span><br></pre></td></tr></table></figure><br><h2 id="ListBeautifier"><a href="#ListBeautifier" class="headerlink" title="ListBeautifier"></a>ListBeautifier</h2><blockquote><p>어떠한 리스트가 들어와도 리스트의 맨 앞 요소와 맨 뒤 요소가 같거나 빈 리스트를 반환하도록 하는 함수</p></blockquote><br><h3 id="Example-8"><a href="#Example-8" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">38</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">-5</span>]</span><br><span class="line">c = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">listBeautifier(a) = [<span class="number">4</span>, <span class="number">28</span>, <span class="number">4</span>]</span><br><span class="line">listBeatuifier(b) = [<span class="number">4</span>]</span><br><span class="line">listBeatuifier(c) = []</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-10"><a href="#My-Answer-10" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listBeautifier1</span><span class="params">(a)</span>:</span></span><br><span class="line">    res = a[:]</span><br><span class="line">    <span class="keyword">while</span> res <span class="keyword">and</span> res[<span class="number">0</span>] != res[<span class="number">-1</span>]:</span><br><span class="line">    res = res[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listBeautifier2</span><span class="params">(a)</span>:</span></span><br><span class="line">    res = a[:]</span><br><span class="line">    <span class="keyword">while</span> res <span class="keyword">and</span> res[<span class="number">0</span>] != res[<span class="number">-1</span>]:</span><br><span class="line">        a, *res, b = res  </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">listBeautifier1(a)</span><br><span class="line"></span><br><span class="line">: <span class="number">2.32</span> µs ± <span class="number">193</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line">listBeautifier2(a)</span><br><span class="line"></span><br><span class="line">: <span class="number">3.05</span> µs ± <span class="number">237</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br><span class="line"></span><br><span class="line"><span class="comment"># slicing이 아주 살짝 더 빠르다</span></span><br></pre></td></tr></table></figure><p><strong>Slicing과 Unpacking으로 쉽게 풀 수 있다!</strong><br><br></p><h2 id="Fix-Message"><a href="#Fix-Message" class="headerlink" title="Fix Message"></a>Fix Message</h2><blockquote><p>대소문자 고쳐주는 함수 (가장 앞 단어의 첫번째 철자를 대문자로 그리고 나머지는 소문자로)</p></blockquote><br><h3 id="Example-9"><a href="#Example-9" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"you'll NEVER believe what that 'FrIeNd' of mine did!!1"</span></span><br><span class="line"></span><br><span class="line">fixMessage(message) = <span class="string">"You'll never believe what that 'friend' of mine did!!1"</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-11"><a href="#My-Answer-11" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixMessage</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> message.lower().capitalize()</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer"><a href="#Another-Answer" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixMessage</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> message.upper()[<span class="number">0</span>] + message[<span class="number">1</span>:].lower()</span><br></pre></td></tr></table></figure><h2 id="Cat-Walk"><a href="#Cat-Walk" class="headerlink" title="Cat Walk"></a>Cat Walk</h2><blockquote><p>내가 자리를 비운 사이 고양이가 내 키보드 위에 올라가 스페이스바를 마구 눌러서 띄어쓰기 간격이 <br><br>너무 많이 벌어졌다. 늘어난 띄어쓰기 공간을 하나로 줄여라 (이런 말도 안되는..ㅎ)</p></blockquote><br><h3 id="Example-10"><a href="#Example-10" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="string">"def      m   e  gaDifficu     ltFun        ction(x):"</span></span><br><span class="line"></span><br><span class="line">catwalk(line) = <span class="string">"def m e gaDifficu ltFun ction(x):"</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-12"><a href="#My-Answer-12" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>번</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catWalk</span><span class="params">(code)</span>:</span></span><br><span class="line">    a = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> code.rsplit():</span><br><span class="line">        a += i + <span class="string">' '</span></span><br><span class="line">    <span class="keyword">return</span> a.rstrip()  <span class="comment"># rstrip 함수는 원래 값은 변하지 않고 함수 호출시에만 결과값 리턴</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>번</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catWalk</span><span class="params">(code)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y:x+<span class="string">' '</span>+y, [i <span class="keyword">for</span> i <span class="keyword">in</span> code.rsplit()])</span><br></pre></td></tr></table></figure><p><strong>내 머리속에서 이런 코드가 나오다니..ㅎ 근데 제출이 안되네 ㅠ</strong></p><br><h3 id="Another-Answer-1"><a href="#Another-Answer-1" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>번</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catWalk</span><span class="params">(code)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>.join(code.split())</span><br></pre></td></tr></table></figure><p><strong>이런 쉬운 함수가 있었다니..ㅎ</strong></p><br><h3 id="속도-차이"><a href="#속도-차이" class="headerlink" title="속도 차이"></a>속도 차이</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">catWalk(line)</span><br><span class="line"></span><br><span class="line"># 1번</span><br><span class="line">3.13 µs ± 205 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span><br><span class="line"></span><br><span class="line"># 2번</span><br><span class="line">4.51 µs ± 233 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span><br><span class="line"></span><br><span class="line"># 3번</span><br><span class="line">1.2 µs ± 39.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)</span><br><span class="line"></span><br><span class="line"># 결론: 이미 만들어져 있는게 젤 빠르다..</span><br></pre></td></tr></table></figure><br><h2 id="Convert-Tabs"><a href="#Convert-Tabs" class="headerlink" title="Convert Tabs"></a>Convert Tabs</h2><blockquote><p>문자열 안에 Tab(\t)이 들어 있다면 n번의 space로 변환하는 함수</p></blockquote><br><h3 id="Example-11"><a href="#Example-11" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code = <span class="string">"\t\t\t\t\t"</span></span><br><span class="line">convertTabs(code, <span class="number">1</span>) = <span class="string">"    "</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">"def add(x, y)\f\treturn x + y"</span></span><br><span class="line">convertTabs(code, <span class="number">4</span>) = <span class="string">"def add(x, y)\f    return x + y"</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">"    for x in range(20)"</span></span><br><span class="line">convertTabs(code, <span class="number">100</span>) = <span class="string">"    for x in range(20)"</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-13"><a href="#My-Answer-13" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertTabs</span><span class="params">(code, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> code.replace(<span class="string">'\t'</span>, <span class="string">' '</span>*x)</span><br></pre></td></tr></table></figure><br><h2 id="Feedback-Review"><a href="#Feedback-Review" class="headerlink" title="Feedback Review"></a>Feedback Review</h2><blockquote><p>원하는 크기 이하의 문자열 단위로 쪼개주는 함수</p></blockquote><br><h3 id="Example-12"><a href="#Example-12" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">feedback = <span class="string">"This is an example feedback"</span></span><br><span class="line">size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">feedbackReview(feedback, size) = [<span class="string">"This is"</span>,</span><br><span class="line">                                  <span class="string">"an"</span>,</span><br><span class="line">                                  <span class="string">"example"</span>,</span><br><span class="line">                                  <span class="string">"feedback"</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-2"><a href="#Another-Answer-2" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feedbackReview</span><span class="params">(feedback, size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> textwrap.wrap(feedback, size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feedbackReview</span><span class="params">(feedback, size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">'(?:\s|^)(\S(?:.&#123;0,%d&#125;\S)?)(?=\s|$)'</span> % (size<span class="number">-2</span>),feedback)</span><br></pre></td></tr></table></figure><br><h2 id="Is-Word-Palindrome"><a href="#Is-Word-Palindrome" class="headerlink" title="Is Word Palindrome"></a>Is Word Palindrome</h2><blockquote><p>회문인지 확인하는 함수, 앞으로 읽어도 뒤로 읽어도 같은지 확인하는 함수</p></blockquote><br><h3 id="Example-13"><a href="#Example-13" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">"aibohphobia"</span></span><br><span class="line">isWordPalindrome(word) = true;</span><br><span class="line"></span><br><span class="line">word = <span class="string">"hehehehehe"</span></span><br><span class="line">isWordPalindrome(word) = false</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-14"><a href="#My-Answer-14" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isWordPalindrome</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word == word[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><br><h2 id="Permutation-Cipher"><a href="#Permutation-Cipher" class="headerlink" title="Permutation Cipher"></a>Permutation Cipher</h2><blockquote><p>이름은 순열암호화 인데 사실상 시저 암화랑 같음. 평문하고 키를 넘겨주면 시저암호 처럼 암호화 해주는 함수</p></blockquote><br><h3 id="Example-14"><a href="#Example-14" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="string">"iamthebest"</span></span><br><span class="line">key = <span class="string">"zabcdefghijklmnopqrstuvwxy"</span></span><br><span class="line"></span><br><span class="line">permutationCipher(password, key) = <span class="string">"hzlsgdadrs"</span></span><br><span class="line"></span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">||  |  ||   |     ||</span><br><span class="line">vv  v  vv   v     vv</span><br><span class="line">zabcdefghijklmnopqrstuvwxy</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-15"><a href="#My-Answer-15" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutationCipher</span><span class="params">(password, key)</span>:</span></span><br><span class="line">    table = str.maketrans(<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>, key)</span><br><span class="line">    <span class="keyword">return</span> password.translate(table)</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-3"><a href="#Another-Answer-3" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutationCipher</span><span class="params">(password, key)</span>:</span></span><br><span class="line">    table = &#123;ord(<span class="string">'a'</span>) + i : ord(k) <span class="keyword">for</span> i, k <span class="keyword">in</span> enumerate(key)&#125;</span><br><span class="line">    <span class="keyword">return</span> password.translate(table)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutationCipher</span><span class="params">(password, key)</span>:</span></span><br><span class="line">    table = <span class="string">' '</span>*<span class="number">97</span>+key</span><br><span class="line">    <span class="keyword">return</span> str(password).translate(table)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutationCipher</span><span class="params">(password, key)</span>:</span></span><br><span class="line">    table = string.maketrans(string.lowercase, key)</span><br><span class="line">    <span class="keyword">return</span> str(password).translate(table)</span><br></pre></td></tr></table></figure><br><h2 id="Competitive-Eating"><a href="#Competitive-Eating" class="headerlink" title="Competitive Eating"></a>Competitive Eating</h2><blockquote><p>설명 못하겠음… 예시 확인 ㄱㄱ</p></blockquote><br><h3 id="Example-15"><a href="#Example-15" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">3.1415</span>, width = <span class="number">10</span>, precision = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">competitiveEating(t, width, precision) = <span class="string">"   3.14   "</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-4"><a href="#Another-Answer-4" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">competitiveEating</span><span class="params">(t, width, precision)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;:^&#123;&#125;.&#123;&#125;f&#125;'</span>.format(t,width,precision)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">competitiveEating</span><span class="params">(t, width, precision)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&#123;0:.&#123;1&#125;f&#125;"</span>.format(t,precision).center(width)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">competitiveEating</span><span class="params">(t, width, precision)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'&#123;:^&#123;w&#125;.&#123;p&#125;f&#125;'</span>).format(t,w=width,p=precision)</span><br></pre></td></tr></table></figure><br><h2 id="Get-Commit"><a href="#Get-Commit" class="headerlink" title="Get Commit"></a>Get Commit</h2><blockquote><p>유저 이름과 0, ?, +, !가 포함된 암호화 commit 문자중 4가지 symbol을 제거한 문자열을 추출하라</p></blockquote><br><h3 id="Example-16"><a href="#Example-16" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commit = <span class="string">"0??+0+!!someCommIdhsSt"</span></span><br><span class="line"></span><br><span class="line">getCommit(commit) = <span class="string">"someCommIdhsSt"</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-16"><a href="#My-Answer-16" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> commit.replace(<span class="string">'0'</span>,<span class="string">''</span>).replace(<span class="string">'?'</span>,<span class="string">''</span>).replace(<span class="string">'!'</span>,<span class="string">''</span>).replace(<span class="string">'+'</span>,<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p><strong>너무 일차원적인 답변이지만 잘 된다..ㅎ</strong></p><br><h3 id="Another-Answer-5"><a href="#Another-Answer-5" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> commit.lstrip(<span class="string">'0?+!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> commit.strip(<span class="string">'0?+!'</span>)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(filter(<span class="keyword">lambda</span> x: x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">"0?+!"</span>, commit))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">'[0?+!]'</span>, <span class="string">''</span>, commit)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([c <span class="keyword">for</span> c <span class="keyword">in</span> commit <span class="keyword">if</span> c.islower() <span class="keyword">or</span> c.isupper()])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommit</span><span class="params">(commit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.match(<span class="string">r"^[0\?\+!]*(.*)$"</span>, commit).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Lists-Concatenation"><a href="#Lists-Concatenation" class="headerlink" title="Lists Concatenation"></a>Lists Concatenation</h2><blockquote><p>두 리스트를 연결하는 함수.</p></blockquote><br><h3 id="Example-17"><a href="#Example-17" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">lst2 = [<span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">listsConcatenation(lst1, lst2) = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-17"><a href="#My-Answer-17" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listsConcatenation</span><span class="params">(lst1, lst2)</span>:</span></span><br><span class="line">    res = lst1</span><br><span class="line">    res.extend(lst2)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listsConcatenation</span><span class="params">(lst1, lst2)</span>:</span></span><br><span class="line">    res = lst1</span><br><span class="line">    [res.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst2]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-6"><a href="#Another-Answer-6" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listsConcatenation</span><span class="params">(lst1, lst2)</span>:</span></span><br><span class="line">    res = lst1</span><br><span class="line">    res += lst2</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><h2 id="Two-Teams"><a href="#Two-Teams" class="headerlink" title="Two Teams"></a>Two Teams</h2><blockquote><p>리스트에 있는 요소에서 [홀수번째 요소 합 - 짝수번째 요소 합 구하는] 함수</p></blockquote><br><h3 id="Example-18"><a href="#Example-18" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = [<span class="number">1</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">6</span>,<span class="number">14</span>]</span><br><span class="line"></span><br><span class="line">twoTeams(students) = <span class="number">11</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">13</span> + <span class="number">14</span>) - (<span class="number">11</span> + <span class="number">6</span>) = <span class="number">11</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-18"><a href="#My-Answer-18" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoTeams</span><span class="params">(students)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(students[::<span class="number">2</span>]) - sum(students[<span class="number">1</span>::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-7"><a href="#Another-Answer-7" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoTeams</span><span class="params">(students)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum( (<span class="number">-1</span>)**i*I <span class="keyword">for</span> i,I <span class="keyword">in</span> enumerate(students))</span><br></pre></td></tr></table></figure><br><h2 id="Remove-Tasks"><a href="#Remove-Tasks" class="headerlink" title="Remove Tasks"></a>Remove Tasks</h2><blockquote><p>리스트에서 n번째 요소 제거한 리스트 반환하는 함수</p></blockquote><br><h3 id="Example-19"><a href="#Example-19" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">3</span></span><br><span class="line">toDo = [<span class="number">1237</span>, <span class="number">2847</span>, <span class="number">27485</span>, <span class="number">2947</span>, <span class="number">1</span>, <span class="number">247</span>, <span class="number">374827</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">removeTasks(k, toDo) = [<span class="number">1237</span>, <span class="number">2847</span>, <span class="number">2947</span>, <span class="number">1</span>, <span class="number">374827</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-19"><a href="#My-Answer-19" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeTasks</span><span class="params">(k, toDo)</span>:</span></span><br><span class="line">    <span class="keyword">del</span> toDo[k<span class="number">-1</span>::k]</span><br><span class="line">    <span class="keyword">return</span> toDo</span><br></pre></td></tr></table></figure><br><h2 id="Print-List"><a href="#Print-List" class="headerlink" title="Print List"></a>Print List</h2><blockquote><p>설명은 패스 ~ 예시를 참고해주세요~</p></blockquote><br><h3 id="Example-20"><a href="#Example-20" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">printList(lst) = <span class="string">"This is your list: [1, 2, 3, 4, 5]"</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-20"><a href="#My-Answer-20" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This is your list: '</span> + str(lst)</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-8"><a href="#Another-Answer-8" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'This is your list: <span class="subst">&#123;lst&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"This is your list: &#123;&#125;"</span>.format(lst)</span><br></pre></td></tr></table></figure><br><h2 id="Repeat-Char"><a href="#Repeat-Char" class="headerlink" title="Repeat Char"></a>Repeat Char</h2><blockquote><p>문자열과 숫자를 입력받아 입력받은 숫자만큼 반복하는 문자열을 반환하는 람다</p></blockquote><br><h3 id="Example-21"><a href="#Example-21" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch = <span class="string">'*'</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">repeatChar(ch, n) = <span class="string">'**********'</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-21"><a href="#My-Answer-21" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repeatChar = <span class="keyword">lambda</span> ch, n : ch *n</span><br></pre></td></tr></table></figure><br><h2 id="Get-Points"><a href="#Get-Points" class="headerlink" title="Get Points"></a>Get Points</h2><blockquote><p>채점 해주는 함수. n번째 문제가 맞으면 n점 획득, 틀리면 패널티 점수 차감.</p></blockquote><br><h3 id="Example-22"><a href="#Example-22" class="headerlink" title="Example"></a>Example</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">answer = [<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line">p = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">getPoints(answer, p) = 12 =&gt; 1 -3 + 3 -3 + 5 + 6</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-22"><a href="#My-Answer-22" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPoints</span><span class="params">(answers, p)</span>:</span></span><br><span class="line">    questionPoints = <span class="keyword">lambda</span> x,y : x+<span class="number">1</span> <span class="keyword">if</span>(y==<span class="literal">True</span>) <span class="keyword">else</span> -p</span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, ans <span class="keyword">in</span> enumerate(answers):</span><br><span class="line">        res += questionPoints(i, ans)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-9"><a href="#Another-Answer-9" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPoints</span><span class="params">(answers, p)</span>:</span></span><br><span class="line">    questionPoints = <span class="keyword">lambda</span> i,ans: [-p,i+<span class="number">1</span>][ans]</span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, ans <span class="keyword">in</span> enumerate(answers):</span><br><span class="line">        res += questionPoints(i, ans)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><h2 id="Sort-Students"><a href="#Sort-Students" class="headerlink" title="Sort Students"></a>Sort Students</h2><blockquote><p>성씨를 기준으로 오름차순 정렬하는 함수. (단, 성이 같으면 이름으로)</p></blockquote><br><h3 id="Example-23"><a href="#Example-23" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">"John Smith"</span>, <span class="string">"Jacky Mon Simonoff"</span>, <span class="string">"Lucy Smith"</span>, <span class="string">"Angela Zimonova"</span>]</span><br><span class="line"></span><br><span class="line">sortStudents(name) = [<span class="string">'Jacky Mon Simonoff'</span>, <span class="string">'John Smith'</span>, <span class="string">'Lucy Smith'</span>, <span class="string">'Angela Zimonova'</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-10"><a href="#Another-Answer-10" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortStudents</span><span class="params">(students)</span>:</span></span><br><span class="line">    <span class="comment"># 특정한 데이터를 기준으로 정렬할 수 있도록 함수를 지정할 수 있다</span></span><br><span class="line">    students.sort(key=<span class="keyword">lambda</span> name: name.split(<span class="string">" "</span>)[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> students</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortStudents</span><span class="params">(students)</span>:</span></span><br><span class="line">    students.sort(key= <span class="keyword">lambda</span> s : s[len(s)-(s[::<span class="number">-1</span>]).find(<span class="string">" "</span>):] )</span><br><span class="line">    <span class="keyword">return</span> students</span><br></pre></td></tr></table></figure><br><h2 id="Is-Test-Solvable"><a href="#Is-Test-Solvable" class="headerlink" title="Is Test Solvable"></a>Is Test Solvable</h2><blockquote><p>리스트에 있는 숫자들을 다 더하는데, 각 숫자는 각 자리수의 합을 구한 후 더한다. <br><br>그리고 그 총합이 n으로 나누어지는지 확인해주는 함수를 만든다.</p></blockquote><br><h3 id="Example-24"><a href="#Example-24" class="headerlink" title="Example"></a>Example</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ids = [<span class="number">529665</span>, <span class="number">909767</span>, <span class="number">644200</span>]</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>+<span class="number">2</span>+<span class="number">9</span>+<span class="number">6</span>+<span class="number">6</span>+<span class="number">5</span>) + (<span class="number">9</span>+<span class="number">0</span>+<span class="number">9</span>+<span class="number">7</span>+<span class="number">6</span>+<span class="number">7</span>) + (<span class="number">6</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">2</span>+<span class="number">0</span>+<span class="number">0</span>) = <span class="number">87</span></span><br><span class="line"><span class="number">87</span>/<span class="number">3</span> = <span class="number">0</span></span><br><span class="line">=&gt; True</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-23"><a href="#My-Answer-23" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isTestSolvable</span><span class="params">(ids, k)</span>:</span></span><br><span class="line">    digitSum = <span class="keyword">lambda</span> x : sum([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> list(str(x))])</span><br><span class="line"></span><br><span class="line">    sm = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> questionId <span class="keyword">in</span> ids:</span><br><span class="line">        sm += digitSum(questionId)</span><br><span class="line">    <span class="keyword">return</span> sm % k == <span class="number">0</span></span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-11"><a href="#Another-Answer-11" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isTestSolvable</span><span class="params">(ids, k)</span>:</span></span><br><span class="line">    digitSum = <span class="keyword">lambda</span> x: x%<span class="number">10</span>+digitSum(x//<span class="number">10</span>) <span class="keyword">if</span> x <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    sm = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> questionId <span class="keyword">in</span> ids:</span><br><span class="line">        sm += digitSum(questionId)</span><br><span class="line">    <span class="keyword">return</span> sm % k == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isTestSolvable</span><span class="params">(ids, k)</span>:</span></span><br><span class="line">    digitSum = <span class="keyword">lambda</span> r: sum(map(int,str(r)))</span><br><span class="line"></span><br><span class="line">    sm = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> questionId <span class="keyword">in</span> ids:</span><br><span class="line">        sm += digitSum(questionId)</span><br><span class="line">    <span class="keyword">return</span> sm % k == <span class="number">0</span></span><br></pre></td></tr></table></figure><br><h2 id="Create-Spiral-Matrix"><a href="#Create-Spiral-Matrix" class="headerlink" title="Create Spiral Matrix"></a>Create Spiral Matrix</h2><blockquote><p>나선형 행렬을 구하는 함수. (맨 오른쪽 아래부터 시작)</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/71462109-a19b4600-27f5-11ea-917f-361c3d2f7827.png" alt="spiral matrix"></p><br><h3 id="Example-25"><a href="#Example-25" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">createSpiralMatrix(n) = [[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">                         [<span class="number">6</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line">                         [<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-24"><a href="#My-Answer-24" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1번</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSpiralMatrix</span><span class="params">(n)</span>:</span></span><br><span class="line">    dirs = [(<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line">    curDir = <span class="number">0</span></span><br><span class="line">    curPos = (n - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    res = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n * n + <span class="number">1</span>):</span><br><span class="line">        res[curPos[<span class="number">0</span>]][curPos[<span class="number">1</span>]] = i</span><br><span class="line">        nextPos = curPos[<span class="number">0</span>] + dirs[curDir][<span class="number">0</span>], curPos[<span class="number">1</span>] + dirs[curDir][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= nextPos[<span class="number">0</span>] &lt; n <span class="keyword">and</span></span><br><span class="line">                <span class="number">0</span> &lt;= nextPos[<span class="number">1</span>] &lt; n <span class="keyword">and</span></span><br><span class="line">                res[nextPos[<span class="number">0</span>]][nextPos[<span class="number">1</span>]] == <span class="number">0</span>):</span><br><span class="line">            curDir = (curDir + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            nextPos = curPos[<span class="number">0</span>] + dirs[curDir][<span class="number">0</span>], curPos[<span class="number">1</span>] + dirs[curDir][<span class="number">1</span>]</span><br><span class="line">        curPos = nextPos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2번</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSpiralMatrix</span><span class="params">(n)</span>:</span></span><br><span class="line">    dirs = [(<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line">    curDir = <span class="number">0</span></span><br><span class="line">    curPos = (n - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    res = np.zeros([n,n])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n * n + <span class="number">1</span>):</span><br><span class="line">        res[curPos[<span class="number">0</span>]][curPos[<span class="number">1</span>]] = i</span><br><span class="line">        nextPos = curPos[<span class="number">0</span>] + dirs[curDir][<span class="number">0</span>], curPos[<span class="number">1</span>] + dirs[curDir][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= nextPos[<span class="number">0</span>] &lt; n <span class="keyword">and</span></span><br><span class="line">                <span class="number">0</span> &lt;= nextPos[<span class="number">1</span>] &lt; n <span class="keyword">and</span></span><br><span class="line">                res[nextPos[<span class="number">0</span>]][nextPos[<span class="number">1</span>]] == <span class="number">0</span>):</span><br><span class="line">            curDir = (curDir + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            nextPos = curPos[<span class="number">0</span>] + dirs[curDir][<span class="number">0</span>], curPos[<span class="number">1</span>] + dirs[curDir][<span class="number">1</span>]</span><br><span class="line">        curPos = nextPos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>2번도 가능. 그러나 해당 문제에서 numpy 사용 금지.</strong><br><br><strong>1번에서 처음에 [[j for j in range(n)] for i in range(n)]를 했지만 계속 인덱스 오류가 남. (이유는 모르겠음..)</strong></p><br><h3 id="Another-Answer-12"><a href="#Another-Answer-12" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSpiralMatrix</span><span class="params">(n)</span>:</span></span><br><span class="line">    dirs = [(<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line">    curDir = <span class="number">0</span></span><br><span class="line">    curPos = (n - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    res = [[<span class="number">0</span>]*n <span class="keyword">for</span> x <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n * n + <span class="number">1</span>):</span><br><span class="line">        res[curPos[<span class="number">0</span>]][curPos[<span class="number">1</span>]] = i</span><br><span class="line">        nextPos = curPos[<span class="number">0</span>] + dirs[curDir][<span class="number">0</span>], curPos[<span class="number">1</span>] + dirs[curDir][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= nextPos[<span class="number">0</span>] &lt; n <span class="keyword">and</span></span><br><span class="line">                <span class="number">0</span> &lt;= nextPos[<span class="number">1</span>] &lt; n <span class="keyword">and</span></span><br><span class="line">                res[nextPos[<span class="number">0</span>]][nextPos[<span class="number">1</span>]] == <span class="number">0</span>):</span><br><span class="line">            curDir = (curDir + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            nextPos = curPos[<span class="number">0</span>] + dirs[curDir][<span class="number">0</span>], curPos[<span class="number">1</span>] + dirs[curDir][<span class="number">1</span>]</span><br><span class="line">        curPos = nextPos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><h2 id="Construct-Shell"><a href="#Construct-Shell" class="headerlink" title="Construct Shell"></a>Construct Shell</h2><blockquote><p>오른쪽으로 90도 회전한 산 모양 리스트를 반환하는 함수</p></blockquote><br><h3 id="Example-26"><a href="#Example-26" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">constructShell(n) = [[<span class="number">0</span>],</span><br><span class="line">                     [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                     [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                     [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                     [<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-25"><a href="#My-Answer-25" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructShell</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>*n-i)] <span class="keyword">if</span> i &gt; n <span class="keyword">else</span> [<span class="number">0</span>]*i  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span>*n)]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-13"><a href="#Another-Answer-13" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructShell</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="number">0</span>]*min(i,<span class="number">2</span>*n-i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">2</span>*n)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructShell</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="number">0</span>] * (i - <span class="number">2</span> * max(<span class="number">0</span>, i-n) ) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span> * n)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructShell</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="number">0</span>] * (n-abs(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(-n+<span class="number">1</span>, n)]</span><br></pre></td></tr></table></figure><br><h2 id="Word-Power"><a href="#Word-Power" class="headerlink" title="Word Power"></a>Word Power</h2><blockquote><p>단어를 넣으면 알파벳 순서에 맞게 숫자로 치환하여 각각의 철자의 합을 구하는 함수.</p></blockquote><br><h3 id="Example-27"><a href="#Example-27" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">h =&gt; 8 e =&gt; 5 l =&gt; 12 o =&gt; 15</span><br><span class="line">wordPower(word) = <span class="number">8</span> + <span class="number">5</span> + <span class="number">12</span> + <span class="number">12</span> + <span class="number">15</span> = <span class="number">52</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-26"><a href="#My-Answer-26" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordPower</span><span class="params">(word)</span>:</span></span><br><span class="line">    num = &#123;b: a+<span class="number">1</span> <span class="keyword">for</span> a, b <span class="keyword">in</span> enumerate(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>)&#125;</span><br><span class="line">    <span class="keyword">return</span> sum([num[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> word])</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-14"><a href="#Another-Answer-14" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordPower</span><span class="params">(word)</span>:</span></span><br><span class="line">    num = &#123;c: ord(c) - <span class="number">96</span> <span class="keyword">for</span> c <span class="keyword">in</span> word&#125;</span><br><span class="line">    <span class="keyword">return</span> sum([num[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> word])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordPower</span><span class="params">(word)</span>:</span></span><br><span class="line">    num = dict(zip(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>, range(<span class="number">1</span>, <span class="number">27</span>)))</span><br><span class="line">    <span class="keyword">return</span> sum([num[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> word])</span><br></pre></td></tr></table></figure><br><h2 id="Cool-Pairs"><a href="#Cool-Pairs" class="headerlink" title="Cool Pairs"></a>Cool Pairs</h2><blockquote><p>두 리스트의 요소간 결합으로 만들어지는 숫자 쌍이 (x,y)라 했을 때 (x*y)%(x+y)==0 인 쌍의 갯수를 반환하는 함수 <br><br>단, 숫자 쌍의 합이 같은 경우가 2개 이상일 때는 하나로 취급한다.</p></blockquote><br><h3 id="Example-28"><a href="#Example-28" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">b = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># (4,12), (6,12), (8,8)의 경우가 발생</span></span><br><span class="line"><span class="comment"># 그러나 합으로 봤을 때는 16, 18인 경우 두 가지!</span></span><br><span class="line"></span><br><span class="line">coolPairs(a,b) = <span class="number">2</span></span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-27"><a href="#My-Answer-27" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coolPairs</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    uniqueSums = &#123;(x+y) <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">for</span> y <span class="keyword">in</span> b <span class="keyword">if</span> (x*y)%(x+y)==<span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> len(uniqueSums)</span><br></pre></td></tr></table></figure><br><h2 id="Multiplication-Table"><a href="#Multiplication-Table" class="headerlink" title="Multiplication Table"></a>Multiplication Table</h2><blockquote><p>숫자 n을 입력하면 NxN 행렬을 반환한다. (단, 1행은 1단 2행은 2단 …n행은 n단의 숫자로 구성)</p></blockquote><br><h3 id="Example-29"><a href="#Example-29" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">multiplicationTable(<span class="number">5</span>) = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line"> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line"> [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-28"><a href="#My-Answer-28" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiplicationTable</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[a <span class="keyword">for</span> a <span class="keyword">in</span> range(b,b*n+<span class="number">1</span>,b)] <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-15"><a href="#Another-Answer-15" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiplicationTable</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [range(i, n*i + <span class="number">1</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">1</span>+n) ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiplicationTable</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)] <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><br><h2 id="Chess-Teams"><a href="#Chess-Teams" class="headerlink" title="Chess Teams"></a>Chess Teams</h2><blockquote><p>두 개의 리스트를 입력값으로 받으면 각각의 리스트에서 요소 하나씩 뽑아 리스트로 짝지어 리턴해주는 함수</p></blockquote><br><h3 id="Example-30"><a href="#Example-30" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">smarties = [<span class="string">"Jane"</span>, <span class="string">"Bob"</span>, <span class="string">"Peter"</span>]</span><br><span class="line">cleveries = [<span class="string">"Oscar"</span>, <span class="string">"Lidia"</span>, <span class="string">"Ann"</span>]</span><br><span class="line"></span><br><span class="line">chessTeams(smarties, cleveries) = [[<span class="string">'Jane'</span>, <span class="string">'Oscar'</span>], [<span class="string">'Bob'</span>, <span class="string">'Lidia'</span>], [<span class="string">'Peter'</span>, <span class="string">'Ann'</span>]]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-29"><a href="#My-Answer-29" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chessTeams</span><span class="params">(smarties, cleveries)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x, y : [x,y], smarties, cleveries))</span><br></pre></td></tr></table></figure><br><h3 id="Another-Answer-16"><a href="#Another-Answer-16" class="headerlink" title="Another Answer"></a>Another Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chessTeams</span><span class="params">(smarties, cleveries)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(zip(smarties,cleveries))</span><br></pre></td></tr></table></figure><br><h2 id="College-Courses"><a href="#College-Courses" class="headerlink" title="College Courses"></a>College Courses</h2><blockquote><p>수강한 과목중에 빼야 하는 과목 이름의 길이만 알때 그 과목을 빼는 함수</p></blockquote><br><h3 id="Example-31"><a href="#Example-31" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">7</span></span><br><span class="line">courses = [<span class="string">"Art"</span>, <span class="string">"Finance"</span>, <span class="string">"Business"</span>, <span class="string">"Speech"</span>, <span class="string">"History"</span>, <span class="string">"Writing"</span>, <span class="string">"Statistics"</span>]</span><br><span class="line"></span><br><span class="line">collegeCourses(x, courses) = [<span class="string">"Art"</span>, <span class="string">"Business"</span>, <span class="string">"Speech"</span>, <span class="string">"Statistics"</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-30"><a href="#My-Answer-30" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collegeCourses</span><span class="params">(x, courses)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shouldConsider</span><span class="params">(course)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(course) != x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list(filter(shouldConsider, courses))</span><br></pre></td></tr></table></figure><br><h2 id="Create-Histograme"><a href="#Create-Histograme" class="headerlink" title="Create Histograme"></a>Create Histograme</h2><blockquote><p>요일마다 과제 수행정도를 보여주는 히스토그램을 만드는 함수.. (사실 그냥 별찍기)</p></blockquote><br><h3 id="Example-32"><a href="#Example-32" class="headerlink" title="Example"></a>Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ch = <span class="string">'*'</span></span><br><span class="line">assignments = [<span class="number">12</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line">createHistogram(ch, assignments) = [<span class="string">"************"</span>,</span><br><span class="line">                                    <span class="string">"************"</span>,</span><br><span class="line">                                    <span class="string">"**************"</span>,</span><br><span class="line">                                    <span class="string">"***"</span>,</span><br><span class="line">                                    <span class="string">"************"</span>,</span><br><span class="line">                                    <span class="string">"***************"</span>,</span><br><span class="line">                                    <span class="string">"**************"</span>]</span><br></pre></td></tr></table></figure><br><h3 id="My-Answer-31"><a href="#My-Answer-31" class="headerlink" title="My Answer"></a>My Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createHistogram</span><span class="params">(ch, assignments)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x: ch*x, assignments))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createHistogram</span><span class="params">(ch, assignments)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [ch * x <span class="keyword">for</span> x <span class="keyword">in</span> assignments]</span><br></pre></td></tr></table></figure><br><h2 id="Least-Common-Denominator"><a href="#Least-Common-Denominator" class="headerlink" title="Least Common Denominator"></a>Least Common Denominator</h2><blockquote><p>최소공통분모 구하는 함수</p></blockquote><br><h3 id="Example-33"><a href="#Example-33" class="headerlink" title="Example"></a>Example</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">denominators = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">leastCommonDenominator(denominators) = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 풀이</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> x <span class="number">3</span>      <span class="number">4</span>        <span class="number">5</span>        <span class="number">6</span></span><br><span class="line">----- x  ----- x  ----- x  -----</span><br><span class="line">  1        2        1        6      =&gt; (2와 3의 최대공약수, 2x3과 4의 최대 공약수.....)</span><br></pre></td></tr></table></figure><br><p><a id = '5th'></a></p><h1 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h1>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> CodeSignal </tag>
            
            <tag> 코딩연습 </tag>
            
            <tag> python </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow를 활용한 신경망 구현하기</title>
      <link href="/2019/10/06/tensorflow/"/>
      <url>/2019/10/06/tensorflow/</url>
      
        <content type="html"><![CDATA[<h1 id="신경망-구조"><a href="#신경망-구조" class="headerlink" title="신경망 구조"></a>신경망 구조</h1><p><img src="https://user-images.githubusercontent.com/33630505/66269396-d8ab2c80-e882-11e9-9e00-f3b97507db68.png" alt="graph"></p><br>**Multi Layer Neural Networks**![multi layer](https://user-images.githubusercontent.com/33630505/66271736-b7573a00-e89c-11e9-9563-726d98aee646.JPG)<br><h1 id="Back-Propagation에-필요한-수식"><a href="#Back-Propagation에-필요한-수식" class="headerlink" title="Back Propagation에 필요한 수식"></a>Back Propagation에 필요한 수식</h1><p><img src="https://user-images.githubusercontent.com/33630505/68084264-c5d24a80-fe76-11e9-90c4-c4261a664d51.png" alt="solv"></p><br><h1 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h1><p><span style="font-size: 30px; color: orange;">텐서의 흐름</span> <span style="font-size: 30px; color: rgb(255, 21, 116);">&nbsp; =&gt; &nbsp;</span><span style="font-size: 30px; color: orange;">벡터 데이터의 흐름</span><br><br><strong>Tensorflow는 벡터 데이터가 흘러 그 데이터를 처리하고 인간의 뇌처럼 작동하는 AI기술인 Deep Learning의 Framework이다.</strong></p><br><h1 id="Tensorflow-작동-방식"><a href="#Tensorflow-작동-방식" class="headerlink" title="Tensorflow 작동 방식"></a>Tensorflow 작동 방식</h1><blockquote><p>텐서플로우는 기본적으로 그래프 기반으로 작동되는 프레임워크 이다. <br></p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/66271659-99d5a080-e89b-11e9-80cd-50e0be75b3c0.gif" alt="tensors_flowing"></p><p>출처: <a href="https://www.tensorflow.org/?hl=ko" target="_blank" rel="noopener">tensorflow</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 그래프 생성</span><br><span class="line">2. 그래프 실행</span><br><span class="line"></span><br><span class="line">그래프 생성 단계에서는 연산 과정을 그래프 형태로 표현한다.</span><br><span class="line">밑에 그림에서 볼 수 있듯이</span><br><span class="line">Computational Graph는 Node와 Edge로 이루어진 자료 구조이다.</span><br><span class="line"></span><br><span class="line">Node에는 Operator, Variable, Constant등을 정의하고, node간의 연결인</span><br><span class="line">edge를 통해 tensor data를 주고받으면서 계산을 할 수 있도록 프로그래밍 한다.</span><br><span class="line"></span><br><span class="line">그래프 생성이 끝나면 Session 객체를 통해 생성한 그래프를 실행 할 수 있다.</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/66271812-727fd300-e89d-11e9-99f1-107c1d7679dc.png" alt="Structure"></p><p>출처: <a href="https://leonardoaraujosantos.gitbooks.io/artificial-inteligence/content/tensorflow.html" target="_blank" rel="noopener">gitbooks</a></p><br><h1 id="Tensorflow로-구현하기"><a href="#Tensorflow로-구현하기" class="headerlink" title="Tensorflow로 구현하기"></a>Tensorflow로 구현하기</h1><h2 id="Tensorflow-import"><a href="#Tensorflow-import" class="headerlink" title="Tensorflow import"></a>Tensorflow import</h2><blockquote><p>Tensorflow를 import하면 그 시점에 비어 있는 기본 graph가 만들어지며, <br><br>앞으로 작성될 node들은 이 기본 graph에 자동으로 연결된다<br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure><h2 id="Data-set"><a href="#Data-set" class="headerlink" title="Data set"></a>Data set</h2><blockquote><p>x는 입력 데이터, y는 결과 데이터 <br><br>총 데이터 갯수 4개 <br><br>input 값 1개, output 값 1개 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">y_data = [<span class="number">5</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">14</span>]</span><br></pre></td></tr></table></figure><br><h2 id="Tensor-for-Data-set"><a href="#Tensor-for-Data-set" class="headerlink" title="Tensor for Data set"></a>Tensor for Data set</h2><blockquote><p>placeholder는 데이터를 입력받는 비어있는 변수<br><br>그래프를 구성하고 그래프가 실행되는 시점에 입력 데이터를 넣어주는데 활용된다<br><br>그리고 placeholder는 shape인수를 유동적으로 지정할 수 있다 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">type(x) <span class="comment"># y도 동일</span></span><br><span class="line">: tensorflow.python.framework.ops.Tensor</span><br></pre></td></tr></table></figure><br><h2 id="Weight-amp-Bias"><a href="#Weight-amp-Bias" class="headerlink" title="Weight &amp; Bias"></a>Weight &amp; Bias</h2><blockquote><p>학습 과정에서 모델의 매개변수로 가중치, 편향치가 입력되는데 <br><br>이 가중치, 편향치가 최적화되기 위해 Variable이라는 객체를 사용한다 <br><br>가중치가 최적화되는 반복 과정에서 현재의 변수가 다음 반복 과정에 영향을 줄 수 <br><br>있어야 하기 때문에 Variable 객체를 사용한다 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W = tf.Variable([<span class="number">1</span>], dtype=tf.float32) <span class="comment"># 가중치, 편향치 모두 경험적으로 1로 세팅했다</span></span><br><span class="line">b = tf.Variable([<span class="number">1</span>], dtype=tf.float32)</span><br></pre></td></tr></table></figure><p><strong>Variable은 학습을 통해 변화하는 배열 값을 저장하기 위한 operation.</strong></p><p>출처: <a href="https://webofthink.tistory.com/68" target="_blank" rel="noopener">https://webofthink.tistory.com/68</a> [Web of Think]**</p><br><h2 id="Placeholder-vs-Variable"><a href="#Placeholder-vs-Variable" class="headerlink" title="Placeholder vs Variable"></a>Placeholder vs Variable</h2><blockquote><p>둘다 변수이긴 변수 인데 variable은 연산이 수행되면서 값이 변하고 <br><br>다음 연산에 그 값을 유지하고 있어야 하기 때문에 정말 ‘변하는 수’ 같은 느낌이고<br><br>placeholder는 데이터를 담을 공간을 의미하는 변수인거 같다 (확실하지 않음..) <br></p></blockquote><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set(dir(W)) &amp; set(dir(x)) <span class="comment"># 공통점으로 dtype, shape, name 등이 있는걸로 봐서 tensor 객체인것은 공통점</span></span><br><span class="line"></span><br><span class="line">: &#123;<span class="string">'device'</span>,</span><br><span class="line">   <span class="string">'dtype'</span>,</span><br><span class="line">   <span class="string">'eval'</span>,</span><br><span class="line">   <span class="string">'get_shape'</span>,</span><br><span class="line">   <span class="string">'graph'</span>,</span><br><span class="line">   <span class="string">'name'</span>,</span><br><span class="line">   <span class="string">'op'</span>,</span><br><span class="line">   <span class="string">'set_shape'</span>,</span><br><span class="line">   <span class="string">'shape'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># special method는 제외했음</span></span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">set(dir(W)) - set(dir(x)) <span class="comment"># Variable에만 있는 함수와 변수들</span></span><br><span class="line"></span><br><span class="line">: &#123;<span class="string">'SaveSliceInfo'</span>,</span><br><span class="line">   <span class="string">'assign'</span>,</span><br><span class="line">   <span class="string">'assign_add'</span>,</span><br><span class="line">   <span class="string">'assign_sub'</span>,</span><br><span class="line">   <span class="string">'batch_scatter_update'</span>,</span><br><span class="line">   <span class="string">'constraint'</span>,</span><br><span class="line">   <span class="string">'count_up_to'</span>,</span><br><span class="line">   <span class="string">'from_proto'</span>,</span><br><span class="line">   <span class="string">'initial_value'</span>,</span><br><span class="line">   <span class="string">'initialized_value'</span>,</span><br><span class="line">   <span class="string">'initializer'</span>,</span><br><span class="line">   <span class="string">'load'</span>,</span><br><span class="line">   <span class="string">'read_value'</span>,</span><br><span class="line">   <span class="string">'scatter_add'</span>,</span><br><span class="line">   <span class="string">'scatter_nd_add'</span>,</span><br><span class="line">   <span class="string">'scatter_nd_sub'</span>,</span><br><span class="line">   <span class="string">'scatter_nd_update'</span>,</span><br><span class="line">   <span class="string">'scatter_sub'</span>,</span><br><span class="line">   <span class="string">'scatter_update'</span>,</span><br><span class="line">   <span class="string">'to_proto'</span>,</span><br><span class="line">   <span class="string">'trainable'</span>,</span><br><span class="line">   <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set(dir(x)) - set(dir(W)) <span class="comment"># placeholder에만 있는 함수와 변수들</span></span><br><span class="line"></span><br><span class="line">: &#123;<span class="string">'OVERLOADABLE_OPERATORS'</span>,</span><br><span class="line">   <span class="string">'consumers'</span>,</span><br><span class="line">   <span class="string">'value_index'</span>&#125;</span><br></pre></td></tr></table></figure><br><h2 id="hypothesis"><a href="#hypothesis" class="headerlink" title="hypothesis"></a>hypothesis</h2><blockquote><p>가설값(추측값) = 가중치 X 입력값 + 편향치 <br><br>가중치를 찾기 위한 함수 혹은 모델 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hypothesis = W * x + b</span><br></pre></td></tr></table></figure><br><h2 id="cost-function"><a href="#cost-function" class="headerlink" title="cost function"></a>cost function</h2><blockquote><p>(추측값 - 정답)의 제곱의 평균, 즉 내가 추측한 값과 정답 사이의 상관관계를 보기위한 함수<br><br>이 비용 함수의 목표는 추측값과 정답의 오차를 줄이는 데에 있다<br><br>앞으로 이 비용 함수의 편미분 값은 가중치 조정 알고리즘에 사용된다<br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost = tf.reduce_mean(tf.square(hypothesis-y))</span><br></pre></td></tr></table></figure><br><h2 id="optimizer"><a href="#optimizer" class="headerlink" title="optimizer"></a>optimizer</h2><blockquote><p>경사하강법을 사용하기 위한 알고리즘 <br><br>이 경사하강법은 비용 함수에서 오차를 최소로 만들기 위해 사용하는 편미분 알고리즘 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate = <span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># 학습률은 보통 0.1 또는 0.01을 사용한다</span></span><br><span class="line"><span class="comment"># 학습률에 관한 자세한 내용은 추후에 더 공부해보자</span></span><br></pre></td></tr></table></figure><br><h2 id="가중치-조절-알고리즘"><a href="#가중치-조절-알고리즘" class="headerlink" title="가중치 조절 알고리즘"></a>가중치 조절 알고리즘</h2><blockquote><p>cost function이 인자로 전달되고 optimizer의 minimize함수를 통해 구현된다<br><br>이 알고리즘의 목표는 오차가 최소가 되는 지점의 weight와 bias를 구하는 것이다<br><br>조정된 가중치 = 가중치 - 학습률 * cost fucntion의 편미분값<br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_op = optimizer.minimize(cost)</span><br></pre></td></tr></table></figure><br><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>그래프를 구성한 후 실제 수행을 할때 다양한 실행환경(CPU, GPU, 분산처리)하에서 처리하기 위해<br><br>Client에서 session을 만들어 전달하는 역할을 한다 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer()) <span class="comment"># tensor를 선언하고 초기화 하지 않았기 때문에</span></span><br><span class="line">                                            <span class="comment"># 초기화를 한 후 실행해야 한다</span></span><br></pre></td></tr></table></figure><br><h2 id="Epoch-100으로-학습시키기"><a href="#Epoch-100으로-학습시키기" class="headerlink" title="Epoch 100으로 학습시키기"></a>Epoch 100으로 학습시키기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    _, cost_val = sess.run([train_op, cost], feed_dict=&#123;x: x_data, y: y_data&#125;)</span><br><span class="line">    print(<span class="string">"Epoch: "</span>,step, <span class="string">"loss: "</span>,cost_val,<span class="string">" weight: "</span>, sess.run(W),<span class="string">" bias: "</span>, sess.run(b))</span><br><span class="line"></span><br><span class="line">:  Epoch:  <span class="number">0</span> loss:  <span class="number">41.0</span>  weight:  [<span class="number">4.5</span>]  bias:  [<span class="number">2.2</span>]</span><br><span class="line">   Epoch:  <span class="number">1</span> loss:  <span class="number">18.415</span>  weight:  [<span class="number">2.1499999</span>]  bias:  [<span class="number">1.4100001</span>]</span><br><span class="line">   Epoch:  <span class="number">2</span> loss:  <span class="number">8.274352</span>  weight:  [<span class="number">3.72</span>]  bias:  [<span class="number">1.9530001</span>]</span><br><span class="line">   Epoch:  <span class="number">3</span> loss:  <span class="number">3.721009</span>  weight:  [<span class="number">2.6634998</span>]  bias:  [<span class="number">1.6024001</span>]</span><br><span class="line">   Epoch:  <span class="number">4</span> loss:  <span class="number">1.6762912</span>  weight:  [<span class="number">3.3670502</span>]  bias:  [<span class="number">1.8501701</span>]</span><br><span class="line">   Epoch:  <span class="number">5</span> loss:  <span class="number">0.7579173</span>  weight:  [<span class="number">2.8913898</span>]  bias:  [<span class="number">1.696611</span>]</span><br><span class="line">   Epoch:  <span class="number">6</span> loss:  <span class="number">0.34527153</span>  weight:  [<span class="number">3.2059994</span>]  bias:  [<span class="number">1.8115939</span>]</span><br><span class="line">   Epoch:  <span class="number">7</span> loss:  <span class="number">0.15970731</span>  weight:  [<span class="number">2.9912033</span>]  bias:  [<span class="number">1.7462754</span>]</span><br><span class="line">   Epoch:  <span class="number">8</span> loss:  <span class="number">0.076116346</span>  weight:  [<span class="number">3.1312609</span>]  bias:  [<span class="number">1.8014188</span>]</span><br><span class="line">   Epoch:  <span class="number">9</span> loss:  <span class="number">0.038325354</span>  weight:  [<span class="number">3.0336602</span>]  bias:  [<span class="number">1.7755046</span>]</span><br><span class="line">   Epoch:  <span class="number">10</span> loss:  <span class="number">0.021112926</span>  weight:  [<span class="number">3.0954175</span>]  bias:  [<span class="number">1.8035736</span>]</span><br><span class="line">   ....</span><br><span class="line">   ....</span><br><span class="line">   ....</span><br><span class="line">   ....</span><br><span class="line">   Epoch:  <span class="number">97</span> loss:  <span class="number">3.7696707e-05</span>  weight:  [<span class="number">3.004957</span>]  bias:  [<span class="number">1.985426</span>]</span><br><span class="line">   Epoch:  <span class="number">98</span> loss:  <span class="number">3.5472734e-05</span>  weight:  [<span class="number">3.0048087</span>]  bias:  [<span class="number">1.9858623</span>]</span><br><span class="line">   Epoch:  <span class="number">99</span> loss:  <span class="number">3.3379514e-05</span>  weight:  [<span class="number">3.0046647</span>]  bias:  [<span class="number">1.9862854</span>]</span><br></pre></td></tr></table></figure><p><span style="font-size: 23px; color: rgb(255, 21, 116)"> loss가 0에 가깝긴 하지만 가중치, 편향치가 3.0046647, 1.9862854인걸로 보아 학습이 살짝 모자라다</span><br><br></p><h2 id="학습된-모델로-결과-예측하기-Epoch-100"><a href="#학습된-모델로-결과-예측하기-Epoch-100" class="headerlink" title="학습된 모델로 결과 예측하기 (Epoch 100)"></a>학습된 모델로 결과 예측하기 (Epoch 100)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sess.run(hypothesis, feed_dict=&#123;x:<span class="number">5</span>&#125;)  <span class="comment"># 3*5 + 2 = 17</span></span><br><span class="line">sess.run(hypothesis, feed_dict=&#123;x:<span class="number">6</span>&#125;)  <span class="comment"># 3*6 + 2 = 20</span></span><br><span class="line"></span><br><span class="line">: array([<span class="number">17.00961</span>], dtype=float32)</span><br><span class="line">  array([<span class="number">20.014275</span>], dtype=float32)</span><br></pre></td></tr></table></figure><br><h2 id="Epoch-1000으로-학습시키기"><a href="#Epoch-1000으로-학습시키기" class="headerlink" title="Epoch 1000으로 학습시키기"></a>Epoch 1000으로 학습시키기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sess2 = tf.Session()</span><br><span class="line">sess2.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">:  Epoch:  <span class="number">0</span> loss:  <span class="number">41.0</span>  weight:  [<span class="number">4.5</span>]  bias:  [<span class="number">2.2</span>]</span><br><span class="line">   Epoch:  <span class="number">1</span> loss:  <span class="number">18.415</span>  weight:  [<span class="number">2.1499999</span>]  bias:  [<span class="number">1.4100001</span>]</span><br><span class="line">   Epoch:  <span class="number">2</span> loss:  <span class="number">8.274352</span>  weight:  [<span class="number">3.72</span>]  bias:  [<span class="number">1.9530001</span>]</span><br><span class="line">   Epoch:  <span class="number">3</span> loss:  <span class="number">3.721009</span>  weight:  [<span class="number">2.6634998</span>]  bias:  [<span class="number">1.6024001</span>]</span><br><span class="line">   Epoch:  <span class="number">4</span> loss:  <span class="number">1.6762912</span>  weight:  [<span class="number">3.3670502</span>]  bias:  [<span class="number">1.8501701</span>]</span><br><span class="line">   Epoch:  <span class="number">5</span> loss:  <span class="number">0.7579173</span>  weight:  [<span class="number">2.8913898</span>]  bias:  [<span class="number">1.696611</span>]</span><br><span class="line">   Epoch:  <span class="number">6</span> loss:  <span class="number">0.34527153</span>  weight:  [<span class="number">3.2059994</span>]  bias:  [<span class="number">1.8115939</span>]</span><br><span class="line">   Epoch:  <span class="number">7</span> loss:  <span class="number">0.15970731</span>  weight:  [<span class="number">2.9912033</span>]  bias:  [<span class="number">1.7462754</span>]</span><br><span class="line">   Epoch:  <span class="number">8</span> loss:  <span class="number">0.076116346</span>  weight:  [<span class="number">3.1312609</span>]  bias:  [<span class="number">1.8014188</span>]</span><br><span class="line">   Epoch:  <span class="number">9</span> loss:  <span class="number">0.038325354</span>  weight:  [<span class="number">3.0336602</span>]  bias:  [<span class="number">1.7755046</span>]</span><br><span class="line">   Epoch:  <span class="number">10</span> loss:  <span class="number">0.021112926</span>  weight:  [<span class="number">3.0954175</span>]  bias:  [<span class="number">1.8035736</span>]</span><br><span class="line">   ....</span><br><span class="line">   ....</span><br><span class="line">   ....</span><br><span class="line">   Epoch:  <span class="number">995</span> loss:  <span class="number">7.9580786e-13</span>  weight:  [<span class="number">3.000001</span>]  bias:  [<span class="number">1.9999975</span>]</span><br><span class="line">   Epoch:  <span class="number">996</span> loss:  <span class="number">7.9580786e-13</span>  weight:  [<span class="number">3.000001</span>]  bias:  [<span class="number">1.9999975</span>]</span><br><span class="line">   Epoch:  <span class="number">997</span> loss:  <span class="number">7.9580786e-13</span>  weight:  [<span class="number">3.000001</span>]  bias:  [<span class="number">1.9999975</span>]</span><br><span class="line">   Epoch:  <span class="number">998</span> loss:  <span class="number">7.9580786e-13</span>  weight:  [<span class="number">3.000001</span>]  bias:  [<span class="number">1.9999975</span>]</span><br><span class="line">   Epoch:  <span class="number">999</span> loss:  <span class="number">7.9580786e-13</span>  weight:  [<span class="number">3.000001</span>]  bias:  [<span class="number">1.9999975</span>]</span><br></pre></td></tr></table></figure><br><h2 id="학습된-모델로-결과-예측하기-Epoch-1000"><a href="#학습된-모델로-결과-예측하기-Epoch-1000" class="headerlink" title="학습된 모델로 결과 예측하기 (Epoch 1000)"></a>학습된 모델로 결과 예측하기 (Epoch 1000)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sess2.run(hypothesis, feed_dict=&#123;x:<span class="number">5</span>&#125;)  <span class="comment"># 3*5 + 2 = 17</span></span><br><span class="line">sess2.run(hypothesis, feed_dict=&#123;x:<span class="number">6</span>&#125;)  <span class="comment"># 3*6 + 2 = 20</span></span><br><span class="line"></span><br><span class="line">: array([<span class="number">17.000002</span>], dtype=float32)</span><br><span class="line">  array([<span class="number">20.000004</span>], dtype=float32)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
            <tag> tensorflow </tag>
            
            <tag> neural network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iris Data로 전처리부터 기계학습, 딥러닝까지</title>
      <link href="/2019/09/11/iris/"/>
      <url>/2019/09/11/iris/</url>
      
        <content type="html"><![CDATA[<h1 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">0. Data 수집</span><br><span class="line">   - File Download</span><br><span class="line">   - API</span><br><span class="line">   - Crawling &amp; Scraping</span><br><span class="line">1. 도메인 지식 확보</span><br><span class="line">   - Docs를 읽어본다 (주어 졌을때만)</span><br><span class="line">   - 이미 내가 알고 있는 전문 분야를 활용한다</span><br><span class="line">   - 구글링</span><br><span class="line">   - 책</span><br><span class="line">2. Data 불러오기</span><br><span class="line">   - Pandas Dataframe으로 불러오기</span><br><span class="line">   - (비정형 데이터인 경우는 찾아봐야함..)</span><br><span class="line">3. Data 파악하기</span><br><span class="line">   - head로 대략적인 데이터 살피기</span><br><span class="line">   - Tidy Data인지 확인하기</span><br><span class="line">   - info로 데이터 정보 확인하기</span><br><span class="line">   - missing data 확인하기</span><br><span class="line">   - dtype 확인하기</span><br><span class="line">4. Data 조작하기   </span><br><span class="line">   - Wide Format인 경우 melt 하기</span><br><span class="line">   - missing data 처리하기</span><br><span class="line">   - dtype 확인하고 encoding 하기</span><br><span class="line">   - train - test set 분리하기</span><br><span class="line">   - 부적절한 data 값 수정하기</span><br><span class="line">5. Data 분석하기 (EDA)</span><br><span class="line">   - describe로 대략적인 값의 특성 확인하기</span><br><span class="line">   - 그래프 그려 보기</span><br><span class="line">   - 왜도, 첨도 확인하기</span><br><span class="line">   - 데이터의 숨겨진 의미 파악하기</span><br><span class="line">   - 데이터 양이 충분한지 파악하기 (중심 극한 정리)  </span><br><span class="line">   - Feature 갯수가 데이터의 양에 비해 많은지 확인하기 (오캄의 면도날)</span><br><span class="line">6. Data 전처리하기</span><br><span class="line">   - Feature Selection</span><br><span class="line">   - Feature Scaling</span><br><span class="line">   - Dimensionality Reduction</span><br><span class="line">7. 모델링 하기</span><br><span class="line">   - 기계학습 or 딥러닝</span><br><span class="line">   - 지도학습 or 비지도학습 or 강화학습</span><br><span class="line">   - 자연어 or 이미지 or 음성 처리</span><br><span class="line">   - 모델링 순서</span><br><span class="line">   - 알고리즘 비교하기</span><br><span class="line">   - 하이퍼 파라미터 찾기 (GridSearchCV)</span><br><span class="line">8. 성능 테스트</span><br></pre></td></tr></table></figure><hr><br><h2 id="도메인-지식-확보하기"><a href="#도메인-지식-확보하기" class="headerlink" title="도메인 지식 확보하기"></a>도메인 지식 확보하기</h2><blockquote><ol><li>Data를 내려받아 쓰는 경우 Docs가 있다면 잘 읽어보고 데이터를 이해한다 <br></li><li>Docs가 없고 도메인 지식이 없을 경우 구글링을 하거나 책을 통해 공부한다 <br></li><li>웬만하면 내가 관심있는 분야를 선정한다 <br></li></ol></blockquote><br><h2 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h2><blockquote><p>Pandas DataFrame에 맞게 불러온다</p></blockquote><br><h3 id="seaborn에서-불러올-때"><a href="#seaborn에서-불러올-때" class="headerlink" title="seaborn에서 불러올 때"></a>seaborn에서 불러올 때</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="file에서-불러올-때"><a href="#file에서-불러올-때" class="headerlink" title="file에서 불러올 때"></a>file에서 불러올 때</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">iris = pd.read_csv(<span class="string">'iris.csv'</span>, engine=<span class="string">'python'</span>)  <span class="comment"># 필요에 따라 옵션이 달라질 수 있다.</span></span><br></pre></td></tr></table></figure><br><h3 id="api로-불러올-때"><a href="#api로-불러올-때" class="headerlink" title="api로 불러올 때"></a>api로 불러올 때</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="Data-파악하기"><a href="#Data-파악하기" class="headerlink" title="Data 파악하기"></a>Data 파악하기</h2><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line">iris.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/64856526-20141380-d65d-11e9-9953-e1ee87c3f7b3.JPG" alt="head"></p><br><h2 id="Tidy-Data인지-확인하기"><a href="#Tidy-Data인지-확인하기" class="headerlink" title="Tidy Data인지 확인하기"></a>Tidy Data인지 확인하기</h2><blockquote><p>데이터 양에 비해 Wide Format인지 아직 판단하기 이르지만 <br><br>언뜻 봐서 melt할만한 Column은 없어보인다. <br></p></blockquote><p><strong>Wide Format</strong> 데이터의 양에 비해 Column이 많은 DataFrame, 즉 가로로 넓은 형태의 데이터 형태를 말한다.<br>{: .notice}</p><br><h2 id="info로-데이터-정보-확인하기"><a href="#info로-데이터-정보-확인하기" class="headerlink" title="info로 데이터 정보 확인하기"></a>info로 데이터 정보 확인하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line">iris.info()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/65045477-cdf32b00-d999-11e9-9e55-a91c88aa1fa1.JPG" alt="info"></p><br><p><span style="font-size: 20px; font-color: orange;"> info로 알 수 있는 것들 </span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 데이터 갯수  &#x3D;&gt; 150개 (데이터 양이 적다. 하지만 예제 데이터이니 일단 한번 끝까지 해보자)</span><br><span class="line">2. Feature 갯수 &#x3D;&gt; 4개 (Data 150개에 4개 Feature면 적당한가? 아직 모름)</span><br><span class="line">3. Dtype  &#x3D;&gt; Feature 4개 모두 float64 , target data인 species는 object (기계학습 할때 int나 float형으로 바꿔야 겠다)</span><br><span class="line">4. Memory size &#x3D;&gt; 6.0+KB (작다. 불러오는데 큰 문제 없음. memory size가 몇 이하여야 하는지는 잘 모름)</span><br><span class="line">5. Missing Data &#x3D;&gt; 없음</span><br></pre></td></tr></table></figure><br><h2 id="미싱데이터-시각화-하기"><a href="#미싱데이터-시각화-하기" class="headerlink" title="미싱데이터 시각화 하기"></a>미싱데이터 시각화 하기</h2><blockquote><p>info로 미싱데이터를 확인 했지만 혹시 어정쩡하게 미싱 데이터가 있거나 <br><br>미싱데이터의 분포를 쉽게 확인하려면 그래프를 그리자</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> mino</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">mino.matrix(iris)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/65046346-6807a300-d99b-11e9-8cac-22dfd78dc068.JPG" alt="mino"></p><br><h2 id="Label-Encoding"><a href="#Label-Encoding" class="headerlink" title="Label Encoding"></a>Label Encoding</h2><blockquote><p>info를 확인 했을 때 species data를 숫자형으로 바꿔야 된다고 판단 했었고 target 데이터의 값이 문자이면 <br><br>학습을 할 수 없기 때문에 숫자로 인코딩 해준다 (인코딩과 동시에 dtype 자동변경)</p></blockquote><h3 id="Scikit-LabelEncoder-활용하기"><a href="#Scikit-LabelEncoder-활용하기" class="headerlink" title="Scikit LabelEncoder 활용하기"></a>Scikit LabelEncoder 활용하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">target = iris.iloc[:,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">le = LabelEncoder()</span><br><span class="line">le.fit_transform(target)</span><br><span class="line">: array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">         <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">         <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">         <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">         <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">target = pd.DataFrame(le.fit_transform(target))         </span><br><span class="line">target.rename(&#123;<span class="number">0</span>:<span class="string">'target'</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h3 id="Replace-활용하기"><a href="#Replace-활용하기" class="headerlink" title="Replace 활용하기"></a>Replace 활용하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">target = iris.iloc[:,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">target.replace(&#123;<span class="string">'setosa'</span>:<span class="number">0</span>,<span class="string">'versicolor'</span>:<span class="number">1</span>,<span class="string">'virginica'</span>:<span class="number">2</span>&#125;, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h3 id="Label-Encoding의-장점과-단점"><a href="#Label-Encoding의-장점과-단점" class="headerlink" title="Label Encoding의 장점과 단점"></a>Label Encoding의 장점과 단점</h3><p>표</p><br><h2 id="Train-Test-Set-분리하기"><a href="#Train-Test-Set-분리하기" class="headerlink" title="Train-Test Set 분리하기"></a>Train-Test Set 분리하기</h2><blockquote><p>Train, Test set을 분리할 때는 보유한 데이터의 숫자를 감안해서 쪼갠다 <br><br>데이터의 갯수가 만개 이하일 때는 보통 Train : Test 비율 80 : 20 또는 75 : 25로 분할한다 <br><br>그러나 그 이상으로 데이터가 많을 경우 최대한 Train 데이터 비율을 늘려 사용한다.</p></blockquote><p>출처: <a href="https://brunch.co.kr/@coolmindory/31" target="_blank" rel="noopener">Brunch</a><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 관례상 행렬은 대문자, 벡터는 소문자로 표기</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data, target)</span><br><span class="line"></span><br><span class="line">len(X_train)</span><br><span class="line">: <span class="number">112</span></span><br><span class="line">len(X_test)</span><br><span class="line">: <span class="number">38</span></span><br></pre></td></tr></table></figure><h2 id="데이터-분석하기"><a href="#데이터-분석하기" class="headerlink" title="데이터 분석하기"></a>데이터 분석하기</h2><blockquote><p>데이터의 숨은 의미를 찾아보자!</p></blockquote><br><h3 id="수치로-데이터-형태-분포-경향-확인하기"><a href="#수치로-데이터-형태-분포-경향-확인하기" class="headerlink" title="수치로 데이터 형태, 분포, 경향 확인하기"></a>수치로 데이터 형태, 분포, 경향 확인하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line">data = iris.iloc[:,:<span class="number">-1</span>]</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/65370041-9fbe6580-dc8f-11e9-963c-a0d0b861663e.JPG" alt="describe"><br><br></p><h3 id="describe-그래프로-보기"><a href="#describe-그래프로-보기" class="headerlink" title="describe 그래프로 보기"></a>describe 그래프로 보기</h3><blockquote><p>describe는 숫자로 나오기 때문에 한눈에 파악하기 힘들다 <br><br>따라서 그래프로 확인!</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line">data = iris.iloc[:,:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">data.boxplot()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/65370155-adc0b600-dc90-11e9-8074-f1d5158d80ae.JPG" alt="boxplot"></p><blockquote><p>sepal_width 데이터에서 outlier, 즉 소수의 데이터가 데이터 분포에서 멀리 떨어져 있는 경우가 포착되었다. <br><br>하지만 데이터의 갯수도 적고 크게 벗어난 갖이 아니므로 그냥 냅두자</p></blockquote><br><h3 id="데이터간-산점도-그래프-그리기"><a href="#데이터간-산점도-그래프-그리기" class="headerlink" title="데이터간 산점도 그래프 그리기"></a>데이터간 산점도 그래프 그리기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># hue는 색상 =&gt; 보통 target data를 서로 다른 색을 구분지어 칠하고 싶을때 사용</span></span><br><span class="line">sns.pairplot(iris, hue=<span class="string">'species'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/65370247-9209df80-dc91-11e9-8711-315e88c30d81.JPG" alt="pairplot2"></p><br><h3 id="왜도-첨도-그래프-그리기"><a href="#왜도-첨도-그래프-그리기" class="headerlink" title="왜도, 첨도 그래프 그리기"></a>왜도, 첨도 그래프 그리기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">data = iris.iloc[:,:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">data.skew() <span class="comment"># 왜도</span></span><br><span class="line">: sepal_length    <span class="number">0.314911</span></span><br><span class="line">  sepal_width     <span class="number">0.318966</span></span><br><span class="line">  petal_length   <span class="number">-0.274884</span></span><br><span class="line">  petal_width    <span class="number">-0.102967</span></span><br><span class="line">  dtype: float64</span><br><span class="line"></span><br><span class="line">data.kurt() <span class="comment"># 첨도</span></span><br><span class="line">: sepal_length   <span class="number">-0.552064</span></span><br><span class="line">  sepal_width     <span class="number">0.228249</span></span><br><span class="line">  petal_length   <span class="number">-1.402103</span></span><br><span class="line">  petal_width    <span class="number">-1.340604</span></span><br><span class="line">  dtype: float64  </span><br><span class="line"></span><br><span class="line">f, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">7</span>, <span class="number">7</span>), sharex=<span class="literal">True</span>)</span><br><span class="line">sns.distplot(data.iloc[:,<span class="number">0</span>], color=<span class="string">"skyblue"</span>, ax=axes[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">sns.distplot(data.iloc[:,<span class="number">1</span>], color=<span class="string">"olive"</span>, ax=axes[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">sns.distplot(data.iloc[:,<span class="number">2</span>], color=<span class="string">"gold"</span>, ax=axes[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">sns.distplot(data.iloc[:,<span class="number">3</span>], color=<span class="string">"teal"</span>, ax=axes[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i, ax <span class="keyword">in</span> enumerate(axes.reshape(<span class="number">-1</span>)):</span><br><span class="line">    ax.text(x=<span class="number">0.97</span>, y=<span class="number">0.97</span>, transform=ax.transAxes, s=<span class="string">"Skewness: %f"</span> % data.iloc[:,i].skew(),\</span><br><span class="line">        fontweight=<span class="string">'demibold'</span>, fontsize=<span class="number">10</span>, verticalalignment=<span class="string">'top'</span>, horizontalalignment=<span class="string">'right'</span>,\</span><br><span class="line">        backgroundcolor=<span class="string">'white'</span>, color=<span class="string">'xkcd:poo brown'</span>)</span><br><span class="line">    ax.text(x=<span class="number">0.97</span>, y=<span class="number">0.91</span>, transform=ax.transAxes, s=<span class="string">"Kurtosis: %f"</span> % data.iloc[:,i].kurt(),\</span><br><span class="line">        fontweight=<span class="string">'demibold'</span>, fontsize=<span class="number">10</span>, verticalalignment=<span class="string">'top'</span>, horizontalalignment=<span class="string">'right'</span>,\</span><br><span class="line">        backgroundcolor=<span class="string">'white'</span>, color=<span class="string">'xkcd:dried blood'</span>)</span><br><span class="line">plt.tight_layout()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/65370431-98995680-dc93-11e9-994a-fed1c711a965.JPG" alt="skewkurt"><br><br></p><p><strong>왜도</strong> 왜도는 데이터가 대칭이 아닌 정도를 나타낸다. 만약 왜도의 값이 음수이면 오른쪽으로 치우친 정도를 나타내고 왜도의 값이 양수이면 왼쪽으로 치우친 정도를 나타낸다.<br>{: .notice}</p><p><strong>첨도</strong> 첨도는 데이터가 중간값 분포의 정도를 나타낸다. 보통 첨도의 값이 3보다 작으면 완만한 분포를 나타내고 첨도의 값이 3보다 크면 뾰족한 분포를 나타낸다. 지금 데이터에서는 음수면 완만 양수면 뾰족이라고 생각하면 된다.<br>{: .notice}</p><br><h2 id="Data-전처리하기"><a href="#Data-전처리하기" class="headerlink" title="Data 전처리하기"></a>Data 전처리하기</h2><blockquote><p>연습용 데이터라 딱히 전처리할게 없음.. 그래도 학습용으로 추후에 추가할 것.</p></blockquote><br><h2 id="모델링-하기"><a href="#모델링-하기" class="headerlink" title="모델링 하기"></a>모델링 하기</h2><blockquote><p>iris data는 정형데이터에 target data 갯수가 유한개 이므로 classification 방법 중 <br><br>가장 무난한 logistic regression으로 분류를 시작해보자</p></blockquote><br><h3 id="Scikit으로-기계학습-하는-순서"><a href="#Scikit으로-기계학습-하는-순서" class="headerlink" title="Scikit으로 기계학습 하는 순서"></a>Scikit으로 기계학습 하는 순서</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 활용할 모델 이름 import</span><br><span class="line">2. 인스턴스화</span><br><span class="line">3. fit</span><br><span class="line">4. predict</span><br></pre></td></tr></table></figure><br><h3 id="LogisticRegression"><a href="#LogisticRegression" class="headerlink" title="LogisticRegression"></a>LogisticRegression</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">lr.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">: LogisticRegression(C=<span class="number">1.0</span>, class_weight=<span class="literal">None</span>, dual=<span class="literal">False</span>, fit_intercept=<span class="literal">True</span>,</span><br><span class="line">                   intercept_scaling=<span class="number">1</span>, l1_ratio=<span class="literal">None</span>, max_iter=<span class="number">100</span>,</span><br><span class="line">                   multi_class=<span class="string">'warn'</span>, n_jobs=<span class="literal">None</span>, penalty=<span class="string">'l2'</span>,</span><br><span class="line">                   random_state=<span class="literal">None</span>, solver=<span class="string">'warn'</span>, tol=<span class="number">0.0001</span>, verbose=<span class="number">0</span>,</span><br><span class="line">                   warm_start=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><h3 id="성능-검사하기"><a href="#성능-검사하기" class="headerlink" title="성능 검사하기"></a>성능 검사하기</h3><blockquote><p>Cross_val_score를 통해 대략적인 성능을 확인해보자</p></blockquote><br><h3 id="Cross-val-score"><a href="#Cross-val-score" class="headerlink" title="Cross_val_score"></a>Cross_val_score</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">cross_val_score(lr, X_test, y_test, cv=<span class="number">10</span>).mean()</span><br><span class="line"></span><br><span class="line">: <span class="number">0.835</span>  <span class="comment"># Accuracy</span></span><br></pre></td></tr></table></figure><p><strong>결과 분석</strong> Logistic regression으로 분류하고 cross_val_score를 확인해본 결과 0.835라는 정확도가<br>나왔기 때문에 iris data는 앞으로 도전해볼 모델도 분류 모델임을 먼저 시도해보는 것이 좋을 것이라고 판단된다.<br>{: .notice}</p><br><h3 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a>K-Means</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">: KNeighborsClassifier(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">                     metric_params=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">5</span>, p=<span class="number">2</span>,</span><br><span class="line">                     weights=<span class="string">'uniform'</span>)</span><br><span class="line"></span><br><span class="line">cross_val_score(knn, X_test, y_test, cv=<span class="number">10</span>).mean()    </span><br><span class="line"></span><br><span class="line">: <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h3 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line">svc = SVC()</span><br><span class="line">svc.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">: SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="literal">None</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">    decision_function_shape=<span class="string">'ovr'</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto_deprecated'</span>,</span><br><span class="line">    kernel=<span class="string">'rbf'</span>, max_iter=<span class="number">-1</span>, probability=<span class="literal">False</span>, random_state=<span class="literal">None</span>,</span><br><span class="line">    shrinking=<span class="literal">True</span>, tol=<span class="number">0.001</span>, verbose=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">cross_val_score(svc, X_test, y_test, cv=<span class="number">10</span>).mean()</span><br><span class="line">: <span class="number">0.9800000000000001</span></span><br></pre></td></tr></table></figure><br><h3 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line">gnb = GaussianNB()</span><br><span class="line">gnb.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">: GaussianNB(priors=<span class="literal">None</span>, var_smoothing=<span class="number">1e-09</span>)</span><br><span class="line"></span><br><span class="line">cross_val_score(gnb, X_test, y_test, cv=<span class="number">10</span>).mean()</span><br><span class="line">: <span class="number">0.96</span></span><br></pre></td></tr></table></figure><br><h3 id="학습-모델로-새로운-값-예측-해보기"><a href="#학습-모델로-새로운-값-예측-해보기" class="headerlink" title="학습 모델로 새로운 값 예측 해보기"></a>학습 모델로 새로운 값 예측 해보기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 학습된 값들  </span></span><br><span class="line">lr.predict([[<span class="number">5.1</span>, <span class="number">3.5</span>, <span class="number">1.4</span>, <span class="number">0.2</span>]]) <span class="comment"># setosa</span></span><br><span class="line">: array([<span class="number">0</span>], dtype=int64)</span><br><span class="line">lr.predict([[<span class="number">6.7</span>, <span class="number">3.1</span>, <span class="number">4.7</span>, <span class="number">1.5</span>]]) <span class="comment"># versicolor</span></span><br><span class="line">: array([<span class="number">1</span>], dtype=int64)</span><br><span class="line">lr.predict([[<span class="number">7.7</span>, <span class="number">2.8</span>, <span class="number">6.7</span>, <span class="number">2.</span>]]) <span class="comment"># virginica</span></span><br><span class="line">: array([<span class="number">2</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 새로운 값으로 예측하기</span></span><br><span class="line"></span><br><span class="line">lr.predict([[<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0.1</span>]])  </span><br><span class="line">: array([<span class="number">0</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line">lr.predict([[<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>]])</span><br><span class="line">: array([<span class="number">1</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line">lr.predict([[<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>]])</span><br><span class="line">: array([<span class="number">2</span>], dtype=int64)</span><br></pre></td></tr></table></figure><br><h3 id="Train-Test-split으로-정확도-보기"><a href="#Train-Test-split으로-정확도-보기" class="headerlink" title="Train - Test - split으로 정확도 보기"></a>Train - Test - split으로 정확도 보기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">iris.species = iris.species.map(&#123;<span class="string">'setosa'</span>: <span class="number">0</span>, <span class="string">'versicolor'</span>:<span class="number">1</span>,<span class="string">'virginica'</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">iris_data = iris[iris.columns[:<span class="number">-1</span>]]</span><br><span class="line">iris[<span class="string">'species'</span>]</span><br><span class="line"></span><br><span class="line">knn.fit(iris_data, iris[<span class="string">'species'</span>])</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train , y_test = train_test_split(iris[iris.columns[:<span class="number">-1</span>]], iris.species)</span><br><span class="line"></span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line">knn.predict(X_test)</span><br><span class="line"></span><br><span class="line">: array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line">knn.predict(X_test) == y_test.values</span><br><span class="line"></span><br><span class="line">: array([ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>])</span><br><span class="line"></span><br><span class="line">confusion_matrix(y_test, knn.predict(X_test))</span><br><span class="line"></span><br><span class="line">: array([[<span class="number">13</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">       [ <span class="number">0</span>, <span class="number">13</span>,  <span class="number">1</span>],</span><br><span class="line">       [ <span class="number">0</span>,  <span class="number">0</span>, <span class="number">11</span>]], dtype=int64)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> iris </tag>
            
            <tag> EDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap4</title>
      <link href="/2019/08/07/bootstrap/"/>
      <url>/2019/08/07/bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="부트스트랩-시작하기"><a href="#부트스트랩-시작하기" class="headerlink" title="부트스트랩 시작하기"></a>부트스트랩 시작하기</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span> <span class="comment">&lt;!-- Html 문서 페이지를 음성으로 읽어주는 기능을 사용할때 lang에 명시된 언어로 읽어준다 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="comment">&lt;!-- 로봇이나 기계에게 제공하는 정보를 담는 태그, 사람이 직접 보지 않는 부분 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>지혁이네<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- device별로 1대1로 크기를 매칭시켜 보여줄때 쓰는 태그, Cross browsing 기법--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 장점: 웹 브라우저가 request 할때 / core 주소당 한개씩 처리?? (속도가 빠르다) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 단점: 참조하는 사이트가 서버 오류가 발생하면 같이 영향을 받아 오류가 발생할 수 있다 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p><strong>Cross browsing</strong>  웹표준 기술을 적용하여 서로 다른 OS 또는 플랫폼(브라우저)에서도 인터넷이 이상 없이 구현되는 기술을 말한다.<br>{: .notice}</p><br><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. container</span><br><span class="line">2. container-fluid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Bootstrap4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
            <tag> bootstrap </tag>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP(자연어 처리)</title>
      <link href="/2019/07/20/nlp/"/>
      <url>/2019/07/20/nlp/</url>
      
        <content type="html"><![CDATA[<h1 id="NLP-Natural-Language-Processing"><a href="#NLP-Natural-Language-Processing" class="headerlink" title="NLP(Natural Language Processing)"></a>NLP(Natural Language Processing)</h1><blockquote><p>사람들이 사용하는 언어의 의미를 분석해서 컴퓨터가 처리할 수 있도록 하는 일 <br><br>한국어는 특히나 단어가 형태소로 이루어져 있기 때문에 컴퓨터에 학습시키가 쉽지 않다 <br><br>예를 들어 ‘눈’이라는 단어는 내리는 눈, 사람의 눈, 사물을 보고 판단하는 힘, 태풍의 중심 등 여러가지 의미가 있기 때문에 문장간의 문맥도 파악 할 수 있어야 한다</p></blockquote><p><span style="color: orange; font-size: 25px;">따라서 같은 데이터임에도 다양한 의미를 내포하기 때문에 NLP에서는 Data를 Corpus라고 부른다</span><br></p><br><h2 id="Corpus"><a href="#Corpus" class="headerlink" title="Corpus"></a>Corpus</h2><blockquote><p>말뭉치, 언어 데이터를 한데 모은 것 <br><br>corpus는 단순히 Big language data가 아니다</p></blockquote><br><h3 id="Corpus가-되기-위한-조건"><a href="#Corpus가-되기-위한-조건" class="headerlink" title="Corpus가 되기 위한 조건"></a>Corpus가 되기 위한 조건</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 언어의 특성을 잘 담아 낼 수 있도록 다양한 패턴의 데이터가 필요하다</span><br><span class="line">2. 여러가지 상황에서 쓰이는 균형잡힌 데이터여야 한다</span><br><span class="line">3. 구어체를 포함해야 한다</span><br><span class="line">4. 데이터가 유의미한 규모로 확보되어야 하고 그 데이터가 대표성을 지녀야 한다</span><br><span class="line">5. 데이터 수집시 원형을 유지했다라는 보장이 있어야 한다</span><br></pre></td></tr></table></figure><p>출처: <a href="https://ko.wikipedia.org/wiki/%EB%A7%90%EB%AD%89%EC%B9%98_%EC%96%B8%EC%96%B4%ED%95%99" target="_blank" rel="noopener">위키피디아</a>, &nbsp; <a href="https://corpora.tistory.com/3?category=705254" target="_blank" rel="noopener">tistory</a><br><br><br><br></p><h3 id="Corpus의-종류"><a href="#Corpus의-종류" class="headerlink" title="Corpus의 종류"></a>Corpus의 종류</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 용도에 따라 : 균형 말뭉치(balanced&#x2F;core corpus), 학습 말뭉치(training corpus), 학습자 말뭉치(learner&#39;s corpus), 방언 말뭉치(dialect corpus)</span><br><span class="line">2. 가공 정도에 따라 : 원시 말뭉치(raw corpus), 주석 말뭉치(tagged&#x2F;annotated corpus), 분석 말뭉치(analyzed corpus)</span><br><span class="line">3. 시대에 따라 : 공시적 말뭉치(synchronic corpus), 역사 말뭉치(historical&#x2F;diachronic corpus)</span><br><span class="line">4. 변화여부에 따라 : 정적 말뭉치(static corpus), 동적 말뭉치(dynamic&#x2F;monitor corpus</span><br></pre></td></tr></table></figure><br><p><strong>Corpus 생성 Tip</strong> 단어 입력시 다양한 문장 생성해주는 사이트 : <a href="https://www.english-corpora.org/coca/" target="_blank" rel="noopener">https://www.english-corpora.org/coca/</a><br>{: .notice}</p><br><br><h2 id="언어-형태학"><a href="#언어-형태학" class="headerlink" title="언어 형태학"></a>언어 형태학</h2><p><img src="https://user-images.githubusercontent.com/33630505/61575807-67719e00-ab0b-11e9-98a7-f85796840033.JPG" alt="words"></p><br><h2 id="NLTK-Natural-Language-Tool-Kit"><a href="#NLTK-Natural-Language-Tool-Kit" class="headerlink" title="NLTK(Natural Language Tool Kit)"></a>NLTK(Natural Language Tool Kit)</h2><blockquote><p>자연어 처리를 위한 파이썬 패키지</p></blockquote><br><h3 id="NLTK-설치"><a href="#NLTK-설치" class="headerlink" title="NLTK 설치"></a>NLTK 설치</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!pip install nltk  <span class="comment"># jupyter notebook에서 설치시</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">nltk.download()  <span class="comment"># nltk의 기능을 제대로 사용하기 위해서는 nltk data를 추가적으로 설치해야 한다  </span></span><br><span class="line">                 <span class="comment"># 해당 코드가 에러가 난다면 깃허브 페이지에 가서 수동 설치 해야함</span></span><br><span class="line">                 <span class="comment"># https://github.com/nltk/nltk_data</span></span><br><span class="line">nltk.download(<span class="string">"punkt"</span>)  <span class="comment"># tokenize를 사용하기 위해서 설치해야 한다</span></span><br></pre></td></tr></table></figure><br><h3 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h3><p>NLP 공부할때 참고: <a href="https://wikidocs.net/21694" target="_blank" rel="noopener">wikidocs</a>, &nbsp; <a href="https://lovit.github.io/nlp/2018/04/02/wpm/" target="_blank" rel="noopener">lovit blog</a><br></p><h3 id="Lemmatization"><a href="#Lemmatization" class="headerlink" title="Lemmatization"></a>Lemmatization</h3><h3 id="Stemming"><a href="#Stemming" class="headerlink" title="Stemming"></a>Stemming</h3><h3 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h3><h3 id="Cleaning"><a href="#Cleaning" class="headerlink" title="Cleaning"></a>Cleaning</h3><h3 id="Stopword"><a href="#Stopword" class="headerlink" title="Stopword"></a>Stopword</h3><h3 id="Bag-of-words"><a href="#Bag-of-words" class="headerlink" title="Bag of words"></a>Bag of words</h3><h3 id="Word-Cloud"><a href="#Word-Cloud" class="headerlink" title="Word Cloud"></a>Word Cloud</h3><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><h2 id="한국어-자연어-처리를-위한-파이썬-라이브러리-대표적인-5가지"><a href="#한국어-자연어-처리를-위한-파이썬-라이브러리-대표적인-5가지" class="headerlink" title="한국어 자연어 처리를 위한 파이썬 라이브러리(대표적인 5가지)"></a>한국어 자연어 처리를 위한 파이썬 라이브러리(대표적인 5가지)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Twitter</span><br><span class="line">2. Komoran</span><br><span class="line">3. Hannanum</span><br><span class="line">4. Mecab</span><br><span class="line">5. Kkma</span><br></pre></td></tr></table></figure><br><h2 id="Konlpy를-활용한-영화-리뷰-감정-분석"><a href="#Konlpy를-활용한-영화-리뷰-감정-분석" class="headerlink" title="Konlpy를 활용한 영화 리뷰 감정 분석"></a>Konlpy를 활용한 영화 리뷰 감정 분석</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> konlpy.tag <span class="keyword">import</span> Kkma, Hannanum,Komoran, Twitter, Okt</span><br><span class="line"><span class="keyword">from</span> konlpy.utils <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">kkma = Kkma()</span><br><span class="line">han = Hannanum()</span><br><span class="line">kom = Komoran()</span><br><span class="line">tw = Twitter()</span><br><span class="line">okt = Okt()</span><br><span class="line"></span><br><span class="line"><span class="comment"># nlp 라이브러리의 특성을 공부하고 잘 분석해서 상황에 맞는 nlp를 하기 위해 라이브러리를 선별한다.</span></span><br><span class="line"><span class="comment"># 보통 Kkma가 성능이 대체적으로 좋다.</span></span><br><span class="line"></span><br><span class="line">pprint(kkma.sentences(<span class="string">u"네 안녕하세요. 반갑습니다."</span>))</span><br><span class="line">: [<span class="string">'네 안녕하세요.'</span>, <span class="string">'반갑습니다.'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kkma는 나는 =&gt; '날'로 제대로 토큰화가 되는걸 확인할 수 있다.</span></span><br><span class="line">pprint(kkma.pos(<span class="string">u"하늘을 나는 자동차"</span>)) <span class="comment"># 품사</span></span><br><span class="line">: [(<span class="string">'하늘'</span>, <span class="string">'NNG'</span>), (<span class="string">'을'</span>, <span class="string">'JKO'</span>), (<span class="string">'날'</span>, <span class="string">'VV'</span>), (<span class="string">'는'</span>, <span class="string">'ETD'</span>), (<span class="string">'자동차'</span>, <span class="string">'NNG'</span>)]</span><br><span class="line"></span><br><span class="line">print(han.analyze(<span class="string">u"아버지가 방에 들어가신다. 안녕하세요. 하늘을 나는 자동차"</span>))</span><br><span class="line">: [[[(<span class="string">'아버지'</span>, <span class="string">'ncn'</span>), (<span class="string">'가'</span>, <span class="string">'jcc'</span>)], [(<span class="string">'아버지'</span>, <span class="string">'ncn'</span>), (<span class="string">'가'</span>, <span class="string">'jcs'</span>)]], [[(<span class="string">'방'</span>, <span class="string">'nbu'</span>), (<span class="string">'에'</span>, <span class="string">'jca'</span>)], [(<span class="string">'방'</span>, <span class="string">'ncn'</span>), (<span class="string">'에'</span>,</span><br><span class="line"><span class="string">'jca'</span>)]], [[(<span class="string">'들'</span>, <span class="string">'pvg'</span>), (<span class="string">'어'</span>, <span class="string">'ecx'</span>), (<span class="string">'가'</span>, <span class="string">'px'</span>), (<span class="string">'시'</span>, <span class="string">'ep'</span>), (<span class="string">'ㄴ다'</span>, <span class="string">'ef'</span>)], [(<span class="string">'듣'</span>, <span class="string">'pvg'</span>), (<span class="string">'어'</span>, <span class="string">'ecx'</span>), (<span class="string">'가'</span>, <span class="string">'px'</span>),</span><br><span class="line">(<span class="string">'시'</span>, <span class="string">'ep'</span>), (<span class="string">'ㄴ다'</span>, <span class="string">'ef'</span>)], [(<span class="string">'들어가'</span>, <span class="string">'pvg'</span>), (<span class="string">'시'</span>, <span class="string">'ep'</span>), (<span class="string">'ㄴ다'</span>, <span class="string">'ef'</span>)]], [[(<span class="string">'.'</span>, <span class="string">'sf'</span>)], [(<span class="string">'.'</span>, <span class="string">'sy'</span>)]], [], [[(<span class="string">'안녕'</span>,</span><br><span class="line"><span class="string">'ncps'</span>), (<span class="string">'하세'</span>, <span class="string">'ncpa'</span>), (<span class="string">'요'</span>, <span class="string">'ncn'</span>)], [(<span class="string">'안녕'</span>, <span class="string">'ncps'</span>), (<span class="string">'하'</span>, <span class="string">'xsms'</span>), (<span class="string">'세요'</span>, <span class="string">'ef'</span>)], [(<span class="string">'안녕'</span>, <span class="string">'ncps'</span>), (<span class="string">'하'</span>, <span class="string">'xsms'</span>), (<span class="string">'세'</span>,</span><br><span class="line"><span class="string">'ef'</span>), (<span class="string">'요'</span>, <span class="string">'jxf'</span>)]], [[(<span class="string">'.'</span>, <span class="string">'sf'</span>)], [(<span class="string">'.'</span>, <span class="string">'sy'</span>)]], [], [[(<span class="string">'하늘'</span>, <span class="string">'ncn'</span>), (<span class="string">'을'</span>, <span class="string">'jco'</span>)]], [[(<span class="string">'나'</span>, <span class="string">'ncn'</span>), (<span class="string">'는'</span>, <span class="string">'jxc'</span>)], [(<span class="string">'나'</span>,</span><br><span class="line"><span class="string">'npp'</span>), (<span class="string">'는'</span>, <span class="string">'jxc'</span>)], [(<span class="string">'나'</span>, <span class="string">'pvg'</span>), (<span class="string">'는'</span>, <span class="string">'etm'</span>)], [(<span class="string">'나'</span>, <span class="string">'px'</span>), (<span class="string">'는'</span>, <span class="string">'etm'</span>)], [(<span class="string">'나'</span>, <span class="string">'pvg'</span>), (<span class="string">'아'</span>, <span class="string">'ecs'</span>), (<span class="string">'는'</span>, <span class="string">'jxc'</span>)</span><br><span class="line">[(<span class="string">'나'</span>, <span class="string">'pvg'</span>), (<span class="string">'아'</span>, <span class="string">'ef'</span>), (<span class="string">'는'</span>, <span class="string">'etm'</span>)], [(<span class="string">'나'</span>, <span class="string">'px'</span>), (<span class="string">'아'</span>, <span class="string">'ecs'</span>), (<span class="string">'는'</span>, <span class="string">'jxc'</span>)], [(<span class="string">'나'</span>, <span class="string">'px'</span>), (<span class="string">'아'</span>, <span class="string">'ef'</span>), (<span class="string">'는'</span>, <span class="string">'etm'</span>)],</span><br><span class="line">[(<span class="string">'날'</span>, <span class="string">'pvg'</span>), (<span class="string">'는'</span>, <span class="string">'etm'</span>)]], [[(<span class="string">'자동차'</span>, <span class="string">'ncn'</span>)], [(<span class="string">'자동'</span>, <span class="string">'ncn'</span>), (<span class="string">'차'</span>, <span class="string">'ncn'</span>)]]]</span><br><span class="line"></span><br><span class="line">print(han.morphs(<span class="string">u"아버지가 방에 들어가신다. 안녕하세요. 하늘을 나는 자동차"</span>)) <span class="comment"># 형태소 분석</span></span><br><span class="line">: [<span class="string">'아버지'</span>, <span class="string">'가'</span>, <span class="string">'방'</span>, <span class="string">'에'</span>, <span class="string">'들'</span>, <span class="string">'어'</span>, <span class="string">'가'</span>, <span class="string">'시ㄴ다'</span>, <span class="string">'.'</span>, <span class="string">'안녕'</span>, <span class="string">'하'</span>, <span class="string">'세'</span>, <span class="string">'요'</span>, <span class="string">'.'</span>, <span class="string">'하늘'</span>, <span class="string">'을'</span>, <span class="string">'나'</span>, <span class="string">'는'</span>, <span class="string">'자동차'</span>]</span><br><span class="line"></span><br><span class="line">print(kom.pos(<span class="string">u"아버지가 방에 들어가신다. 안녕하세요. 하늘을 나는 자동차"</span>))</span><br><span class="line">: [(<span class="string">'아버지'</span>, <span class="string">'NNG'</span>), (<span class="string">'가'</span>, <span class="string">'JKS'</span>), (<span class="string">'방'</span>, <span class="string">'NNG'</span>), (<span class="string">'에'</span>, <span class="string">'JKB'</span>), (<span class="string">'들어가'</span>, <span class="string">'VV'</span>), (<span class="string">'시'</span>, <span class="string">'EP'</span>), (<span class="string">'ㄴ다'</span>, <span class="string">'EF'</span>), (<span class="string">'.'</span>, <span class="string">'SF'</span>), (<span class="string">'안녕</span></span><br><span class="line"><span class="string">세요'</span>, <span class="string">'NNP'</span>), (<span class="string">'.'</span>, <span class="string">'SF'</span>), (<span class="string">'하늘'</span>, <span class="string">'NNG'</span>), (<span class="string">'을'</span>, <span class="string">'JKO'</span>), (<span class="string">'나'</span>, <span class="string">'NP'</span>), (<span class="string">'는'</span>, <span class="string">'JX'</span>), (<span class="string">'자동차'</span>, <span class="string">'NNG'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파일을 읽어와 Corpus를 만드는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(filename, encoding)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> open(filename, encoding=encoding) <span class="keyword">as</span> f:</span><br><span class="line">        data = [line.split(<span class="string">'\t'</span>) <span class="keyword">for</span> line <span class="keyword">in</span> f.read().splitlines()]</span><br><span class="line">        data = data[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># train_data와 test_data를 나누어 준다. (train, test data가 서로 분리 되어 저장 되어 있었음)    </span></span><br><span class="line">train_data = read_data(<span class="string">"ratings_train.txt"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">test_data = read_data(<span class="string">"ratings_test.txt"</span>, <span class="string">'utf-8'</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터가 너무 많아 만개 데이터만 학습 시키기 위해 데이터 split.</span></span><br><span class="line">train_data = train_data[:<span class="number">10000</span>]</span><br><span class="line">test_data = test_data[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 토큰화 함수 (토큰과 품사 정보 합치기)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tokenize</span><span class="params">(doc)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'/'</span>.join(t) <span class="keyword">for</span> t <span class="keyword">in</span> okt.pos(doc, norm=<span class="literal">True</span>, stem=<span class="literal">True</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># json file 형태로 저장 이미 있으면 불러와 train_docs, test_docs 변수에 저장</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(<span class="string">"train_docs.json"</span>):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"train_docs.json"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        train_docs = json.load(f)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"test_docs.json"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        test_docs = json.load(f)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    train_docs = [(tokenize(row[<span class="number">1</span>]), row[<span class="number">2</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> train_data]</span><br><span class="line">    test_docs = [(tokenize(row[<span class="number">1</span>]), row[<span class="number">2</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> test_data]</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"train_docs.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> make_file:</span><br><span class="line">        json.dump(train_docs, make_file, ensure_ascii=<span class="literal">False</span>, indent=<span class="string">'\t'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"test_docs.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> make_file:</span><br><span class="line">        json.dump(test_docs, make_file, ensure_ascii=<span class="literal">False</span>, indent=<span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line">train_docs[<span class="number">0</span>]</span><br><span class="line">: [[<span class="string">'아/Exclamation'</span>,</span><br><span class="line">  <span class="string">'더빙/Noun'</span>,</span><br><span class="line">  <span class="string">'../Punctuation'</span>,</span><br><span class="line">  <span class="string">'진짜/Noun'</span>,</span><br><span class="line">  <span class="string">'짜증나다/Adjective'</span>,</span><br><span class="line">  <span class="string">'목소리/Noun'</span>],</span><br><span class="line"> <span class="string">'0'</span>]</span><br><span class="line"></span><br><span class="line">tokens = [t <span class="keyword">for</span> d <span class="keyword">in</span> train_docs <span class="keyword">for</span> t <span class="keyword">in</span> d[<span class="number">0</span>]]</span><br><span class="line">tokens[<span class="number">0</span>]</span><br><span class="line">: <span class="string">'아/Exclamation'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"></span><br><span class="line">text = nltk.Text(tokens, name=<span class="string">'NMSC'</span>) <span class="comment"># 문서를 편리하게 탐색할 수 있는 기능을 제공</span></span><br><span class="line"></span><br><span class="line">text.vocab().most_common(<span class="number">10</span>)</span><br><span class="line">: [(<span class="string">'./Punctuation'</span>, <span class="number">4791</span>),</span><br><span class="line">   (<span class="string">'영화/Noun'</span>, <span class="number">3368</span>),</span><br><span class="line">   (<span class="string">'하다/Verb'</span>, <span class="number">2829</span>),</span><br><span class="line">   (<span class="string">'이/Josa'</span>, <span class="number">2624</span>),</span><br><span class="line">   (<span class="string">'보다/Verb'</span>, <span class="number">2576</span>),</span><br><span class="line">   (<span class="string">'의/Josa'</span>, <span class="number">2123</span>),</span><br><span class="line">   (<span class="string">'../Punctuation'</span>, <span class="number">1949</span>),</span><br><span class="line">   (<span class="string">'가/Josa'</span>, <span class="number">1789</span>),</span><br><span class="line">   (<span class="string">'에/Josa'</span>, <span class="number">1771</span>),</span><br><span class="line">   (<span class="string">'을/Josa'</span>, <span class="number">1587</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># bag of words 만들기</span></span><br><span class="line">selected_words = [f[<span class="number">0</span>] <span class="keyword">for</span> f <span class="keyword">in</span> text.vocab().most_common(<span class="number">10000</span>)]   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 문서마다 bag of words에 포함된 단어가 있는지 카운트 해주는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">term_frequency</span><span class="params">(doc)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [doc.count(word) <span class="keyword">for</span> word <span class="keyword">in</span> selected_words]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 학습 시킬 수 있는 형태의 train, test corpus 만들기</span></span><br><span class="line">train_x = [term_frequency(d) <span class="keyword">for</span> d, _ <span class="keyword">in</span> train_docs]</span><br><span class="line">train_y = [c <span class="keyword">for</span> _, c <span class="keyword">in</span> train_docs]</span><br><span class="line"></span><br><span class="line">test_x = [term_frequency(d) <span class="keyword">for</span> d, _ <span class="keyword">in</span> test_docs]</span><br><span class="line">train_y = [c <span class="keyword">for</span> _, c <span class="keyword">in</span> train_docs]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x_train = np.asarray(train_x).astype(<span class="string">'float32'</span>)</span><br><span class="line">x_test = np.asarray(test_x).astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line">y_train = np.asarray(train_y).astype(<span class="string">'float32'</span>)</span><br><span class="line">y_test = np.asarray(test_y).astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모델 만들기</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models, layers, optimizers, losses, metrics</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line">model.add(layers.Dense(<span class="number">64</span>, <span class="string">'relu'</span>, <span class="number">10000</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=optimizers.RMSprop(lr=<span class="number">0.001</span>), loss=losses.binary_crossentropy, metrics=[metrics.binary_accuracy])</span><br><span class="line">model.fit(x_train, y_train, epochs=<span class="number">10</span>, batch_size=<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">results = model.evaluate(x_test, y_test)</span><br><span class="line">: <span class="number">1000</span>/<span class="number">1000</span> [==============================] - <span class="number">0</span>s <span class="number">114</span>us/sample - loss: <span class="number">0.7367</span> - binary_accuracy: <span class="number">0.7940</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 리뷰 긍정/부정 추측하는 함수  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_pos_neg</span><span class="params">(review)</span>:</span></span><br><span class="line">    token=tokenize(review)</span><br><span class="line">    tf = term_frequency(token)</span><br><span class="line">    data = np.expand_dims(np.asarray(tf).astype(<span class="string">'float32'</span>), axis=<span class="number">0</span>)</span><br><span class="line">    score = float(model.predict(data))</span><br><span class="line">    <span class="keyword">if</span>(score &gt; <span class="number">0.5</span>):</span><br><span class="line">        print(<span class="string">"[&#123;&#125;]는 &#123;:.2f&#125;% 확률로 긍정 리뷰이지 않을까 추측해봅니다.^^\n"</span>.format(review,score*<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"[&#123;&#125;]는 &#123;:.2f&#125;% 확률로 부정 리뷰이지 않을까 추측해봅니다.^^\n"</span>.format(review,(<span class="number">1</span>-score)*<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예측        </span></span><br><span class="line">predict_pos_neg(<span class="string">"올해 최고의 영화! 세번 넘게 봐도 질리지가 않네요."</span>)</span><br><span class="line">: [올해 최고의 영화! 세번 넘게 봐도 질리지가 않네요.]는 <span class="number">99.99</span>% 확률로 긍정 리뷰이지 않을까 추측해봅니다.^^</span><br><span class="line"></span><br><span class="line">predict_pos_neg(<span class="string">'노잼'</span>)</span><br><span class="line">: [노잼]는 <span class="number">96.37</span>% 확률로 부정 리뷰이지 않을까 추측해봅니다.^^</span><br><span class="line"></span><br><span class="line">predict_pos_neg(<span class="string">"대박 재미있음"</span>)</span><br><span class="line">: [대박 재미있음]는 <span class="number">98.86</span>% 확률로 긍정 리뷰이지 않을까 추측해봅니다.^^</span><br><span class="line"></span><br><span class="line">predict_pos_neg(<span class="string">"대박 재미없음"</span>)</span><br><span class="line">: [대박 재미없음]는 <span class="number">73.68</span>% 확률로 부정 리뷰이지 않을까 추측해봅니다.^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예측이 잘 되지 않는 문장</span></span><br><span class="line">predict_pos_neg(<span class="string">"음악이 몰입에 방해가 됩니다"</span>)</span><br><span class="line">: [음악이 몰입에 방해가 됩니다]는 <span class="number">54.90</span>% 확률로 긍정 리뷰이지 않을까 추측해봅니다.^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다시 학습하고 나서 예측이 바뀜</span></span><br><span class="line">predict_pos_neg(<span class="string">"음악이 몰입에 방해가 됩니다"</span>)</span><br><span class="line">: [음악이 몰입에 방해가 됩니다]는 <span class="number">58.53</span>% 확률로 부정 리뷰이지 않을까 추측해봅니다.^^</span><br></pre></td></tr></table></figure><h2 id="궁금한점"><a href="#궁금한점" class="headerlink" title="궁금한점"></a>궁금한점</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 다양한 문장을 학습하지 않았거나 신조어로 이루어진 문장으로 예측하려 할때는</span><br><span class="line">   처음 본 문장에 대해서는 어떻게 예측을 하는 걸까?</span><br><span class="line"></span><br><span class="line"># nlp외에 궁금한점    </span><br><span class="line">2. iris 데이터로 모델을 만들었을 때 iris에서 나올수 없는 관측치를 대입해도 output 결과로</span><br><span class="line">   어떠한 꽃일 것이라 예측을 하는 경우가 있는데 라벨이 유한개인 classification인 경우에</span><br><span class="line">   한해 절대 나올 수 없는 아웃라이어 관측치는 예외처리를 해줘야 하는 것인가?</span><br><span class="line">   아니면 학습한 모델이 알아서 정해진 라벨중에 그나마 근접한 정답으로 정확도가 낮음에도</span><br><span class="line">   output을 주는 것인가..?</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Natural Language Processing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 자연어 처리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Collection</title>
      <link href="/2019/07/15/data-collection/"/>
      <url>/2019/07/15/data-collection/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-Collection"><a href="#Data-Collection" class="headerlink" title="Data Collection"></a>Data Collection</h1><blockquote><p>데이터 수집은 왜 하는 걸까??</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4차 산업혁명 시대를 사는 현대인들 중 Big Data에 관한 존재를 모르는 사람은 없을 것이다</span><br><span class="line">Big Data는 방대한 데이터고 그 많은 데이터로 뭐 어떻게 해보려는 시도가 있다는 건 알겠는데</span><br><span class="line">도대체 그 Big Data라는 것으로 뭘 하는 걸까?</span><br><span class="line"></span><br><span class="line">마냥 많은 데이터라는 것에서 그쳤으면 Big Data가 이슈가 되지 않았을 것이다</span><br><span class="line">Big Data라는 엄청난 데이터 속에서 사람의 인지 능력으로는 분석하기 힘든 양을</span><br><span class="line">한꺼번에 컴퓨터라는 도구로 분석을 해보니 사람보다 연산도 빠르고 분석 성능이 좋았던 것이다</span><br><span class="line"></span><br><span class="line">따라서 Big Data(Data warehouse)를 수집해서 숨겨진 의미 있는 정보를 추출하고</span><br><span class="line">문제를 해결하는 것이 화두가 된 것이다</span><br></pre></td></tr></table></figure><br><h2 id="Data-수집-종류"><a href="#Data-수집-종류" class="headerlink" title="Data 수집 종류"></a>Data 수집 종류</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 공공데이터(api, file)</span><br><span class="line">2. Portal site ( ex) google, naver, daum..)</span><br><span class="line">3. 그 외 Files, Databases</span><br></pre></td></tr></table></figure><blockquote><p>공공 데이터 api나 file 그리고 dataset(file)은 데이터를 수집하는 절차가 복잡하거나 수집해서 <br><br>처리하는 작업이 번거롭거나 힘들지 않다 <br><br>그런데 Portal site에서 데이터를 수집하기 위해서는 제법 까다로운 작업이 필요하다</p></blockquote><br><h2 id="Web-Crawling은-불법"><a href="#Web-Crawling은-불법" class="headerlink" title="Web Crawling은 불법?"></a>Web Crawling은 불법?</h2><blockquote><p>결론적으로 말해서 모든 Crawling, Scraping은 불법이 아니다. <br><br>하지만 대부분 불법이므로 주의 해야 한다</p></blockquote><br><h3 id="어떤-것이-합법인가"><a href="#어떤-것이-합법인가" class="headerlink" title="어떤 것이 합법인가?"></a>어떤 것이 합법인가?</h3><h4 id="Opt-in-vs-Opt-out"><a href="#Opt-in-vs-Opt-out" class="headerlink" title="Opt-in vs Opt-out"></a>Opt-in vs Opt-out</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Opt-in : 정보 수집에 대해 동의를 얻고나서 수집하는 경우  (whitelist)</span><br><span class="line"></span><br><span class="line">Opt-out : 처음에 정보 제공자에 대해 동의를 얻지 않고 당사자의 거부 의사를 밝혔을 때  </span><br><span class="line">          정보 수집 중단을 하는 경우 (blacklist)</span><br></pre></td></tr></table></figure><p><span style="color: skyblue; font-size: 20px">Crawling하는 입장에서는 Opt-out 방법으로 정보를 수집한다</span><br><br><span style="color: skyblue; font-size: 20px">따라서 해당 사이트에서 robots.txt에 명시적으로 거부하지 않은 경우, 메인페이지 하단에 crawling 금지 표시가 없는 경우만 정보 수집이 가능하다. </span><br></p><p><img src="https://user-images.githubusercontent.com/33630505/61589769-fe148c80-abe9-11e9-815c-b069edd7f602.png" alt="robots"></p><br><h2 id="Data-from-Portal-site-Web-Data"><a href="#Data-from-Portal-site-Web-Data" class="headerlink" title="Data from Portal site(Web Data)"></a>Data from Portal site(Web Data)</h2><blockquote><p>Web으로부터 데이터를 수집하겠다고 마음 먹은 순간 해야할 작업들이 많다</p></blockquote><br><hr><h2 id="Crawling부터-DB-저장까지-Flow"><a href="#Crawling부터-DB-저장까지-Flow" class="headerlink" title="Crawling부터 DB 저장까지 Flow"></a>Crawling부터 DB 저장까지 Flow</h2><p><img src="https://user-images.githubusercontent.com/33630505/61589402-56489000-abe4-11e9-9e49-dbe35c4a7fad.jpg" alt="crawlingandscraping"><br>사진 출처: 논문[RCrawler: An R package for parallel web crawling and scraping -Salim Khalil, Mohamed Fakir]  <br><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Data 수집원 OK? ⇒ Dynamic HTML  ⇒  Focused?   ⇒ Selenium + Crawling + url check ⇒ Scraping  &#x3D;&gt; DB</span><br><span class="line">                                      BFS?     ⇒ Selenium + Crawling ⇒ Scraping ⇒ DB</span><br><span class="line">                      HTML      ⇒  Focused?   ⇒ Crawling + url check ⇒ Scraping ⇒ DB</span><br><span class="line">                                      BFS?     ⇒ Crawling ⇒ Scraping ⇒ DB</span><br></pre></td></tr></table></figure><br><p><span style="color: skyblue; font-size: 20px">데이터를 가져오려면 Web page 구성을 알아야 한다!</span><br></p><blockquote><p>HTML, CSS, JavaScript등 웹 페이지 구성이 어떻게 되는지 공부해야 한다 <br><br>사이트 마다 웹 페이지 구성이 다르기 때문에 웹에 대한 이해 없이 무작정 하면 <br><br>데이터 수집이 안되는 경우를 발견하게 될 것이다 <br></p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/61360601-ba541700-a8b9-11e9-9031-d4271168bf10.JPG" alt="lifecycle"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">어떠한 웹 페이지는 요청한 부분만 동적으로 페이지 리로딩 없이 데이터를 가져 와서</span><br><span class="line">request url을 확인하기 어려운 경우가 있다.</span><br><span class="line"></span><br><span class="line">위 그림에 SPA Lifecycle이 그러한 경우 인데,</span><br><span class="line">사용자가 직접 클릭을 해야만 데이터를 확인 할 수 페이지라면</span><br><span class="line">처음에 요청했던 페이지에는 포함되어 있지 않고 클릭 한 순간</span><br><span class="line">dom객체가 추가 되기 때문에 실시간으로 개발자 도구에서 network 부분을 살피지 않는다면</span><br><span class="line">절대 숨겨진 데이터를 가져올 수 없을 것이다.</span><br><span class="line"></span><br><span class="line">따라서 어떠한 웹 페이지 인지에 따라 셀레늄같은 automation framework를 사용할지 말지 결정해야 한다.</span><br></pre></td></tr></table></figure><p><span style="color: orange">잘 모른다면 참고하자 =&gt;</span> <a href="https://jungjihyuk.github.io/JH_Life/objectModel/">Object Model</a><br></p><br><p><span style="color: skyblue; font-size: 20px">웹 문서 중 어디서부터 어디까지 찾을 껀데? 수집 범위는 정했니?</span><br></p><blockquote><p>지금부터는 Crawling 기법으로 Hyperlink fetch를 반복해서 페이지 사이 link 구조를 알아내야 한다 <br><br>그 다음 depth를 설정해서 어디까지 crawling 할 것인가를 정하고 focused crawling으로 crawling하는 페이지를 <br><br>한정 할 것인지 아니면 페이지를 넘나들며 끊임없이 확장할 것인지도 정해야 한다 (목적에 맞게) <br><br>이러한 경우를 DFS(Depth First Search)와 BFS(Breadth First Search)라고 한다 <br></p></blockquote><br><p><span style="color: skyblue; font-size: 20px">Crawling해서 많은 url은 확보 했는데 어떤 url에 유용한 정보가 있는지 아니?</span><br></p><blockquote><p>url만으로 정보의 유용성을 판단할 수는 없다 <br><br>따라서 crawling 해서 database에 저장할때 page rank 개념을 활용하여 저장하는 것이 효율적이다 <br><br>page rank개념은 페이지 참조횟수가 많으면 그만큼 영향력 있고, 가치가 있는 데이터를 포함한 페이지라 간주한다 <br><br>결국 page rank가 높은 순으로 url을 분류하고 그 url로 부터 data를 수집 하면 된다</p></blockquote><p><span style="color: rgb(180, 75, 92); font-size: 15px;">단, page rank가 높다고 나한테 필요한 데이터라는 보장은 없다.</span><br><br><span style="color: rgb(180, 75, 92); font-size: 15px;">그래서 데이터 추출후 전처리, 패턴 분석 등 여러가지 처리 후 데이터를 사용해야 한다.</span><br></p><p><a href="#crawling">Crawling 공부하러가기</a></p><br><p><span style="color: skyblue; font-size: 20px">유용한 page url을 알아 냈으니 내가 원하는 data를 수집하자</span><br></p><blockquote><p>scraping</p></blockquote><p><a href="#scraping">Scraping 공부하러가기</a></p><br><hr><h2 id="Data-mining"><a href="#Data-mining" class="headerlink" title="Data mining"></a>Data mining</h2><p>Data mining 출처: <a href="http://www.incodom.kr/Data_mining_%EC%A0%95%EC%9D%98#h_9e737f73b091295d98128515d2729bbb" target="_blank" rel="noopener">incodom</a><br></p><br><h2 id="Crawling-vs-Scraping"><a href="#Crawling-vs-Scraping" class="headerlink" title="Crawling vs Scraping"></a>Crawling vs Scraping</h2><p><img src="https://user-images.githubusercontent.com/33630505/61361477-8548c400-a8bb-11e9-9b09-7b1804aaf054.JPG" alt="crawlerandscraping"></p><p>사진출처: <a href="http://prowebscraping.com/web-scraping-vs-web-crawling/" target="_blank" rel="noopener">prowebscraping</a><br></p><br><p><a id = 'crawling'></a></p><h2 id="Crawling"><a href="#Crawling" class="headerlink" title="Crawling"></a>Crawling</h2><h3 id="BFS-Crawling"><a href="#BFS-Crawling" class="headerlink" title="BFS Crawling"></a>BFS Crawling</h3><blockquote><p>google 박보영 검색 결과 crawling</p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"</span>&#125;  <span class="comment"># 브라우저에서 직접 request보내는 것처럼 흉내내기 위한 header 초기화</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(method, url, param=None, data=None, timeout=<span class="number">1</span>, maxretries=<span class="number">3</span>, headers = headers)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = requests.request(method, url, params = param, data =  data, headers = headers)  <span class="comment"># request요청에 대한 response</span></span><br><span class="line">        resp.raise_for_status() <span class="comment"># 에러 강제하기</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.HTTPError <span class="keyword">as</span> e:    <span class="comment"># 에러 처리</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">500</span> &lt;= e.response.status_code &lt; <span class="number">600</span> <span class="keyword">and</span> maxretries &gt;<span class="number">0</span>):</span><br><span class="line">            print(maxretries)</span><br><span class="line">            time.sleep(timeout)</span><br><span class="line">            resp=download3(method, url, param, data, timeout, maxretries<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">else</span>:          </span><br><span class="line">            print(e.response.status_code)</span><br><span class="line">            print(e.response.reason)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseURL</span><span class="params">(seed)</span>:</span>      <span class="comment"># download함수와 BeautifulSoup을 이용해 URL parsing 하는 함수</span></span><br><span class="line">    html = download(<span class="string">"get"</span>, seed)</span><br><span class="line">    dom = BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [requests.compat.urljoin(seed, _[<span class="string">"href"</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> dom.find_all(<span class="string">"a"</span>)  <span class="keyword">if</span> _.has_attr(<span class="string">"href"</span>) <span class="keyword">and</span> len(_[<span class="string">"href"</span>]) &gt; <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.google.com/search"</span></span><br><span class="line">html = download(<span class="string">"get"</span>, url, param = &#123;<span class="string">"q"</span>:<span class="string">"박보영"</span>&#125;)</span><br><span class="line">dom = BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">queue = list()</span><br><span class="line">queue.extend([_.find_parent()[<span class="string">'href'</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> dom.select(<span class="string">".LC20lb"</span>)]) <span class="comment"># 초기 seed값 추가</span></span><br><span class="line">seen = list()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">    baseURL = queue.pop(<span class="number">0</span>)   <span class="comment"># queue는 선입 선출 방식이기 때문에 index 가장 앞 0을 꺼낸다</span></span><br><span class="line">    seen.append(baseURL)   <span class="comment"># 한번 꺼낸 url은 재방문 하지 않도록 seen list에 추가</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">5</span>)    <span class="comment"># 빈번한 request로 block 당하는 일 방지하기 위해 시간 끌기</span></span><br><span class="line"></span><br><span class="line">    linkList = parseURL(baseURL)  <span class="comment"># parsing한 url list에 추가</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> linkList:  <span class="comment"># 추가된 url을 하나씩 뽑아 queue에 없거나 seen에 없으면 queue에 추가한다</span></span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> queue <span class="keyword">and</span> link <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            queue.append(link)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Queue: &#123;0&#125;, Seen: &#123;1&#125;"</span>.format(len(queue), len(seen)))</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">Queue: <span class="number">862</span>, Seen: <span class="number">1</span></span><br><span class="line">Queue: <span class="number">1291</span>, Seen: <span class="number">2</span></span><br><span class="line">Queue: <span class="number">2259</span>, Seen: <span class="number">3</span></span><br><span class="line">Queue: <span class="number">2381</span>, Seen: <span class="number">4</span></span><br><span class="line">Queue: <span class="number">2416</span>, Seen: <span class="number">5</span></span><br><span class="line">Queue: <span class="number">2426</span>, Seen: <span class="number">6</span></span><br><span class="line">.....</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h3 id="DFS-Crawling-Focused-Crawling"><a href="#DFS-Crawling-Focused-Crawling" class="headerlink" title="DFS Crawling(Focused Crawling)"></a>DFS Crawling(Focused Crawling)</h3><blockquote><p>naver에 박보영 검색 후 블로그 url parsing</p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, download</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkBlog</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.compat.urlparse(url)[<span class="number">1</span>] == <span class="string">"blog.naver.com"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseURL</span><span class="params">(seed)</span>:</span></span><br><span class="line">    html = download.download(<span class="string">"get"</span>, seed)</span><br><span class="line">    dom = download.BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(dom.select(<span class="string">"#mainFrame"</span>)) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    seed = requests.compat.urljoin(seed, dom.select(<span class="string">"#mainFrame"</span>)[<span class="number">0</span>][<span class="string">"src"</span>])</span><br><span class="line"></span><br><span class="line">    html = download.download(<span class="string">"get"</span>, seed)</span><br><span class="line">    dom = download.BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#     print(requests.compat.urljoin(seed, dom.select("#mainFrame")[0]['src']))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [requests.compat.urljoin(seed, _[<span class="string">"href"</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> dom.find_all(<span class="string">"a"</span>)  <span class="keyword">if</span> _.has_attr(<span class="string">"href"</span>)</span><br><span class="line">            <span class="keyword">and</span> len(_[<span class="string">"href"</span>]) &gt; <span class="number">3</span> <span class="keyword">and</span> checkBlog(requests.compat.urljoin(seed, _[<span class="string">'href'</span>]))]</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://search.naver.com/search.naver"</span></span><br><span class="line">html = download.download(<span class="string">"get"</span>, url, param = &#123;<span class="string">"query"</span>:<span class="string">"박보영"</span>&#125;)</span><br><span class="line">dom = download.BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">queue = list()</span><br><span class="line">queue.extend([_[<span class="string">'href'</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> dom.select(<span class="string">"a.sh_blog_title._sp_each_url._sp_each_title"</span>) <span class="keyword">if</span> checkBlog(_[<span class="string">'href'</span>])])</span><br><span class="line">seen = list()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">    baseURL = queue.pop(<span class="number">0</span>)</span><br><span class="line">    seen.append(baseURL)</span><br><span class="line"></span><br><span class="line">    download.time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    linkList = parseURL(baseURL)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> linkList:</span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> queue <span class="keyword">and</span> link <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            queue.append(link)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Queue: &#123;0&#125;, Seen: &#123;1&#125;"</span>.format(len(queue), len(seen)))</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">Queue: <span class="number">17</span>, Seen: <span class="number">1</span></span><br><span class="line">Queue: <span class="number">32</span>, Seen: <span class="number">2</span></span><br><span class="line">Queue: <span class="number">48</span>, Seen: <span class="number">3</span></span><br><span class="line">Queue: <span class="number">47</span>, Seen: <span class="number">4</span></span><br><span class="line">Queue: <span class="number">46</span>, Seen: <span class="number">5</span></span><br><span class="line">Queue: <span class="number">45</span>, Seen: <span class="number">6</span></span><br><span class="line">Queue: <span class="number">44</span>, Seen: <span class="number">7</span></span><br><span class="line">Queue: <span class="number">43</span>, Seen: <span class="number">8</span></span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>crawling 출처: <a href="http://prowebscraping.com/web-scraping-vs-web-crawling/" target="_blank" rel="noopener">prowebscraping</a> &nbsp; <a href="https://www.quora.com/What-the-difference-between-crawling-website-and-counting-link-in-website" target="_blank" rel="noopener">quora</a> &nbsp; <a href="https://twoearth.tistory.com/19" target="_blank" rel="noopener">tistory</a> <br><br>논문: [RCrawler: An R package for parallel web crawling and scraping -Salim Khalil, Mohamed Fakir]  <br></p><br><h3 id="Crawling-한-url-DB에-저장하기"><a href="#Crawling-한-url-DB에-저장하기" class="headerlink" title="Crawling 한 url DB에 저장하기"></a>Crawling 한 url DB에 저장하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3, requests, download</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"bot.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">cur.executescript(<span class="string">'''</span></span><br><span class="line"><span class="string">    DROP TABLE IF EXISTS table1;</span></span><br><span class="line"><span class="string">    CREATE TABLE table1(</span></span><br><span class="line"><span class="string">        id INTEGER PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        table2_id INTEGER NOT NULL,</span></span><br><span class="line"><span class="string">        path TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        param TEXT,</span></span><br><span class="line"><span class="string">        depth INTEGER NOT NULL,</span></span><br><span class="line"><span class="string">        inbound INTEGER NOT NULL,</span></span><br><span class="line"><span class="string">        seen BOOLEAN DEFAULT FALSE NOT NULL,</span></span><br><span class="line"><span class="string">        date TIMESTAMP DEFAUlT CURRENT_TIMESTAMP NOT NULL</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">    DROP TABLE IF EXISTS table2;</span></span><br><span class="line"><span class="string">    CREATE TABLE table2(</span></span><br><span class="line"><span class="string">        id INTEGER PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        netloc TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.google.com/search"</span></span><br><span class="line">html = download.download(<span class="string">"get"</span>, url, param = &#123;<span class="string">"q"</span>: <span class="string">"박보영"</span>&#125;)</span><br><span class="line">dom = download.BeautifulSoup(html.text, <span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseURL</span><span class="params">(seed)</span>:</span></span><br><span class="line">    html = download.download(<span class="string">"get"</span>, seed)</span><br><span class="line">    dom = download.BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [requests.compat.urljoin(seed, _[<span class="string">"href"</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> dom.find_all(<span class="string">"a"</span>)  <span class="keyword">if</span> _.has_attr(<span class="string">"href"</span>)</span><br><span class="line">            <span class="keyword">and</span> len(_[<span class="string">"href"</span>]) &gt; <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> [_.find_parent()[<span class="string">"href"</span>]</span><br><span class="line">             <span class="keyword">for</span> _ <span class="keyword">in</span> dom.select(<span class="string">".LC20lb"</span>)]:</span><br><span class="line">    _urlparse = requests.compat.urlparse(href)</span><br><span class="line">    netloc = <span class="string">"://"</span>.join(_urlparse[:<span class="number">2</span>])</span><br><span class="line">    cur.execute(<span class="string">"SELECT id FROM table2 WHERE netloc=? LIMIT 0,1"</span>, [netloc]) <span class="comment">#netloc을 시퀀스로 만들어서 넘겨줘야함</span></span><br><span class="line"></span><br><span class="line">    netlocID = cur.fetchone()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> netlocID:</span><br><span class="line">        cur.execute(<span class="string">"INSERT INTO table2(netloc) VALUES(?)"</span>, [netloc])</span><br><span class="line"></span><br><span class="line">        con.commit()</span><br><span class="line"></span><br><span class="line">        cur.execute(<span class="string">"SELECT id FROM table2 WHERE netloc=? LIMIT 0,1"</span>, [netloc])</span><br><span class="line"></span><br><span class="line">        netlocID = cur.fetchone()</span><br><span class="line"></span><br><span class="line">    cur.execute(<span class="string">"INSERT INTO table1(table2_id, path, param, depth, inbound) VALUES(?, ?, ?, ?, ?)"</span>,[netlocID[<span class="number">0</span>], _urlparse[<span class="number">2</span>], _urlparse[<span class="number">4</span>], <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    con.commit()</span><br><span class="line">    print(cur.lastrowid, netlocID)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cur.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">        SELECT table1.id, table2.netloc, table1.path, table1.param, table1.depth, table2.id</span></span><br><span class="line"><span class="string">        FROM table1</span></span><br><span class="line"><span class="string">        JOIN table2</span></span><br><span class="line"><span class="string">            ON table1.table2_id=table2.id</span></span><br><span class="line"><span class="string">        WHERE table1.seen = FALSE and table1.depth &lt; 3</span></span><br><span class="line"><span class="string">        ORDER BY table1.date ASC</span></span><br><span class="line"><span class="string">        LIMIT 0, 1;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    seed = cur.fetchone()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> seed <span class="keyword">or</span> i &gt; <span class="number">1000</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    cur .execute(<span class="string">'''</span></span><br><span class="line"><span class="string">        UPDATE table1</span></span><br><span class="line"><span class="string">        SET seen = TRUE</span></span><br><span class="line"><span class="string">        WHERE id = ?</span></span><br><span class="line"><span class="string">    '''</span>, [seed[<span class="number">0</span>]])</span><br><span class="line">    con.commit()</span><br><span class="line"></span><br><span class="line">    baseURL= <span class="string">"&#123;0&#125;&#123;1&#125;?&#123;2&#125;"</span>.format(seed[<span class="number">1</span>],seed[<span class="number">2</span>],seed[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> parseURL(baseURL):</span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> [_.find_parent()[<span class="string">"href"</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> dom.select(<span class="string">".LC20lb"</span>)]:</span><br><span class="line">            _urlparse = requests.compat.urlparse(href)</span><br><span class="line">            netloc = <span class="string">"://"</span>.join(_urlparse[:<span class="number">2</span>])</span><br><span class="line">            cur.execute(<span class="string">"SELECT id FROM table2 WHERE netloc=? LIMIT 0,1"</span>, [netloc]) <span class="comment">#netloc을 시퀀스로 만들어서 넘겨줘야함</span></span><br><span class="line"></span><br><span class="line">            netlocID = cur.fetchone()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> netlocID:</span><br><span class="line">                cur.execute(<span class="string">"INSERT INTO table2(netloc) VALUES(?)"</span>, [netloc])</span><br><span class="line"></span><br><span class="line">                con.commit()</span><br><span class="line"></span><br><span class="line">                cur.execute(<span class="string">"SELECT id FROM table2 WHERE netloc=? LIMIT 0,1"</span>, [netloc])</span><br><span class="line"></span><br><span class="line">                netlocID = cur.fetchone()</span><br><span class="line"></span><br><span class="line">            cur.execute(<span class="string">"INSERT INTO table1(table2_id, path, param, depth, inbound) VALUES(?, ?, ?, ?, ?)"</span>,[netlocID[<span class="number">0</span>], _urlparse[<span class="number">2</span>], _urlparse[<span class="number">4</span>], seed[<span class="number">4</span>]+<span class="number">1</span>, seed[<span class="number">5</span>]])</span><br><span class="line">            con.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#     break</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/61233463-95ea2480-a76b-11e9-9fc1-c8a5e1ff520a.JPG" alt="sequence"><br><img src="https://user-images.githubusercontent.com/33630505/61232837-2de70e80-a76a-11e9-8571-9d2fcf5d90a9.JPG" alt="table1"><br><img src="https://user-images.githubusercontent.com/33630505/61232839-2e7fa500-a76a-11e9-8224-bfdb39180664.JPG" alt="table2"></p><p><a id = "scraping"></a></p><h2 id="Scraping"><a href="#Scraping" class="headerlink" title="Scraping"></a>Scraping</h2><blockquote><p>Crawling한 url로 부터 내가 원하는 데이터를 수집하는 것을 말한다</p></blockquote><br><h3 id="Naver-news-본문-scraping-예제-Dynamic-HTML-X"><a href="#Naver-news-본문-scraping-예제-Dynamic-HTML-X" class="headerlink" title="Naver news 본문 scraping 예제 (Dynamic HTML X)"></a>Naver news 본문 scraping 예제 (Dynamic HTML X)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> download</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(<span class="string">"크롬드라이버 경로"</span>)</span><br><span class="line">driver.get(<span class="string">"https://news.naver.com/"</span>)</span><br><span class="line"></span><br><span class="line">dom = BeautifulSoup(driver.page_source, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># crawling으로 url 확보 했다고 가정</span></span><br><span class="line">urls=[x[<span class="string">'href'</span>] <span class="keyword">for</span> x <span class="keyword">in</span> dom.select(<span class="string">"#main_content a"</span>) <span class="keyword">if</span> len(x[<span class="string">'href'</span>]) &gt; <span class="number">7</span> <span class="keyword">and</span> <span class="string">'read'</span> <span class="keyword">in</span> x[<span class="string">'href'</span>]][<span class="number">7</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseContent</span><span class="params">(url)</span>:</span>   <span class="comment"># crawling한 url을 인자로 전달하면 제목, 본문내용 parsing</span></span><br><span class="line">    html = download.download(<span class="string">"get"</span>, url)</span><br><span class="line">    dom = download.BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"title"</span>: dom.select_one(<span class="string">"#articleTitle"</span>).text.strip(),</span><br><span class="line">            <span class="string">"body"</span>: dom.select_one(<span class="string">"#articleBodyContents"</span>).text.strip()</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">contents = list()</span><br><span class="line"><span class="keyword">while</span> urls:                <span class="comment"># urls안에 있는 url이 없을때 까지 계속 parsing</span></span><br><span class="line">    baseURL = urls.pop(<span class="number">0</span>)</span><br><span class="line">    contents.append(parseContent(baseURL))        </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">con = sqlite3.connect(<span class="string">"news.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"""</span></span><br><span class="line"><span class="string">    CREATE TABLE news(</span></span><br><span class="line"><span class="string">        title TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        content TEXT NOT NULL</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> contents:     <span class="comment"># parsing한 data DB에 저장하기</span></span><br><span class="line">    content=contents.pop(<span class="number">0</span>)</span><br><span class="line">    cur.execute(<span class="string">"""</span></span><br><span class="line"><span class="string">        INSERT INTO news</span></span><br><span class="line"><span class="string">        (title, content)</span></span><br><span class="line"><span class="string">        VALUES(?, ?)</span></span><br><span class="line"><span class="string">    """</span>, [content[<span class="string">'title'</span>], content[<span class="string">'body'</span>]])</span><br><span class="line">    con.commit()</span><br></pre></td></tr></table></figure><br><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><blockquote><p>Web Browser Automation</p></blockquote><p><strong>단점</strong> page rendering중에는 dom객체에 접근하지 못하고 에러가 날 수 있다. 그래서 time sleep으로 시간을 부여하여 에러 발생 가능성을 줄이고 에러 핸들링이 필요하다. 결국 selenium을 활용하면 오히려 시간이 오래걸릴 수 있다.<br>{: .notice}</p><br><h3 id="Dynamic-HTML-Scraping-예제"><a href="#Dynamic-HTML-Scraping-예제" class="headerlink" title="Dynamic HTML Scraping 예제"></a>Dynamic HTML Scraping 예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(<span class="string">"chromedriver.exe 경로"</span>)  <span class="comment"># driver를 생성하면 chrome 브라우저 창 생성</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">html_parser</span><span class="params">(url)</span>:</span></span><br><span class="line">    driver.get(url)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    html = driver.page_source</span><br><span class="line">    dom = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    resp=dom.select(<span class="string">'#main'</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(url, country)</span>:</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    inputTag = driver.find_element_by_css_selector(<span class="string">"#search_term"</span>)</span><br><span class="line">    inputTag.send_keys(country)</span><br><span class="line">    driver.find_element_by_css_selector(<span class="string">"#search"</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    html = driver.page_source</span><br><span class="line">    dom = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [requests.compat.urljoin(url, _[<span class="string">'href'</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> dom.select(<span class="string">"#results a"</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nation = search(<span class="string">"http://example.webscraping.com/places/default/search"</span>, <span class="string">"korea"</span>)</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">while</span> nation:</span><br><span class="line">    baseURL = nation.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    dom=html_parser(baseURL)</span><br><span class="line">    result.append(dom[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">National Flag:</span><br><span class="line">Area: <span class="number">120</span>,<span class="number">540</span> square kilometres</span><br><span class="line">Population: <span class="number">22</span>,<span class="number">912</span>,<span class="number">177</span></span><br><span class="line">Iso: KP</span><br><span class="line">Country: North Korea</span><br><span class="line">Capital: Pyongyang</span><br><span class="line">Continent: AS</span><br><span class="line">Tld: .kp</span><br><span class="line">Currency Code: KPW</span><br><span class="line">Currency Name: Won</span><br><span class="line">Phone: <span class="number">850</span></span><br><span class="line">Postal Code Format: <span class="comment">###-###</span></span><br><span class="line">Postal Code Regex: ^(\d&#123;<span class="number">6</span>&#125;)$</span><br><span class="line">Languages: ko-KP</span><br><span class="line">Neighbours: CN KR RU</span><br><span class="line">Edit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">National Flag:</span><br><span class="line">Area: <span class="number">98</span>,<span class="number">480</span> square kilometres</span><br><span class="line">Population: <span class="number">48</span>,<span class="number">422</span>,<span class="number">644</span></span><br><span class="line">Iso: KR</span><br><span class="line">Country: South Korea</span><br><span class="line">Capital: Seoul</span><br><span class="line">Continent: AS</span><br><span class="line">Tld: .kr</span><br><span class="line">Currency Code: KRW</span><br><span class="line">Currency Name: Won</span><br><span class="line">Phone: <span class="number">82</span></span><br><span class="line">Postal Code Format: SEOUL <span class="comment">###-###</span></span><br><span class="line">Postal Code Regex: ^(?:SEOUL)*(\d&#123;6&#125;)$</span><br><span class="line">Languages: ko-KR,en</span><br><span class="line">Neighbours: KP</span><br><span class="line">Edit</span><br><span class="line"></span><br><span class="line">driver.close() <span class="comment"># 브라우저 창 닫기</span></span><br></pre></td></tr></table></figure><br><h2 id="Page-Rank"><a href="#Page-Rank" class="headerlink" title="Page Rank"></a>Page Rank</h2><p>Page Rank 참고: <a href="https://sungmooncho.com/2012/08/26/pagerank/" target="_blank" rel="noopener">sungmooncho</a><br></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data mining </tag>
            
            <tag> crawling </tag>
            
            <tag> scraping </tag>
            
            <tag> page rank </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object Model</title>
      <link href="/2019/07/13/objectModel/"/>
      <url>/2019/07/13/objectModel/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-Model"><a href="#Object-Model" class="headerlink" title="Object Model"></a>Object Model</h1><blockquote><p>웹 브라우저의 구성요소를 객체화시켜 객체처럼 사용할 수 있도록 하는 것 <br><br>브라우저에 렌더링되는 HTML문서는 정적인 문서인데, 정적인 요소를 동적으로 제어하기 위한 객체화 방법<br><br>javscript로 제어할 수 있는 객체 형태로 만들어 준다</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/61168962-0be66400-a591-11e9-9ad3-ced452f00481.JPG" alt="window"><br><br></p><p><span style="color: skyblue; font-size: 30px">Window</span>는 <strong>전역 객체</strong>이면서, 모든 객체가 소속된 <strong>객체</strong>(최상위 객체?)<br><br>Document, navigator, object 등은 window의 Property이면서 각각 객체로서 역할을 한다<br><br></p><p>object model 출처: <a href="https://chrismare.tistory.com/28" target="_blank" rel="noopener">tistory1</a>, &nbsp; <a href="https://bravesuccess.tistory.com/25" target="_blank" rel="noopener">tistory2</a>, &nbsp; <a href="https://www.youtube.com/watch?v=bJg4ywnaZ6Q&t=26s" target="_blank" rel="noopener">youtube</a><br></p><br><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><h3 id="전역-객체"><a href="#전역-객체" class="headerlink" title="전역 객체"></a>전역 객체</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    a = 1;    # window 객체의 property, 전역변수, 함수에 소속되지 않은 변수</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> b = <span class="number">2</span>;</span></span><br><span class="line">    alert('Hello world');        # window 객체의 메소드</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">'Hello world'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><blockquote><p>Document 객체는 웹 페이지 그 자체를 의미 <br><br>웹 페이지에 존재하는 HTML요소에 접근하고자 할 때는 DOM으로 만들어야 한다</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/61169326-dba1c400-a596-11e9-8093-10a90bd40aac.JPG" alt="document"><br><br></p><h3 id="Document-메소드"><a href="#Document-메소드" class="headerlink" title="Document 메소드"></a>Document 메소드</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. HTML 요소 선택</span><br><span class="line">2. HTML 요소 생성</span><br><span class="line">3. HTML 이벤트 핸들러 추가</span><br><span class="line">4. HTML 객체 선택</span><br></pre></td></tr></table></figure><br><h4 id="HTML-요소-선택"><a href="#HTML-요소-선택" class="headerlink" title="HTML 요소 선택"></a>HTML 요소 선택</h4><p><img src="https://user-images.githubusercontent.com/33630505/61169268-2f5fdd80-a596-11e9-81cb-19fa54990bbb.JPG" alt="select"><br><br></p><h4 id="HTML-요소-생성"><a href="#HTML-요소-생성" class="headerlink" title="HTML 요소 생성"></a>HTML 요소 생성</h4><p><img src="https://user-images.githubusercontent.com/33630505/61169273-3be43600-a596-11e9-949a-e016cd992c9d.JPG" alt="create"><br><br></p><h4 id="HTML-이벤트-핸들러-추가"><a href="#HTML-이벤트-핸들러-추가" class="headerlink" title="HTML 이벤트 핸들러 추가"></a>HTML 이벤트 핸들러 추가</h4><p><img src="https://user-images.githubusercontent.com/33630505/61169274-3be43600-a596-11e9-9a60-dca3e5084fe5.JPG" alt="handler"><br><br></p><h4 id="HTML-객체-선택"><a href="#HTML-객체-선택" class="headerlink" title="HTML 객체 선택"></a>HTML 객체 선택</h4><p><img src="https://user-images.githubusercontent.com/33630505/61169275-3c7ccc80-a596-11e9-8822-2758a0d1db71.JPG" alt="objectselect"><br><br></p><p>사진 출처: <a href="http://tcpschool.com/javascript/js_dom_document" target="_blank" rel="noopener">tcpschool</a><br></p><h2 id="Property-vs-Attribute-vs-Variable"><a href="#Property-vs-Attribute-vs-Variable" class="headerlink" title="Property vs Attribute vs Variable"></a>Property vs Attribute vs Variable</h2><h3 id="자바스크립트에서-Property와-Variable"><a href="#자바스크립트에서-Property와-Variable" class="headerlink" title="자바스크립트에서 Property와 Variable"></a>자바스크립트에서 Property와 Variable</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Property : 인스턴스로부터 만들어진 변수, 인스턴스에 종속된 변수</span><br><span class="line"></span><br><span class="line">Variable : 인스턴스와 상관없이 만들어진 변수</span><br></pre></td></tr></table></figure><h3 id="예제로-알아보자"><a href="#예제로-알아보자" class="headerlink" title="예제로 알아보자"></a>예제로 알아보자</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> setMyName = <span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = value;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> setMyName2 = <span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> name = value;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var setName = new setMyName("jihyuk");  # setName 인스턴스</span><br><span class="line">      var setName2 = new setMyName2("jihyuk2"); # setName2 인스턴스</span><br><span class="line"></span><br><span class="line">      console.log(setName);         # Property를 포함함한 객체</span><br><span class="line">      console.log(typeof(setName)); # setName 인스턴스는 object를 반환한다</span><br><span class="line"></span><br><span class="line">      console.log(setName.name);         # Property 값 출력</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(setName.name));</span></span><br><span class="line"></span><br><span class="line">      console.log(setName2);          # Property를 포함하지 않은 객체</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(setName2));  </span></span><br><span class="line"></span><br><span class="line">      console.log(setName2.name);         # Property가 없다</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(setName2.name));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/61168413-e05f7b80-a588-11e9-8669-46914714457f.JPG" alt="consolelog"><br><br><br><br></p><h3 id="Html과-Dom에서-Attribute와-Property"><a href="#Html과-Dom에서-Attribute와-Property" class="headerlink" title="Html과 Dom에서 Attribute와 Property"></a>Html과 Dom에서 Attribute와 Property</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Attribute: HTML관점에서 선택자</span><br><span class="line"></span><br><span class="line">Property: DOM관점에서 선택자</span><br></pre></td></tr></table></figure><br><h3 id="예제로-알아보자-1"><a href="#예제로-알아보자-1" class="headerlink" title="예제로 알아보자"></a>예제로 알아보자</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># HTML 관점</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>ji hyuk<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 태그 div는 Element</span><br><span class="line"># class는 attribute</span><br><span class="line"># name은 값</span><br><span class="line"># ji hyuk은 data</span><br><span class="line"></span><br><span class="line"># DOM 관점</span><br><span class="line"></span><br><span class="line"># 태그 div는 Element</span><br><span class="line"># class는 property</span><br><span class="line"># name은 값</span><br><span class="line"># ji hyuk은 data</span><br></pre></td></tr></table></figure><hr><p>Attribute vs Property: <a href="https://medium.com/hexlant/attribute-%EC%99%80-property-%EC%9D%98-%EC%B0%A8%EC%9D%B4-c6f1c91ba91" target="_blank" rel="noopener">Medium</a><br><br>Variable vs Property: <a href="http://blog.kazikai.net/?p=18" target="_blank" rel="noopener">blog</a><br></p><br><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><blockquote><p>Document Object Model의 약자로 객체 지향 모델로써 구조화된 문서를 표현하는 형식이다. <br><br>Html, xml 같은 문서를 객체형태로 바꾸어 객체로써 이용하기 위한 형태이다. <br><br>DOM은 플랫폼/언어 중립적으로 구조화된 문서를 표현하는 W3C의 공식 표준이기 때문에 문서를 객체로써 쓴다면 DOM 형식을 사용해야한다. <br><br>DOM은 HTML문서의 모든 요소에 접근하는 방법을 정의한 API이기도 하다.<br><br>DOM은 넓은 의미로 웹 브라우저가 HTML 페이지를 인식하는 방식으로 볼 수 있고<br><br>좁은 의미로는 document 객체와 관련된 객체의 집합으로 볼 수 있다.</p></blockquote><h2 id="등장-배경"><a href="#등장-배경" class="headerlink" title="등장 배경"></a>등장 배경</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOM은 HTML 문서의 요소를 제어하기 위해 웹 브라우저에서 처음 지원되었다.  </span><br><span class="line">브라우저가 다양해지면서 브라우저 사이에 DOM 구현이 호환되지 않음에 따라,</span><br><span class="line">W3C에서 DOM 표준 규격을 작성하게 되었다.</span><br></pre></td></tr></table></figure><p>DOM 출처: <a href="https://na27.tistory.com/228" target="_blank" rel="noopener">tistory</a>, &nbsp; <a href="https://ko.wikipedia.org/wiki/%EB%AC%B8%EC%84%9C_%EA%B0%9D%EC%B2%B4_%EB%AA%A8%EB%8D%B8" target="_blank" rel="noopener">wiki</a><br></p><h1 id="CCSOM"><a href="#CCSOM" class="headerlink" title="CCSOM"></a>CCSOM</h1>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Object Model </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object model </tag>
            
            <tag> dom </tag>
            
            <tag> bom </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML &amp; JSON</title>
      <link href="/2019/07/10/xmlandjson/"/>
      <url>/2019/07/10/xmlandjson/</url>
      
        <content type="html"><![CDATA[<h1 id="Markup-Language"><a href="#Markup-Language" class="headerlink" title="Markup Language"></a>Markup Language</h1><blockquote><p>태그 등을 이용하여 문서나 데이터의 구조를 명기하는 언어의 한가지 이다. <br></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">마크업 언어를 사용하여 데이터를 기술하면</span><br><span class="line">컴퓨터도 이해하고 사람도 이해할 수 있는 방식으로 문서를 정의하고 데이터를 구조화 할 수 있다.</span><br><span class="line">데이터를 문서화, 구조화 할 뿐만아니라 그 문서를 컴퓨터 화면에 보여줄 수도 있다.</span><br></pre></td></tr></table></figure><br><hr><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="XML-이란"><a href="#XML-이란" class="headerlink" title="XML 이란?"></a>XML 이란?</h2><blockquote><p>Extensible Markup Language의 약자로 W3C에서 개발된 다목적 마크업 언어이다. <br><br>XML은 데이터를 전달하고 저장하는 목적으로 만들어졌다. <br></p></blockquote><br><h2 id="XML-등장-배경"><a href="#XML-등장-배경" class="headerlink" title="XML 등장 배경"></a>XML 등장 배경</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">정부나 항공우주 기업의 대규모 계획 사업에서 기계 판독형 문서를 공유할 목적으로</span><br><span class="line">SGML(Standard Generalized Markup Language)라는 마크업 언어가 있었는데,</span><br><span class="line">사용하기에 너무 복잡하고 HTML의 한계를 극복하기 위해 XML이 탄생했다.</span><br></pre></td></tr></table></figure><br><h2 id="XML의-특징"><a href="#XML의-특징" class="headerlink" title="XML의 특징"></a>XML의 특징</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 데이터의 표현이 자유롭다</span><br><span class="line">- XML은 데이터에 의미를 부여하는 메타데이터를 기술 할 수 있다</span><br><span class="line">2. 데이터의 확장성이 뛰어나다</span><br><span class="line">3. 유효성 체크를 한다는 점이 엄청난 장점이다.</span><br><span class="line">- Valid XML과 Well formed XML는 서로 다르다</span><br><span class="line">- ex) &lt;?xml ~&gt;으로 시작하면 XML문서로서 가능하지만 가능하다고 해서</span><br><span class="line">- 모두 well formed xml은 아닐 수 있다 (well formed 조건에 부합하지 않는 것이 하나라도 있을때)</span><br><span class="line">4. 텍스트(Unicode) 기반으로 작성되어 읽기 쉽다</span><br><span class="line">5. Well-formed Documents</span><br><span class="line">- root element를 가져야한다</span><br><span class="line">- closing tag가 있어야 한다</span><br><span class="line">- tag는 대소문자에 민감하다</span><br><span class="line">- ex) &lt;body&gt;body&lt;&#x2F;Body&gt; (X) &lt;body&gt;body&lt;&#x2F;body&gt; (O)</span><br><span class="line">- tag는 적절하게 감싸야 한다</span><br><span class="line">- ex) html에서는 tag의 시작점과 끝점이 명확하지 않아도 상관없지만</span><br><span class="line">- xml은 정확하게 명시해야 한다. &lt;b&gt;&lt;i&gt;Hello&lt;&#x2F;b&gt;&lt;&#x2F;i&gt; &#x3D;&gt; HTML에서는 가능 , XML에서는 불가능</span><br><span class="line">- attribute 값은 쌍 따옴표로 감싸야 한다</span><br><span class="line">- ex) &lt;note date&#x3D; 19&#x2F;7&#x2F;10&gt;&lt;&#x2F;note&gt; (X) &lt;note date&#x3D; &quot;19&#x2F;7&#x2F;10&quot;&gt;&lt;&#x2F;note&gt; (O)</span><br></pre></td></tr></table></figure><br><h2 id="HTML-vs-XML"><a href="#HTML-vs-XML" class="headerlink" title="HTML vs XML"></a>HTML vs XML</h2><p><strong>HTML은 데이터를 표현하는 것에 초점을 두고 XML은 데이터를 구조화 하고 전달하는 것에 초점이 맞춰저 있다.</strong></p><br><h2 id="XML-구성-요소"><a href="#XML-구성-요소" class="headerlink" title="XML 구성 요소"></a>XML 구성 요소</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. XML declaration</span><br><span class="line">2. DTD(Document type declaration)</span><br><span class="line">- DTD를 사용하면 어떤 문서의 종류인지 확인이 가능하고</span><br><span class="line">- 해당 문서의 규칙을 따를 수 있도록 유효성 검사를 작동하게 된다.</span><br><span class="line">3. Root Element start tag, end tag</span><br><span class="line">4. Comment</span><br><span class="line">5. Elements</span><br><span class="line">6. Characters</span><br><span class="line">7. Attributes</span><br><span class="line">8. Entity</span><br><span class="line">9. XML Schema</span><br><span class="line">- namespaces, data types 지원</span><br><span class="line">- XML 문법 준수</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60965241-51681e80-a350-11e9-8b7b-ac25b974d4a3.JPG" alt="xml"></p><br><h3 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"note"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span>     </span><br><span class="line"><span class="comment">&lt;!-- xs는 namespace --&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="XML-Tree"><a href="#XML-Tree" class="headerlink" title="XML Tree"></a>XML Tree</h3><p><img src="https://user-images.githubusercontent.com/33630505/60965240-51681e80-a350-11e9-8555-bc1646001a49.png" alt="xmltree"></p><h2 id="XML-vs-LXML"><a href="#XML-vs-LXML" class="headerlink" title="XML vs LXML"></a>XML vs LXML</h2><h3 id="LXML"><a href="#LXML" class="headerlink" title="LXML"></a>LXML</h3><blockquote><p>XML보다 속도가 빠르고 자주 쓰는 방법</p></blockquote><br><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">bookStore = etree.Element(<span class="string">"bookstore"</span>)</span><br><span class="line"></span><br><span class="line">book1 = etree.SubElement(bookStore, <span class="string">"book"</span>)</span><br><span class="line">book2 = etree.SubElement(bookStore, <span class="string">"book"</span>, attrib=&#123;<span class="string">"category"</span>:<span class="string">"children"</span>&#125;)</span><br><span class="line"></span><br><span class="line">book1.attrib[<span class="string">"category"</span>] = <span class="string">"cooking"</span></span><br><span class="line"></span><br><span class="line">title1 = etree.Element(<span class="string">"title"</span>, lang=<span class="string">"en"</span>)</span><br><span class="line">title1.text = <span class="string">"Everyday Italian"</span></span><br><span class="line">book1.append(title1)</span><br><span class="line"></span><br><span class="line">etree.SubElement(book1, <span class="string">"author"</span>).text = <span class="string">"Giada De Lausadlf"</span></span><br><span class="line">etree.SubElement(book1, <span class="string">"year"</span>).text = <span class="string">"2003"</span></span><br><span class="line">etree.SubElement(book1, <span class="string">"price"</span>).text = <span class="string">"40.3"</span></span><br><span class="line"></span><br><span class="line">title2 = etree.Element(<span class="string">"title"</span>)</span><br><span class="line">title2.set(<span class="string">"lang"</span>, title1.get(<span class="string">"lang"</span>))</span><br><span class="line">title2.text = <span class="string">"Harry Potter"</span></span><br><span class="line">book2.append(title2)</span><br><span class="line"></span><br><span class="line">etree.SubElement(book2, <span class="string">"author"</span>).text = <span class="string">"Giada De Lausadlf"</span></span><br><span class="line">etree.SubElement(book2, <span class="string">"year"</span>).text = <span class="string">"2003"</span></span><br><span class="line">etree.SubElement(book2, <span class="string">"price"</span>).text = <span class="string">"40.3"</span></span><br><span class="line"></span><br><span class="line">xmlBytes = etree.tostring(bookStore, encoding=<span class="string">"UTF-8"</span>, pretty_print=<span class="literal">True</span>, xml_declaration=<span class="literal">True</span>)</span><br><span class="line">xmlstr = etree.tounicode(bookStore, pretty_print=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">etree.dump(bookStore)</span><br><span class="line">:</span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line">  &lt;book category=<span class="string">"cooking"</span>&gt;</span><br><span class="line">    &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt;</span><br><span class="line">    &lt;author&gt;Giada De Lausadlf&lt;/author&gt;</span><br><span class="line">    &lt;year&gt;2003&lt;/year&gt;</span><br><span class="line">    &lt;price&gt;40.3&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book category=<span class="string">"children"</span>&gt;</span><br><span class="line">    &lt;title lang="en"&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">    &lt;author&gt;Giada De Lausadlf&lt;/author&gt;</span><br><span class="line">    &lt;year&gt;2003&lt;/year&gt;</span><br><span class="line">    &lt;price&gt;40.3&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">&lt;/bookstore&gt;</span><br><span class="line"></span><br><span class="line">xmlRoot = xmlTree.getroot()</span><br><span class="line"><span class="keyword">for</span> childNode <span class="keyword">in</span> xmlRoot:</span><br><span class="line">    print(childNode.tag, childNode.attrib)</span><br><span class="line">:</span><br><span class="line">book &#123;<span class="string">'category'</span>: <span class="string">'cooking'</span>&#125;</span><br><span class="line">book &#123;<span class="string">'category'</span>: <span class="string">'children'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="예제-Write-Parse"><a href="#예제-Write-Parse" class="headerlink" title="예제 (Write, Parse)"></a>예제 (Write, Parse)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookStore는 위 예제와 동일</span></span><br><span class="line">xml = etree.XML(etree.tostring(bookStore))</span><br><span class="line">xmlTree = etree.ElementTree(xml)</span><br><span class="line">xmlRoot = xmlTree.getroot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># xmlTree book_tree, book_root 이름의 xml 파일을 생성한다</span></span><br><span class="line">xmlTree.write(<span class="string">"book_tree.xml"</span>)</span><br><span class="line">etree.ElementTree(xmlRoot).write(<span class="string">"book_root.xml"</span>)</span><br><span class="line"></span><br><span class="line">getxmlTree = etree.parse(<span class="string">"book_tree.xml"</span>)</span><br><span class="line">xmlRoot = getxmlTree.getroot()</span><br><span class="line"></span><br><span class="line">etree.dump(xmlRoot)</span><br><span class="line">:</span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line">  &lt;book category=<span class="string">"cooking"</span>&gt;</span><br><span class="line">    &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt;</span><br><span class="line">    &lt;author&gt;Giada De Lausadlf&lt;/author&gt;</span><br><span class="line">    &lt;year&gt;2003&lt;/year&gt;</span><br><span class="line">    &lt;price&gt;40.3&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book category=<span class="string">"children"</span>&gt;</span><br><span class="line">    &lt;title lang="en"&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">    &lt;author&gt;Giada De Lausadlf&lt;/author&gt;</span><br><span class="line">    &lt;year&gt;2003&lt;/year&gt;</span><br><span class="line">    &lt;price&gt;40.3&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure><br><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="JSON-이란"><a href="#JSON-이란" class="headerlink" title="JSON 이란?"></a>JSON 이란?</h2><blockquote><p>JavaScript Object Notation의 약자</p></blockquote><br><h2 id="JSON-등장"><a href="#JSON-등장" class="headerlink" title="JSON 등장"></a>JSON 등장</h2><blockquote><p>XML의 대안으로서 좀 더 쉽게 데이터를 교환하고 저장하기 위해 고안되었다. <br><br>XML보다 가볍고 사용하기 편하다.</p></blockquote><br><h2 id="왜-json을-쓰는가"><a href="#왜-json을-쓰는가" class="headerlink" title="왜 json을 쓰는가?"></a>왜 json을 쓰는가?</h2><br><h2 id="JSON의-특징"><a href="#JSON의-특징" class="headerlink" title="JSON의 특징"></a>JSON의 특징</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. javascript 객체 표기법을 따른다</span><br><span class="line">2. 사람과 기계 모두 읽기 편하다</span><br><span class="line">- XML보다 가독성이 뛰어나다</span><br><span class="line">3. 프로그래밍 언어와 운영체제에 독립적이다</span><br><span class="line">- 언어에 관계없이 통일된 데이터를 주고받을 수 있다</span><br><span class="line">4. 가볍다</span><br><span class="line">- XML보다 메모리가 효율적이다</span><br></pre></td></tr></table></figure><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 문법 오류에 민감하다</span><br><span class="line">- 콤마가 누락되거나 중괄호가 잘못 닫히는 등 구두점에서 오타가 나면 전체 JSON 파일이 망가진다</span><br><span class="line">2. 주석을 지원하지 않는다</span><br><span class="line">3. 데이터 타입을 강제할 수 없다 (JSON Schema로 보완은 가능하지만 데이터 스스로 타입을 기술할 수 없다)</span><br></pre></td></tr></table></figure><br><h2 id="XML-vs-JSON"><a href="#XML-vs-JSON" class="headerlink" title="XML vs JSON"></a>XML vs JSON</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. JSON은 종료 태그를 사용하지 않는다</span><br><span class="line">2. JSON의 구문은 XML 구문보다 짧다</span><br><span class="line">3. XML은 배열을 사용할 수 없지만, JSON은 배열을 사용할 수 있다</span><br><span class="line">4. XML은 XML 파서로 파싱되며, JSON은 자바스크립트 표준 함수인 eval() 함수로 파싱된다</span><br><span class="line">5. XML 문서는 XML DOM을 이용하여 문서에 접근하지만 JSON은 문자열을 전송 받은 후에</span><br><span class="line">   해당 문자열을 바로 파싱하므로, XML보다 더 빠른 처리 속도를 보여준다</span><br><span class="line">6. JSON은 전송받은 데이터의 무결성을 사용자가 직접 검증해야 하지만 XML은</span><br><span class="line">   스키마를 사용하여 무결성을 검증할 수 있다(JSON Schema로 보완 가능하긴 함)</span><br></pre></td></tr></table></figure><p>출처: <a href="http://tcpschool.com/json/json_intro_xml" target="_blank" rel="noopener">tcpschool</a><br></p><br><h2 id="JSON-구성-요소"><a href="#JSON-구성-요소" class="headerlink" title="JSON 구성 요소"></a>JSON 구성 요소</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 데이터는 이름과 값의 쌍으로 이루어진다</span><br><span class="line">2. Array (대괄호 [])</span><br><span class="line">3. Object (중괄호 &#123;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60967707-444e2e00-a356-11e9-968d-dc80f8e9ecb3.JPG" alt="jsonstructure"></p><br><h2 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Number</span><br><span class="line">2. String</span><br><span class="line">3. Boolean</span><br><span class="line">4. Object</span><br><span class="line">5. Array</span><br><span class="line">6. Null</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60967709-444e2e00-a356-11e9-9fc4-c7d6bd34f645.JPG" alt="datatype"></p><br><h2 id="Stringify-amp-Parse"><a href="#Stringify-amp-Parse" class="headerlink" title="Stringify &amp; Parse"></a>Stringify &amp; Parse</h2><blockquote><p>Stringify는 JSON파일을 Serialize하고 Parse는 Deserialize한다 <br><br>Stringify는 json객체를 string객체로 변환하고 parse는 string객체를 json 객체로 변환한다</p></blockquote><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> obj = &#123;name: <span class="string">"jh"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"car"</span>: <span class="literal">true</span>&#125;;</span></span><br><span class="line"><span class="javascript">    objstr = <span class="built_in">JSON</span>.stringify(obj, <span class="function"><span class="keyword">function</span>(<span class="params">k,v</span>)</span>&#123;<span class="keyword">if</span>(v===<span class="number">23</span>)<span class="keyword">return</span>;<span class="keyword">else</span> <span class="keyword">return</span> v;&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"obj: "</span>,obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"objstr1"</span>, objstr);</span></span><br><span class="line"><span class="javascript">    objstr = <span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">10</span><span class="comment">/* ' ', '\t' */</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"objstr2"</span>, objstr);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    objbyte = <span class="built_in">JSON</span>.parse(objstr);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"objbyte"</span>,objbyte);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60969067-93e22900-a359-11e9-839f-f3e3b9af7a43.JPG" alt="jsonjavascript"></p><br><h2 id="Open-API-JSON형태로-불러오기"><a href="#Open-API-JSON형태로-불러오기" class="headerlink" title="Open API JSON형태로 불러오기"></a>Open API JSON형태로 불러오기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json, urllib</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty'</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">"serviceKey"</span>: <span class="string">"rHPpLuWO16wWq7c2Z87Q8gwiZ7z6agbTuwvSDBpCEC7dqDXusPHYkC%2FVMq029DVkRJegegKOoUETTvYa82Dc2Q%3D%3D"</span>,</span><br><span class="line">    <span class="string">"numOfRows"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"pageNo"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"startPage"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"sidoName"</span>: <span class="string">"인천"</span>,</span><br><span class="line">    <span class="string">"dataTerm"</span>: <span class="string">"DAILY"</span>,</span><br><span class="line">    <span class="string">"ver"</span>:<span class="string">"1.3"</span>,</span><br><span class="line">    <span class="string">"_returnType"</span>: <span class="string">"JSON"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params[<span class="string">"serviceKey"</span>] = urllib.parse.unquote(params[<span class="string">"serviceKey"</span>])</span><br><span class="line">params = urllib.parse.urlencode(params)</span><br><span class="line">params = params.encode(<span class="string">"UTF-8"</span>)</span><br><span class="line">req = urllib.request.Request(url, data=params)</span><br><span class="line">res = urllib.request.urlopen(req)</span><br><span class="line">resStr = res.read()</span><br><span class="line">resStr = resStr.decode(<span class="string">"UTF-8"</span>)</span><br><span class="line">resObj = json.loads(resStr)</span><br><span class="line">resJSON = json.dumps(resObj, indent=<span class="string">"  "</span>)</span><br><span class="line"></span><br><span class="line">x = resObj[<span class="string">'list'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i[<span class="string">'stationName'</span>], i[<span class="string">'pm25Value'</span>])</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">신흥 <span class="number">9</span></span><br><span class="line">송림 <span class="number">9</span></span><br><span class="line">구월동 <span class="number">2</span></span><br><span class="line">숭의 <span class="number">10</span></span><br><span class="line">석바위 <span class="number">31</span></span><br><span class="line">부평역 <span class="number">20</span></span><br><span class="line">부평 <span class="number">5</span></span><br><span class="line">연희 -</span><br><span class="line">검단 <span class="number">7</span></span><br><span class="line">계산 <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="JSON-Schema"><a href="#JSON-Schema" class="headerlink" title="JSON Schema"></a>JSON Schema</h2>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Markup Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> json </tag>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>객체지향의 사실과 오해 책으로 객체지향 이해하기</title>
      <link href="/2019/06/24/object/"/>
      <url>/2019/06/24/object/</url>
      
        <content type="html"><![CDATA[<h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. 협력하는 객체들의 공동체</span><br><span class="line">- 역할, 책임, 협력</span><br><span class="line">- 객체지향의 본질</span><br><span class="line">2. 이상한 나라의 객체</span><br><span class="line">3. 타입과 추상화</span><br><span class="line">4. 역할, 책임, 협력</span><br><span class="line">- 협력</span><br><span class="line">- 책임</span><br><span class="line">- 역할</span><br><span class="line">- 객체지향 설계 기법</span><br><span class="line">5. 책임과 메시지</span><br><span class="line">- 메시지와 메서드</span><br><span class="line">- 객체 인터페이스</span><br><span class="line">- 인터페이스와 구현의 분리</span><br><span class="line">6. 객체 지도</span><br><span class="line">- 기능 설계 대 구조 설계</span><br><span class="line">7. 함께 모으기</span><br><span class="line">- 설계하고 구현하기</span><br><span class="line">- 추상화 기법</span><br></pre></td></tr></table></figure><h2 id="협력하는-객체들의-공동체"><a href="#협력하는-객체들의-공동체" class="headerlink" title="협력하는 객체들의 공동체"></a>협력하는 객체들의 공동체</h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Objectoriented </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object </tag>
            
            <tag> 설계 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask</title>
      <link href="/2019/05/18/flask/"/>
      <url>/2019/05/18/flask/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-05-18-1st"><a href="#2019-05-18-1st" class="headerlink" title="2019-05-18 1st"></a>2019-05-18 1st</h1><h2 id="웹"><a href="#웹" class="headerlink" title="웹"></a>웹</h2><blockquote><p>World Wide Web의 줄임말로 인터넷 상에서 이루어지는 서비스 중 하나로써, 공유 목적으로 개발되었다</p></blockquote><p>Web: <a href="https://m.blog.naver.com/PostView.nhn?blogId=hot1455&logNo=60124258172&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">naver blog</a><br><br></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><blockquote><p>웹 상에서 정보를 주고받을 수 있는 프로토콜, 이때 정보는 보통 HTML문서나, 이미지, 영상 등을 포함합니다  </p></blockquote><p>HTTP: <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Overview" target="_blank" rel="noopener">MDN</a><br><br><br>HTTP란? : <a href="https://www.zerocho.com/category/HTTP/post/5b344f3af94472001b17f2da" target="_blank" rel="noopener">zerocho</a><br></p><h3 id="HTTP-protocol-특징"><a href="#HTTP-protocol-특징" class="headerlink" title="HTTP protocol 특징"></a>HTTP protocol 특징</h3><table><thead><tr><th>Statusless</th><th>Connectless</th></tr></thead><tbody><tr><td>HTTP 프로토콜은 상태가 없다</td><td>HTTP 프로토콜은 상태에 대한 지속적인 연결이 없다</td></tr><tr><td>이전에 했던 작업, 지금한 작업에 대한 정보를 갖고 있지 않다</td><td>웹 브라우저의 요청에 대한 응답을 하면 클라이언트와의 접속이 끊긴다</td></tr></tbody></table><p><span style="color: orange">연결이 계속되어 있으면 좋을텐데 왜 귀찮게 비연결방식으로 하고 쿠키라는 방식으로 저장을하는거야?</span><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP는 인터넷 상에서 불특정 다수의 통신환경을 기반으로 설계되었다는 점이 포인트입니다</span><br><span class="line">만약 불특정 다수의 클라이언트와 Google이라는 하나의 서버가 지속적으로 연결을 유지한다면</span><br><span class="line">많은 리소스가 발생하게 됩니다. 따라서 리소스 낭비를 줄여 더 많은 연결을 위해 비연결 지향으로 설계하게 된 것입니다</span><br></pre></td></tr></table></figure><p><span style="color: orange">많은 클라이언트와의 연결이 원활해지는 장점이 있다면 비연결 지향으로 생기는 단점도 있지 않을까?</span><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">첫번째로 위에서 언급했듯이 쿠키라는 것을 따로 두고 클라이언트 정보를 임시로 저장하는 방법을 채용해야한다</span><br><span class="line">그리고 두번째로 동일한 클라이언트의 모든 요청에 대해, 매번 새로운 연결시도&#x2F;해제의 과정을 거쳐야 하므로</span><br><span class="line">연결&#x2F;해제에 대한 오버헤드가 발생한다는 단점이 있습니다</span><br><span class="line"></span><br><span class="line">이에 대한 해결책으로 HTTP연결을 새로 생성할 때마다 발생되는 오버헤드를 줄이기 위해</span><br><span class="line">HTTP 1.1 부터 지원하는 기능인 KeepAlive 속성을 사용할 수 있습니다</span><br><span class="line"></span><br><span class="line">그러나 KeepAlive 속성을 on상태로 바꾼다 해도, 서버가 나쁜 환경에서는 프로세스수가 기하급수적으로 늘어나기 때문에</span><br><span class="line">메모리를 많이 사용하게 되므로 주의해야 합니다</span><br></pre></td></tr></table></figure><p>HTTP Protocol : <a href="https://codedragon.tistory.com/5930" target="_blank" rel="noopener">tistory1</a>, &nbsp; <a href="https://victorydntmd.tistory.com/286" target="_blank" rel="noopener">tistory2</a></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>HTTP의 특성인 Connectless, Stateless의 문제점을 보완한 것이 바로 Cookie!</p></blockquote><p>Connectionless로 인해 서버는 클라이언트의 요청에 대한 응답을 한 후 연결을 끊기 때문에 <br><br>다른 페이지로 이동하고 싶을 경우 서버에 재요청을 해야합니다. <br><br>재요청시 서버는 클라이언트를 식별할 수가 없는 Stateless특징이 있기 때문에 <br><br>같은 브라우저에서 요청을해도 서버는 같은 브라우저인지 알 수가 없고, 로그인과 같이 <br><br>서버가 클라이언트를 기억해야 할 경우에 클라이언트 정보를 저장하지 못한다면  <br><br>페이지 이동시을 하거나 리로딩같은 재요청을 하는 경우에 계속해서 로그인을 해야 하는 불편함이 있습니다.<br></p><p><span style="background-color:orange">이러한 불편함을 해결하기 위해 쿠키라는 것을 저장해서 서버가 클라이언트를 식별할 수 잇도록 합니다</span><br></p><p>쿠키는 서버에서 생성하여, 클라이언트에서 보낸 특정 정보를 저장합니다. <br><br>그리고 쿠키의 속성값은 서버에 요청할 때마다 참조 또는 변경하여 데이터 상태를 관리합니다.<br></p><p><img src="https://user-images.githubusercontent.com/33630505/58149184-c5fdd580-7c9c-11e9-8371-4ad522105f38.JPG" alt="cookie"></p><p>cookie : <a href="https://nesoy.github.io/articles/2017-03/Session-Cookie" target="_blank" rel="noopener">github blog</a></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><blockquote><p>Cookie의 단점을 보완하기 위해 생긴 Session! Session은 서버단에서 사용자 정보를 기록할 수 있는 방법입니다</p></blockquote><h4 id="Session-1"><a href="#Session-1" class="headerlink" title="Session?"></a>Session?</h4><p>HTTP session id를 식별자로 구별하여 데이터를 사용자의 브라우저에 쿠키형태가 아닌 접속한 DB에 정보를 저장합니다 <br><br>클라이언트는 HTTP session id를 쿠키로 메모리 저장된 형태로 가지고 있습니다<br><br>메모리에 저장하기 때문에 브라우저가 종료되면 사라지게 됩니다<br></p><h4 id="Session-절차"><a href="#Session-절차" class="headerlink" title="Session 절차"></a>Session 절차</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 클라이언트가 서버에 Resource를 요청합니다</span><br><span class="line">2. 서버에서는 HTTP Request를 통해 쿠키에서 Session id를 확인 후</span><br><span class="line">   없으면 set-cookie를 통해 새로 발행한 session-id를 보냅니다</span><br><span class="line">3. 새로 부여 받은 session-id를 클라이언트 쪽에서 HTTP request에 포함하여 원하는</span><br><span class="line">   Resource를 요청합니다</span><br><span class="line">4. 서버는 session id를 통해 해당 세션을 찾아 클라이언트 상태 정보를 유지하며</span><br><span class="line">   적절한 응답을 합니다</span><br></pre></td></tr></table></figure><p><span style="color: orange">뭐야 쿠키만 있음되지 세션은 또 뭐야?</span><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">쿠키에 대한 정보를 HTTP Header에 추가하여 보내기 때문에 상당한 트래픽을 발생시키는 문제가 있습니다</span><br><span class="line">또한 결제정보, 개인정보등을 쿠키에 저장했을때 쿠키가 유출되면 보안에 문제가 발생할 수도 있습니다</span><br><span class="line"></span><br><span class="line">따라서 클라이언트측에 저장하는것이 아니라 서버 DB에 저장하는 방법을 사용해서 문제를 해결!</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58149406-c8146400-7c9d-11e9-9554-fa047a4bb388.JPG" alt="session"></p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><blockquote><p>세션은 서버의 메모리를 차지하고 있기 때문에 동시 접속자 수가 많은 웹 사이트일 경우 서버 과부화의 원인이 되고, 세션 정보가 중간에 탈취 당할 수도 있기 때문에 완벽하다고 볼수는 없습니다. 그래서 쿠키와 세션의 문제점을 보완하기 위해 Token(토큰) 인증 방식 도입!</p></blockquote><p><span style="background-color:orange">Token 인증방식은 보호할 데이터를 토큰으로 치환하여 원본 데이터 대신 토큰을 사용하는 기술</span><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">토큰 방식 이외에 어떤 새로운 기술이 또 생길지 모릅니다</span><br><span class="line">그렇지만 현존하는 기술중 Token 방식이 가장 안전하다고해서 무조건 Token 방식을 써야 하는 가?</span><br><span class="line">꼭 그렇지만은 않아 보인다. 어떤 웹 서버를 운영할 것인가에 따라 해당 서버를 이용할 이용자의 숫자에 따라</span><br><span class="line">어떤 서비스를 제공할 것이냐에 따라 적절하게 사용해야 한다고 봅니다</span><br></pre></td></tr></table></figure><h3 id="HTTPs"><a href="#HTTPs" class="headerlink" title="HTTPs"></a>HTTPs</h3><p><img src="https://user-images.githubusercontent.com/33630505/58152246-02ceca00-7ca7-11e9-8d2e-7c9ee23fcfb1.JPG" alt="https"></p><p>HTTPS: <a href="https://sjh836.tistory.com/81" target="_blank" rel="noopener">tistory</a></p><h3 id="HTTP-message"><a href="#HTTP-message" class="headerlink" title="HTTP message"></a>HTTP message</h3><p><strong>서버와 클라이언트가 HTTP 통신을 할때 주고 받는 메시지</strong> <br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">클라이언트 --&gt; 서버 : Request Message</span><br><span class="line">서버 --&gt; 클라이언트 : Response Message</span><br></pre></td></tr></table></figure><h4 id="Request-Message"><a href="#Request-Message" class="headerlink" title="Request Message"></a>Request Message</h4><p><img src="https://user-images.githubusercontent.com/33630505/57967936-59828e00-799f-11e9-8673-cbdb4db516ae.JPG" alt="request message"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">요청라인: url</span><br><span class="line">         HTTP Method</span><br><span class="line">         protocol version</span><br><span class="line">요청헤더: User-Agent(브라우저)</span><br><span class="line">         Accept(수신되는 데이터중 브라우저가 처리가능한 데이터 타입)</span><br><span class="line">         Cookie(유저 정보 임시 기억)</span><br><span class="line">         Host(요청 도메인 정보)</span><br><span class="line">         Referer(현재 페이지 접속 전 어느 사이트 경유했는지에 대한 정보)</span><br><span class="line">         Connection     # ex) keep-alive</span><br><span class="line">공백라인</span><br><span class="line">메시지 본문</span><br></pre></td></tr></table></figure><h4 id="Response-Message"><a href="#Response-Message" class="headerlink" title="Response Message"></a>Response Message</h4><p><img src="https://user-images.githubusercontent.com/33630505/57968025-31dff580-79a0-11e9-9a83-0db6cd09117d.JPG" alt="response message"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">상태라인: HTTP version</span><br><span class="line">         Status code</span><br><span class="line">         Reason-phrase</span><br><span class="line">응답헤더: Date  </span><br><span class="line">         Server           # ex) Apache</span><br><span class="line">         Last-Modified</span><br><span class="line">         Content-Encoding</span><br><span class="line">         Content-Length</span><br><span class="line">         Content-Type     # ex) text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">공백라인</span><br><span class="line">메시지 본문</span><br></pre></td></tr></table></figure><h3 id="HTTP-Request-method"><a href="#HTTP-Request-method" class="headerlink" title="HTTP Request method"></a>HTTP Request method</h3><table><thead><tr><th>Request Method</th><th>Explanation</th></tr></thead><tbody><tr><td>Get</td><td>요청라인을 통해 자원 요청(url에 데이터 표시)</td></tr><tr><td>Post</td><td>메시지 본문을 통해서 자원 요청(url에서 데이터 숨김)</td></tr><tr><td>Put</td><td>URL에서 자원을 생성</td></tr><tr><td>Delete</td><td>URL에서 자원을 삭제</td></tr><tr><td>Options</td><td>응답 가능한 HTTP Method 요청</td></tr><tr><td>Head</td><td>HTTP Header 정보만 수신</td></tr><tr><td>Trace</td><td>Request의 loop back 테스트</td></tr><tr><td>Connect</td><td>터널링의 목적으로 연결 요청</td></tr></tbody></table><h3 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client, Server"></a>Client, Server</h3><p><img src="https://user-images.githubusercontent.com/33630505/57967447-1114a180-799a-11e9-94d3-d0826dd1700e.JPG" alt="clientserver"></p><p>클라이언트(Request)  —&gt;  서버(Response) <br><br>브라우저에서 문서확인 &lt;—  문서(요청에 대한 응답) ex) html, json, jpg…</p><h3 id="HTTP-Status"><a href="#HTTP-Status" class="headerlink" title="HTTP Status"></a>HTTP Status</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">200 (OK): 성공적인 응답, 오류 없이 전송 성공</span><br><span class="line">201 (Created): 요청이 성공적으로 처리되어 리소스가 만들어졌음을 의미</span><br><span class="line">202 (Accepted): 요청이 받아들여졌지만 처리되지 않았음을 의미</span><br><span class="line">301 (Moved Permanently): 요청한 정보가 새로운 주소로 영구적으로 옮겨 갔음을 의미</span><br><span class="line">302 (Found) : 요청한 정보가 새로운 주소로 일시적으로 옮겨 갔음을 의미</span><br><span class="line">304 (Not Modified): 브라우저에 캐시되어 있는 버전을 쓴다</span><br><span class="line">400 (Bad Request): 요청 자체가 잘못 되었을때 사용하는 코드</span><br><span class="line">401 (Unauthorized): 인증이 필요한 리소스에 인증 없이 접근할 경우 발생</span><br><span class="line">403 (Forbidden): 서버가 요청을 거부할때 발생. 관리자에 의해 사용자를 차단했거나 서버에 index.html이 없는 경우 발생</span><br><span class="line">404 (Not Found): 에러는 파일의 확장자가 제대로 입력이 되지 않았거나 주소를 잘못 쳤을 경우(존재하지 않는 url 요청을 했을 경우) 발생하는 에러이다</span><br><span class="line">408 (Request Timeout): 요청 중 시간이 초과되었을때 사용하는 코드</span><br><span class="line">500 (Internal Server Error): 요청한 주소의 서버에 관리상 문제가 있을 경우 발생하는 에러, 서버측 파일에 소스코드 자체에 오류가 있을 경우 즉, 컴파일이 불가능한 경우에 발생할 수 있다</span><br><span class="line">503 (Service Temporarily Unavailable): 서버를 현재 일시적으로 사용할 수 없을 때 발생, 유지보수중이거나 서버가 터졌을 때 발생</span><br></pre></td></tr></table></figure><p>HTTP 심화 학습 : <a href="https://ston.readthedocs.io/ko/latest/admin/handling_http_requests.html" target="_blank" rel="noopener">ston</a><br></p><br><h3 id="301-redirect-vs-302-redirect"><a href="#301-redirect-vs-302-redirect" class="headerlink" title="301 redirect vs 302 redirect"></a>301 redirect vs 302 redirect</h3><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><blockquote><p>일반적으로 리소스란, 사용될 수 있는 어떤 항목을 말한다<br>프린터나 디스크 드라이브와 같은 장치들이 리소스가 될 수 있으며, 메모리도 마찬가지 이다</p></blockquote><p><strong>쉽게 말해</strong> 프로그램을 실행시키기 위해 사용되야 할 자원들, 항목들을 총칭해서 리소스라고 한다<br>{: .notice}</p><p>Resource : <a href="https://m.blog.naver.com/PostView.nhn?blogId=pwhite1004q&logNo=20197683310&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">naver blog1</a>, <a href="https://m.blog.naver.com/PostView.nhn?blogId=singerjyy&logNo=100048035655&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">naver blog2</a><br></p><p>Resource 확인하는 법: <a href="https://m.post.naver.com/viewer/postView.nhn?volumeNo=8346642&memberNo=1834" target="_blank" rel="noopener">naver post</a><br></p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><h2 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h2><h2 id="Template-language"><a href="#Template-language" class="headerlink" title="Template language"></a>Template language</h2><h4 id="익혀야할-부분"><a href="#익혀야할-부분" class="headerlink" title="익혀야할 부분"></a>익혀야할 부분</h4><ol><li>자주쓰는 단축키 손에 익히기</li></ol><ul><li>Declaration</li><li>Implementation</li><li>Type Declaration</li></ul><ol start="2"><li>Jinja2</li></ol><h1 id="2019-05-23-2nd"><a href="#2019-05-23-2nd" class="headerlink" title="2019-05-23 2nd"></a>2019-05-23 2nd</h1><h2 id="SQLalchemy"><a href="#SQLalchemy" class="headerlink" title="SQLalchemy"></a>SQLalchemy</h2><blockquote><p>SQLarlchemy는 Python 언어를 위한 ORM이다. <br><br>SQL문법을 사용하지 않고 Python class로 스키마를 작성하면 Create table을 한것 처럼 DB table을 생성해준다.</p></blockquote><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><h4 id="SQLarlchemy-일반-데이터-타입"><a href="#SQLarlchemy-일반-데이터-타입" class="headerlink" title="SQLarlchemy 일반 데이터 타입"></a>SQLarlchemy 일반 데이터 타입</h4><ol><li>정수형</li></ol><ul><li>BigInteger</li><li>SmallInteger</li><li>Integer  </li></ul><ol start="2"><li>실수형</li></ol><ul><li>Float</li></ul><ol start="3"><li>논리형</li></ol><ul><li>Boolean</li></ul><ol start="4"><li>문자형</li></ol><ul><li>String</li><li>Text</li><li>Unicode : 유니코드</li><li>UnicodeText :</li></ul><ol start="5"><li>기간형(시간, 날짜)</li></ol><ul><li>Date  : yyyy.mm.dd</li><li>DateTime : Date + Time</li><li>Time : hh:mm:ss</li><li>Interval : 기간</li></ul><ol start="6"><li>열거형</li></ol><ul><li>Enum</li></ul><ol start="7"><li>이진데이터형</li></ol><ul><li>LargeBinary</li></ul><ol start="8"><li>MatchType</li><li>Numeric</li></ol><h4 id="타사의-데이터-타입"><a href="#타사의-데이터-타입" class="headerlink" title="타사의 데이터 타입"></a>타사의 데이터 타입</h4><ol><li>정수형</li></ol><ul><li>Integer</li><li>Int</li><li>BigInt</li><li>SmallInt</li></ul><ol start="2"><li>실수형</li></ol><ul><li>Float</li><li>Real</li></ul><ol start="3"><li>문자형</li></ol><ul><li>Char : 고정 문자열</li><li>Varchar : 가변 문자열(메모리를 효율적으로 사용할 수 있다)</li><li>ex) varchar(10)일 때 test를 저장하면 4byte 영역만 차지한다</li><li>nChar : 고정 문자열 + 유니코드 문자열 (char의 2배공간 사용)</li><li>nVarchar : 가변 문자열 + 유니코드 문자열</li></ul><ol start="4"><li>이진데이터형</li></ol><ul><li>Binary</li><li>VarBinary</li></ul><ol start="5"><li>기간형(시간,날짜)</li></ol><ul><li>Date</li><li>DateTime</li><li>TimeStamp</li></ul><ol start="6"><li>파일형</li></ol><ul><li>BLOB</li><li>CLOB</li><li>JSON</li></ul><ol start="7"><li>리스트형(배열)</li></ol><ul><li>Array</li></ul><h2 id="WTForms"><a href="#WTForms" class="headerlink" title="WTForms"></a>WTForms</h2><blockquote><p>클라이언트로부터 입력받을 Form을 제공하는 API. <br><br>필드의 정의, 유효성 검사, 입력 가져오기, 오류 집계를 포함하는 기능을 제공한다.</p></blockquote><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><blockquote><p>일반적으로 데이터베이스 테이블에서 타입을 지정해주는 열을 말한다. <br><br>입력 받는 값의 타입.</p></blockquote><h3 id="기본-필드"><a href="#기본-필드" class="headerlink" title="기본 필드"></a>기본 필드</h3><ol><li>숫자 필드</li></ol><ul><li>FloatField : 실수를 받는 필드</li><li>IntegerField : 정수를 받는 필드</li></ul><ol start="2"><li>문자 필드</li></ol><ul><li>StringField : 문자열을 받는 필드</li></ul><ol start="3"><li>논리형 필드</li></ol><ul><li>BooleanField : True, False를 받는 필드</li></ul><ol start="4"><li>파일 필드</li></ol><ul><li>FileField : 파일을 받는 필드</li><li>MutipleFileField : 여러 파일을 받을 수 있는 필드</li></ul><ol start="5"><li>날짜 필드</li></ol><ul><li>DateField : 날짜를 받는 필드</li><li>DatetimeField : 날짜, 시간을 같이 받는 필드</li></ul><ol start="6"><li>선택형 필드</li></ol><ul><li>RadioField : SelectField와 비슷하지만, 라디오 버튼을의 목록을 보여준다.</li><li>SelectField : 값과 레이블로 이루어진 선택들을 쌍으로 가진다. 값은 어떤것이 와도 된다.</li><li>SelectMultipleField : SelectField와 같지만 여러 선택을 가질 수 있다.</li></ul><ol start="7"><li>버튼형 필드</li></ol><ul><li>SubmitField : Submit 버튼이 눌리는 것을 체크하는 필드</li></ul><ol start="8"><li>DecimalField</li></ol><h3 id="편리한-필드"><a href="#편리한-필드" class="headerlink" title="편리한 필드"></a>편리한 필드</h3><p>HiddenField : 입력 폼이 보이지 않는 필드 <br><br>PasswordField : 비밀번호를 입력할때 값이 보이지 않도록 하는 필드 <br><br>TextAreaField : 텍스트를 자유롭고 길게 받을 수 있는 필드 <br></p><h3 id="Field-Enclosures"><a href="#Field-Enclosures" class="headerlink" title="Field Enclosures"></a>Field Enclosures</h3><p>FormField : Form을 받는 필드 <br><br>FieldList : 필드의 인스턴스를 list형태로 받는 필드 <br></p><h3 id="커스텀-필드"><a href="#커스텀-필드" class="headerlink" title="커스텀 필드"></a>커스텀 필드</h3><p>필요시 직접 필드를 수정해서 사용한다</p><h1 id="2019-06-08-3rd"><a href="#2019-06-08-3rd" class="headerlink" title="2019-06-08 3rd"></a>2019-06-08 3rd</h1><h2 id="flask-security"><a href="#flask-security" class="headerlink" title="flask_security"></a>flask_security</h2><blockquote><p>admin 페이지에 login 화면 추가</p></blockquote><h3 id="과제"><a href="#과제" class="headerlink" title="과제"></a>과제</h3><ol><li>admin + flask_security + login.html 방법 찾아보기</li><li>로그인 controller 로직 상세 구현하기</li><li>출석부 만들기</li></ol><h1 id="2019-06-09-4th"><a href="#2019-06-09-4th" class="headerlink" title="2019-06-09 4th"></a>2019-06-09 4th</h1><h2 id="app-py-분석하기"><a href="#app-py-분석하기" class="headerlink" title="app.py 분석하기"></a>app.py 분석하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><blockquote><p>해당 파일은 utf-8 인코딩 방식을 사용할 것임을 명시해준다.</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br></pre></td></tr></table></figure><blockquote><p>Flask Project 생성시 만든 가상환경 ‘Flask_venv’에 포함된 flask 모듈안에 있는 app.py 내 선언된 Flask 클래스 를 사용하겠다.</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><blockquote><p>모듈 하나만 사용한다면 __ name__ 이름으로 parameter를 주면 현재 작업하는 파일을 flask 인스턴스로 활용하겠다는 의미. flask 프레임워크를 사용하여 서버 페이지를 작성하겠다, flask로 나만의 app을 만들겠다. 등등 의미로 생각하면 됨.</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_start</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">'You can run your web app'</span></span><br></pre></td></tr></table></figure><blockquote><p>위에서 app이라는 이름으로 flask를 인스턴스화 했기 때문에 이제 app을 이용하여 flask에 있는 기능을 사용할 수 있게 됐음.</p></blockquote><blockquote><p>그 중에 route함수는 호출 요청을 분석한 후에 원하는 uri를 처리하는 기능을 담당한다. 따라서 특정 uri로 요청이 들어오면 요청에 알맞은 처리를 담당하는 뷰함수를 실행할 수 있게 route가 매핑을 해준다.</p></blockquote><blockquote><p>로컬에서 실행하는 경우 ‘localhost:port/‘ 로 요청했을 때 route 데코레이터가 app_start라는 뷰함수에 연결해주어 app_start 함수실행 결과를 return 해주게 된다.</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ = <span class="string">'__main__'</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><blockquote><p>현재 파일이 메인모듈 파일에서 실행하는 건지 import 모듈에 의해 실행되는건지 확인하는 조건문이다. <br><br>만약 메인모듈에서 실행하는 거라면 로컬 서버를 실행해라 라는 뜻.</p></blockquote><p><strong>URL &amp; URI</strong> URL은 Uniform Resource Locator(파일 식별자), URI는 Uniform Resource Identifier(통합 자원 식별자)이다. url은 특정 서버의 원하는 리소스의 위치 주소이고, uri는 실제 리소스의 위치가 아닌 rewrite 기술이 적용되어 리소스의 위치 이름을 식별자로서 역할을 할 수 있게 변경된 주소 이름이라고 생각하면 된다.<br>{: .notice}</p><h3 id="In-Flask-class-Default-configuration-parameters"><a href="#In-Flask-class-Default-configuration-parameters" class="headerlink" title="In Flask class Default configuration parameters"></a>In Flask class Default configuration parameters</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#: Default configuration parameters.</span></span><br><span class="line">    default_config = ImmutableDict(&#123;</span><br><span class="line">        <span class="string">'ENV'</span>:                                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'DEBUG'</span>:                                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'TESTING'</span>:                              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'PROPAGATE_EXCEPTIONS'</span>:                 <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'PRESERVE_CONTEXT_ON_EXCEPTION'</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SECRET_KEY'</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'PERMANENT_SESSION_LIFETIME'</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">'USE_X_SENDFILE'</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'APPLICATION_ROOT'</span>:                     <span class="string">'/'</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_NAME'</span>:                  <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_DOMAIN'</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_PATH'</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_HTTPONLY'</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_SECURE'</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'SESSION_COOKIE_SAMESITE'</span>:              <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SESSION_REFRESH_EACH_REQUEST'</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'MAX_CONTENT_LENGTH'</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'SEND_FILE_MAX_AGE_DEFAULT'</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">'TRAP_BAD_REQUEST_ERRORS'</span>:              <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'TRAP_HTTP_EXCEPTIONS'</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'EXPLAIN_TEMPLATE_LOADING'</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'PREFERRED_URL_SCHEME'</span>:                 <span class="string">'http'</span>,</span><br><span class="line">        <span class="string">'JSON_AS_ASCII'</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSON_SORT_KEYS'</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'JSONIFY_PRETTYPRINT_REGULAR'</span>:          <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'JSONIFY_MIMETYPE'</span>:                     <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'TEMPLATES_AUTO_RELOAD'</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">'MAX_COOKIE_SIZE'</span>: <span class="number">4093</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="Fatal-error-in-launcher-Unable-to-create-process-using-…"><a href="#Fatal-error-in-launcher-Unable-to-create-process-using-…" class="headerlink" title="Fatal error in launcher: Unable to create process using …"></a>Fatal error in launcher: Unable to create process using …</h3><blockquote><p>pip list 명령어를 쳤을때 떳던 에러</p></blockquote><h4 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python.exe -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><h1 id="2019-06-30-5th"><a href="#2019-06-30-5th" class="headerlink" title="2019-06-30 5th"></a>2019-06-30 5th</h1><h2 id="flask-mysql-연동하기"><a href="#flask-mysql-연동하기" class="headerlink" title="flask - mysql 연동하기"></a>flask - mysql 연동하기</h2><h2 id="‘mysql-h’-No-such-file-or-directory-오류"><a href="#‘mysql-h’-No-such-file-or-directory-오류" class="headerlink" title="‘mysql.h’ No such file or directory 오류"></a>‘mysql.h’ No such file or directory 오류</h2><blockquote><p>위 오류가 난 상황 : pip install flask-mysqldb 설치할때 <br><br>오류 명 그대로 mysql.h 파일이 없다는 뜻이다. <br></p></blockquote><h3 id="해결-1"><a href="#해결-1" class="headerlink" title="해결"></a>해결</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. https:&#x2F;&#x2F;www.lfd.uci.edu&#x2F;~gohlke&#x2F;pythonlibs&#x2F;#mysqlclient.Then 사이트 들어가서</span><br><span class="line">   내가 사용중인 python 버전에 맞는 파일을 다운로드 한다</span><br><span class="line">2. flask site-packages폴더에 저장하고 pip 명령어를 입력한다</span><br><span class="line">   pip install mysqlclient-1.4.2-cp37-cp37m-win32.whl (파일명)</span><br><span class="line">3. 오류가 날 경우 python 버전과 whl파일과 호환이 되는 파일인지 체크한다</span><br><span class="line">   참고로 cp37이라고 써있으면 python 3.7버전이라는 뜻이다</span><br><span class="line">4. pip install flask-mysqldb 명령어를 입력한다</span><br></pre></td></tr></table></figure><p>출처: <a href="https://lemontia.tistory.com/756" target="_blank" rel="noopener">tistory</a>, &nbsp; <a href="https://stackoverflow.com/questions/51228228/cannot-install-flask-mysqldb" target="_blank" rel="noopener">stackoverflow</a><br></p><br><h1 id="2019년-8월-21일-6th"><a href="#2019년-8월-21일-6th" class="headerlink" title="2019년 8월 21일 6th"></a>2019년 8월 21일 6th</h1><h2 id="기존-DB를-Flask-SQLAlchemy-ORM-Model로-사용하기"><a href="#기존-DB를-Flask-SQLAlchemy-ORM-Model로-사용하기" class="headerlink" title="기존 DB를 Flask-SQLAlchemy ORM Model로 사용하기"></a>기존 DB를 Flask-SQLAlchemy ORM Model로 사용하기</h2><p>출처: <a href="https://beomi.github.io/2017/10/20/DB-To-SQLAlchemy-Model/" target="_blank" rel="noopener">github blog</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI 이노베이션 스퀘어 수업(기본반) - deeplearning</title>
      <link href="/2019/04/29/AILecture_deeplearning/"/>
      <url>/2019/04/29/AILecture_deeplearning/</url>
      
        <content type="html"><![CDATA[<p><a id = '30th'></a></p><h1 id="2019년-6월-20일-목요일-30th"><a href="#2019년-6월-20일-목요일-30th" class="headerlink" title="2019년 6월 20일 목요일 30th"></a>2019년 6월 20일 목요일 30th</h1><h2 id="Deep-Learning"><a href="#Deep-Learning" class="headerlink" title="Deep Learning"></a>Deep Learning</h2><p><strong>2개 이상의</strong> <span  style="color: red; font-size:30px;">Perceptron</span> <strong>을 연결하여</strong> <br><br><strong>많은</strong> <span  style="color: red; font-size:30px;">Layer</span> <strong>로 구성된</strong>  <span  style="color: red; font-size:30px;">기계학습</span> <strong>을</strong> <br> <span  style="color: red; font-size:30px;">Deep Learning</span><strong>이라고 부른다</strong> <br></p><h2 id="인공지능-발전에-기여한-인물들"><a href="#인공지능-발전에-기여한-인물들" class="headerlink" title="인공지능 발전에 기여한 인물들"></a>인공지능 발전에 기여한 인물들</h2><p><img src="https://user-images.githubusercontent.com/33630505/59897521-f6659a80-9427-11e9-8ca8-af5bcb252ea1.jpg" alt="ai_people_c"><br><br><br>사진 출처: <a href="https://brunch.co.kr/@hvnpoet/66#comment" target="_blank" rel="noopener">brunch</a><br><br><br></p><h3 id="Frank-Rosenblatt’s-Perceptron"><a href="#Frank-Rosenblatt’s-Perceptron" class="headerlink" title="Frank Rosenblatt’s Perceptron"></a>Frank Rosenblatt’s Perceptron</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1957년 Frank Rosenblatt에 의해 고안된 인공신경망의 한 종류로써 Perceptron이 발표되었습니다</span><br><span class="line">이 Perceptron은 뉴런의 행동 방식을 모방하여 만들어졌습니다.</span><br><span class="line">Single Perceptron은 입력값의 연산 결과가 1이면 activate되고 0이되면 deactivate하는 방식의 선형 모델입니다.</span><br><span class="line">이렇게 하면 OR ,AND 연산이 가능하지만 XOR 연산을 할 수 없는 문제가 발생합니다</span><br><span class="line">XOR 연산을 하기 위해서는 Perceptron을 하나 더 연결하여 다층 퍼셉트론을 통해 해결 할 수 있습니다</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59901536-87437280-9436-11e9-994f-3bbfb1015d34.JPG" alt="선형 모델"></p><p><img src="https://user-images.githubusercontent.com/33630505/59915021-a5b96600-9456-11e9-8752-c941d955ab8d.JPG" alt="xor"></p><br><h3 id="Perceptron-학습-방법"><a href="#Perceptron-학습-방법" class="headerlink" title="Perceptron 학습 방법"></a>Perceptron 학습 방법</h3><blockquote><p>입력값의 결과값을 1과 0으로 분류하고 실제값과 예측값의 활성함수 리턴값이 다를 경우 가중치를 조정하며 최적의 가중치를 찾아간다</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">AND Gate를 만든다고 가정하자</span><br><span class="line">Data &#x3D;&gt; (0,0) &#x2F; Result &#x3D;&gt; 0</span><br><span class="line">        (0,1) &#x2F; Result &#x3D;&gt; 0</span><br><span class="line">(1,0) &#x2F; Result &#x3D;&gt; 0</span><br><span class="line">(1,1) &#x2F; Result &#x3D;&gt; 1</span><br><span class="line">위와 같은 dataset이 있을때 Perceptron 학습방법은 다음과 같다</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">활성함수: y &#x3D; 1 (x1*w1 + x2*w2 + w0 &gt;&#x3D; 0) or 0 (otherwise)</span><br><span class="line"># x1, x2는 입력값 w1,w2는 가중치 w0는 bias(절편)</span><br><span class="line"></span><br><span class="line">(0,0)일때</span><br><span class="line">w0 &lt; 0 이 되어야 결과값이 0이 나오기 때문에</span><br><span class="line">w0 값을 임의로 -1를 찾았음</span><br><span class="line"></span><br><span class="line">(0,1)일때</span><br><span class="line">w2 -1 &lt; 0을 만족하는 가중치를 임의로 0.5라고 한다</span><br><span class="line"></span><br><span class="line">(1,0)일때</span><br><span class="line">w1 -1 &lt; 0을 만족하는 가중치를 임의로 0.5라고 한다</span><br><span class="line"></span><br><span class="line">(1,1)일때</span><br><span class="line">0.5 + 0.5 - 1 &#x3D; 0 결과값이 0이기 때문에 y &#x3D; 1을 만족하므로</span><br><span class="line"></span><br><span class="line">학습된 Perceptron의 coefficient또는 weight값은 0.5, 0.5, intercept 또는 bias는 -1</span><br></pre></td></tr></table></figure><h3 id="Bernard-Widrow’s-Adaline"><a href="#Bernard-Widrow’s-Adaline" class="headerlink" title="Bernard Widrow’s Adaline"></a>Bernard Widrow’s Adaline</h3><blockquote><p>Adaline(Adptive Linear Neuron)은 신경세포의 초기 모델.</p></blockquote><h3 id="Adaline"><a href="#Adaline" class="headerlink" title="Adaline"></a>Adaline</h3><blockquote><p>입력값의 결과값과 실제 결과값을 비교하여 오차가 최소가 되도록 가중치를 찾아간다</p></blockquote><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">구구단에서 2단을 학습시키기 위한 딥러닝 이라고 가정 했을때</span><br><span class="line"></span><br><span class="line">data: 2 &#x3D;&gt; 2  X  0.5(가중치)  &#x3D;&gt; result: 1</span><br><span class="line">result &#x3D; 1</span><br><span class="line">real_result &#x3D; 2 X 2 &#x3D; 4</span><br><span class="line">오차 : real_result - result &#x3D; 3</span><br><span class="line">가중치를 높여야 겠군!</span><br><span class="line"></span><br><span class="line">data: 3 &#x3D;&gt; 3  X  3(가중치)    &#x3D;&gt; result: 9</span><br><span class="line">result &#x3D; 9</span><br><span class="line">real_result &#x3D; 3 X 2 &#x3D; 6</span><br><span class="line">오차: real_result - result &#x3D; -3</span><br><span class="line">가중치를 낮춰야 겠군!</span><br><span class="line"></span><br><span class="line">data: 4 &#x3D;&gt; 4  X  2(가중치)    &#x3D;&gt; result: 8</span><br><span class="line">result &#x3D; 8</span><br><span class="line">real_result &#x3D; 4 X 2 &#x3D; 8</span><br><span class="line">오차: real_result - result &#x3D; 0</span><br><span class="line">오차가 없군! 학습을 멈춰야겠어! 정확도가 100%네 ?!</span><br><span class="line">(실제로는 정확도 100%나오기 힘듦)</span><br></pre></td></tr></table></figure><h3 id="Perceptron-vs-Adaline"><a href="#Perceptron-vs-Adaline" class="headerlink" title="Perceptron vs Adaline"></a>Perceptron vs Adaline</h3><p>요약하면 Perceptron은 임계값을 1로 잡고 입력값의 결과가 1이 넘어가면 활성함수에 의해 예측값이 나오고 실제값과 예측값이 다를 경우 가중치를 조정한다.<br><br>Adaline은 입력값의 결과가 예측값이 되고 활성함수(실제값-예측값)의 리턴값을 최소화 하는 방향으로 가중치를 찾아간다는 점에서 차이가 있다.</p><h3 id="Neuron’s-communication"><a href="#Neuron’s-communication" class="headerlink" title="Neuron’s communication"></a>Neuron’s communication</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">뉴런이 휴지상태일때 막전류가 -70mv 극성을 띄는데 뉴런에 자극이 가해지면 이온통로가 열리고</span><br><span class="line">이온이 세포 안으로 들어오면 막전위의 변화를 알립니다.</span><br><span class="line">그러면서 막전류가 -55mv에 도달하게 되면 수 천개의 나트륨 통로가 열리면서 뉴런 내부에</span><br><span class="line">엄청난 양의 나트륨 이온이 세포 내부로 들어와 급격하게 양전하가 되거나 혹은 극성이 없어집니다.</span><br><span class="line">엄청난 나트륨 이온의 유입으로 뉴런의 내부가 +30mv가 될때, 뉴런은 항상성 유지를 위해 나트륨 통로는 닫히고</span><br><span class="line">칼륨 이온 통로가 열리면서 칼륨을 세포 밖으로 내보냅니다.</span><br><span class="line">이러한 방식으로 뉴런 가지안에서 연쇄 반응을 통해 탈분극과 재분극을 반복하여 활동 전위가 전도 됩니다.</span><br><span class="line">이때 활동 전위는 한 방향만으로 전도됩니다.</span><br><span class="line">그리고 끝에 시냅스라는 부분에서 신경 전달물질을 세포 밖으로 내보내 다른 세포를 자극하기 위해 이동합니다  </span><br><span class="line">이렇게 휴지상태 &#x3D;&gt; 활동전위 &#x3D;&gt; 신경전달 물질 &#x3D;&gt; 다른 세포 자극 사이클을 반복하여 뉴런과 소통하게 됩니다.</span><br></pre></td></tr></table></figure><h3 id="Adaline과-Neuron"><a href="#Adaline과-Neuron" class="headerlink" title="Adaline과 Neuron"></a>Adaline과 Neuron</h3><p>Adaline | Neuron<br>Input Data | 타 뉴런들의 자극들<br>Weight | 수상돌기<br>Node | 세포체<br>Activation Function | 축삭돌기(휴지 상태=&gt;활동전위)<br>Output Data | 축삭돌기 말단, 신경전달 물질</p><br><h3 id="Paul-Werbos’s-MLP"><a href="#Paul-Werbos’s-MLP" class="headerlink" title="Paul Werbos’s MLP"></a>Paul Werbos’s MLP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1974년 하버드대 폴 워보스는 다층 퍼셉트론환경에서 학습을 가능하게 해주는</span><br><span class="line">back-propagation 알고리즘을 고안해냈습니다.</span><br><span class="line">그러나 신경망에 대해 냉랭했던 분위기 때문에</span><br><span class="line">매장 당할까바 발표하지 못하고 8년 후 1982년에 저널에 발표하게 됩니다.</span><br></pre></td></tr></table></figure><h3 id="Yann-LeCun-amp-David-Rumelhart-amp-Geoffrey-Everest-Hinton"><a href="#Yann-LeCun-amp-David-Rumelhart-amp-Geoffrey-Everest-Hinton" class="headerlink" title="Yann LeCun &amp; David Rumelhart &amp; Geoffrey Everest Hinton"></a>Yann LeCun &amp; David Rumelhart &amp; Geoffrey Everest Hinton</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">저널에 발표되고 2년뒤 1984년에 신경망 연구로 박사논문을 준비하던 얀 레쿤이</span><br><span class="line">논문을 발견하여 다시 세상에 나왔고, 1986년 럼멜하트와 힌튼교수에 의해 다시 부활하게 되었습니다</span><br><span class="line"></span><br><span class="line">힌튼 교수는 홉필드 네트워크에 신경망 알고리즘을 결합시켜 볼츠만 머신을 만들어냅니다.</span><br><span class="line">그리고 마침내 1998년 힌튼 교수 밑에서 박사과정을 밟고있던 얀쿤과 요수아 벤지오가</span><br><span class="line">볼츠만 머신에 back-propagation을 결합하여 CNN(Convolutional Neural Networks)알고리즘 만들어 냅니다.</span><br></pre></td></tr></table></figure><h2 id="Scikit-Perceptron"><a href="#Scikit-Perceptron" class="headerlink" title="Scikit Perceptron"></a>Scikit Perceptron</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Perceptron</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line">mms = MinMaxScaler()</span><br><span class="line">pct = Perceptron()</span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line">iris.iloc[:,:<span class="number">-1</span>] = mms.fit_transform(iris.iloc[:,:<span class="number">-1</span>])</span><br><span class="line">iris.species = iris.species.map(&#123;<span class="string">"setosa"</span>:<span class="number">0</span>,<span class="string">"versicolor"</span>:<span class="number">1</span>,<span class="string">"virginica"</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">pct.fit(iris.iloc[:,:<span class="number">-1</span>],iris.iloc[:,<span class="number">-1</span>])  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 옵션 early_stopping =&gt; overfitting 막기위한 방법 / fit_intercept 가중치를 사용할지 말지</span></span><br><span class="line"></span><br><span class="line">vars(pct)</span><br><span class="line">:</span><br><span class="line">&#123;<span class="string">'loss'</span>: <span class="string">'perceptron'</span>,</span><br><span class="line"> <span class="string">'penalty'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'learning_rate'</span>: <span class="string">'constant'</span>,</span><br><span class="line"> <span class="string">'epsilon'</span>: <span class="number">0.1</span>,</span><br><span class="line"> <span class="string">'alpha'</span>: <span class="number">0.0001</span>,</span><br><span class="line"> <span class="string">'C'</span>: <span class="number">1.0</span>,</span><br><span class="line"> <span class="string">'l1_ratio'</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">'fit_intercept'</span>: <span class="literal">True</span>,</span><br><span class="line"> <span class="string">'shuffle'</span>: <span class="literal">True</span>,</span><br><span class="line"> <span class="string">'random_state'</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">'verbose'</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">'eta0'</span>: <span class="number">1.0</span>,</span><br><span class="line"> <span class="string">'power_t'</span>: <span class="number">0.5</span>,</span><br><span class="line"> <span class="string">'early_stopping'</span>: <span class="literal">False</span>,</span><br><span class="line"> <span class="string">'validation_fraction'</span>: <span class="number">0.1</span>,</span><br><span class="line"> <span class="string">'n_iter_no_change'</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="string">'warm_start'</span>: <span class="literal">False</span>,</span><br><span class="line"> <span class="string">'average'</span>: <span class="literal">False</span>,</span><br><span class="line"> <span class="string">'n_iter'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'max_iter'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'tol'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'class_weight'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'n_jobs'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'_tol'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'_max_iter'</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="string">'coef_'</span>: array([[<span class="number">-0.80555556</span>,  <span class="number">1.54166667</span>, <span class="number">-1.57627119</span>, <span class="number">-1.75</span>      ],</span><br><span class="line">        [ <span class="number">0.11111111</span>, <span class="number">-5.75</span>      ,  <span class="number">1.45762712</span>, <span class="number">-2.70833333</span>],</span><br><span class="line">        [ <span class="number">0.52777778</span>, <span class="number">-2.41666667</span>,  <span class="number">4.13559322</span>,  <span class="number">5.875</span>     ]]),</span><br><span class="line"> <span class="string">'intercept_'</span>: array([ <span class="number">1.</span>,  <span class="number">1.</span>, <span class="number">-6.</span>]),</span><br><span class="line"> <span class="string">'t_'</span>: <span class="number">751.0</span>,</span><br><span class="line"> <span class="string">'classes_'</span>: array([<span class="string">'setosa'</span>, <span class="string">'versicolor'</span>, <span class="string">'virginica'</span>], dtype=<span class="string">'&lt;U10'</span>),</span><br><span class="line"> <span class="string">'_expanded_class_weight'</span>: array([<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]),</span><br><span class="line"> <span class="string">'loss_function_'</span>: &lt;sklearn.linear_model.sgd_fast.Hinge at <span class="number">0x242aef05770</span>&gt;,</span><br><span class="line"> <span class="string">'n_iter_'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="loss-cost-objective-function"><a href="#loss-cost-objective-function" class="headerlink" title="loss, cost, objective function"></a>loss, cost, objective function</h2><p>loss, cost : 실제값 - 예측값 <br><br>즉, 값이 작아질 수록 정확해진다는 의미 <br></p><p>objective : 유사도 <br><br>즉, 비슷하면 비슷할 수록 값이 커지고 값이 크면 정확해진다는 의미</p><blockquote><p>오차를 구하는 방법도 여러가지이다.</p></blockquote><h2 id="Feed-forward-vs-Back-Propagation"><a href="#Feed-forward-vs-Back-Propagation" class="headerlink" title="Feed-forward vs Back-Propagation"></a>Feed-forward vs Back-Propagation</h2><p>Feed-forward: 벡터연산(행렬), 앞으로 나아가는 연산 <br><br>Back-Propagation: 미분(편미분) <br></p><h2 id="Vanishing-gradient-problem"><a href="#Vanishing-gradient-problem" class="headerlink" title="Vanishing gradient problem"></a>Vanishing gradient problem</h2><blockquote><p>기울기 값이 사라져 학습이 안되는 문제</p></blockquote><p>relu 알고리즘으로 이러한 문제 해결!</p><h2 id="Neural-network-표현방식"><a href="#Neural-network-표현방식" class="headerlink" title="Neural network 표현방식"></a>Neural network 표현방식</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 전통적인 머신러닝 방식으로 표현</span><br><span class="line">2. Graphical neural network</span><br></pre></td></tr></table></figure><h3 id="Graphical-neural-network"><a href="#Graphical-neural-network" class="headerlink" title="Graphical neural network"></a>Graphical neural network</h3><p><img src="https://user-images.githubusercontent.com/33630505/59913849-fbd8da00-9453-11e9-9d49-9dd0975e88b1.JPG" alt="graphical"></p><h2 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h2><h3 id="절차"><a href="#절차" class="headerlink" title="절차"></a>절차</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0. import</span><br><span class="line">1. Data 불러오기</span><br><span class="line">2. train-test-split</span><br><span class="line">3. 학습 가능하도록 차원 변환 (n차원 &#x3D;&gt; 1차원)</span><br><span class="line">4. Sequence 만들기 (Layer)</span><br><span class="line">5. 학습 (어떻게 학습시킬까 : compile)</span><br></pre></td></tr></table></figure><h3 id="예시-1"><a href="#예시-1" class="headerlink" title="예시"></a>예시</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">!pip install tensorflow==<span class="number">2.0</span><span class="number">.0</span>b1 <span class="comment"># 설치</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">mnist = tf.keras.datasets.mnist <span class="comment"># 가장많이 쓰이는 손글씨 데이터</span></span><br><span class="line">data=mnist.load_data()  <span class="comment"># 데이터 불러오기 / numpy 처럼 보이지만 tuple임</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>][<span class="number">0</span>].shape  <span class="comment"># x</span></span><br><span class="line">: (<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">data[<span class="number">0</span>][<span class="number">1</span>].shape <span class="comment"># y</span></span><br><span class="line">: (<span class="number">60000</span>,)</span><br><span class="line"></span><br><span class="line">plt.imshow(data[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">data[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">(X_train, y_train),(X_test, y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2차원 데이터 1차원으로 바꿔주기</span></span><br><span class="line"><span class="comment"># temp, result 방식 둘 중 원하는 방식으로</span></span><br><span class="line">temp = [x.flatten() <span class="keyword">for</span> x <span class="keyword">in</span> X_train]</span><br><span class="line">result = np.array(list(map(<span class="keyword">lambda</span> x:x.flatten(), X_train)))</span><br></pre></td></tr></table></figure><h2 id="Keras쓰는-4가지-방식"><a href="#Keras쓰는-4가지-방식" class="headerlink" title="Keras쓰는 4가지 방식"></a>Keras쓰는 4가지 방식</h2><hr><p><span style="color: red">아직 완벽하게 복습이 되지 않아 부정확한 내용이 있을 수 있음을 알려드립니다…</span><br></p><hr><p>Perceptron : <a href="https://sacko.tistory.com/10" target="_blank" rel="noopener">tistory</a><br><br>Adaline, gradient descent : <a href="https://m.blog.naver.com/samsjang/220959562205" target="_blank" rel="noopener">m_blog</a> <br><br>Vanishing gradient problem : <a href="https://ydseo.tistory.com/41" target="_blank" rel="noopener">tistory</a><br><br>ReLu: <a href="https://mongxmongx2.tistory.com/25" target="_blank" rel="noopener">tistory</a><br><br>인공지능 그림으로 배우기: <a href="https://brunch.co.kr/magazine/yamanin" target="_blank" rel="noopener">brunch</a><br><br>CNN: <a href="https://hamait.tistory.com/535" target="_blank" rel="noopener">tistory</a><br></p><p><strong>복습시간</strong>   19시 10분 ~ 22시,  / 총 2시간 50분</p><br><p><a id = '34th'></a></p><h1 id="2019년-6월-27일-목요일-34th"><a href="#2019년-6월-27일-목요일-34th" class="headerlink" title="2019년 6월 27일 목요일 34th"></a>2019년 6월 27일 목요일 34th</h1><h2 id="Pandas-시계열-분석"><a href="#Pandas-시계열-분석" class="headerlink" title="Pandas 시계열 분석"></a>Pandas 시계열 분석</h2><h2 id="Deep-Learning에서-Overfitting-막는-방법"><a href="#Deep-Learning에서-Overfitting-막는-방법" class="headerlink" title="Deep Learning에서 Overfitting 막는 방법"></a>Deep Learning에서 Overfitting 막는 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 앙상블</span><br><span class="line">2. Regularization</span><br><span class="line">3. Drop out</span><br><span class="line">4. Early stopping</span><br><span class="line">5. 데이터 양을 많이</span><br></pre></td></tr></table></figure><h2 id="Deep-Learning에서-중요한것은"><a href="#Deep-Learning에서-중요한것은" class="headerlink" title="Deep Learning에서 중요한것은?"></a>Deep Learning에서 중요한것은?</h2><p><span  style="color: skyblue; font-size:30px;">Data</span> &nbsp; <strong>vs</strong>  &nbsp; <span  style="color: skyblue; font-size:30px;">Algorithm</span>  <br></p><p><img src="https://user-images.githubusercontent.com/33630505/60263814-98035500-991c-11e9-92d9-f6bfafbb0485.JPG" alt="data"></p><p>출처: Peter Norvig’s The Unreasonable Effectiveness of Data 논문 <br></p><blockquote><p>Peter Norvig의 논문에서도 알 수 있듯이 복잡한 문제에서 딥러닝의 성능이 좋으려면 <br><br>좋은 알고리즘 보다는 더 많은 데이터가 중요하다는 것을 알 수 있다. <br><br>하지만 데이터 확보가 어려운 경우도 많고 중간 규모의 데이터는 매우 흔한 일 이기 때문에 <br><br>알고리즘의 중요성 또한 무시할 수 없다.</p></blockquote><br><h2 id="당신의-데이터는-일반적입니까"><a href="#당신의-데이터는-일반적입니까" class="headerlink" title="당신의 데이터는 일반적입니까?"></a>당신의 데이터는 일반적입니까?</h2><blockquote><p>Machine Learning, Deep Learning에서 학습시키는 Label data는 항상 정답이라는 가정을 했었습니다. <br><br>그런데 과연 그 정답 데이터가 진짜 현실세계에서 정답 데이터 인지 확신할 수 있을까요? <br><br>그리고 데이터를 수집한 사람이 혹은 시스템이 편향된 데이터를 수집하지는 않았을까요? <br><br>좋은 데이터를 갖고 있다고 가정하더라도 학습을 시키는 사람에 따라서 편향된 모델이 나올 수 있다는 것을 명심하자 <br></p></blockquote><br><h3 id="데이터는-공정한-데이터-여야-한다"><a href="#데이터는-공정한-데이터-여야-한다" class="headerlink" title="데이터는 공정한 데이터 여야 한다."></a>데이터는 공정한 데이터 여야 한다.</h3><blockquote><p>공정한 데이터… 기준이 불명확하고 사람마다 공정성의 기준이 다를 수 있으니 <br><br>사람이 저지르는 편향 유형을 살펴보고 편향된 데이터인지 판단하는 눈을 기르도록 하자.</p></blockquote><br><h3 id="편향의-유형"><a href="#편향의-유형" class="headerlink" title="편향의 유형"></a>편향의 유형</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 보고편향</span><br><span class="line">2. 자동화 편향</span><br><span class="line">3. 표본 선택 편향</span><br><span class="line">4. 그룹 귀인 편향</span><br><span class="line">5. 내재적 편향</span><br></pre></td></tr></table></figure><h4 id="1-보고-편향"><a href="#1-보고-편향" class="headerlink" title="1. 보고 편향"></a>1. 보고 편향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">보고 편향은 수집된 데이터의 속성 및 결과의 빈도가 실제 빈도를 정확하게 반영하지 않을때 나타납니다.</span><br><span class="line">예를 들어 쇼핑몰 리뷰가 이러한 특징을 갖고 있다.</span><br><span class="line">사람들은 무언가 물건을 사고 정말 마음에 들때 혹은 정말 마음에 들지 않을때 리뷰를 남기는</span><br><span class="line">특징이 있다. 보통 정말 좋을때와 정말 나쁠떄 중간 지점의 리뷰는 수집되기 힘든걸 볼 수 있다.</span><br></pre></td></tr></table></figure><h4 id="2-자동화-편향"><a href="#2-자동화-편향" class="headerlink" title="2. 자동화 편향"></a>2. 자동화 편향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">자동화 편향은 두 시스템의 오류율과 관계없이 자동화 시스템이 생성한 결과를 비 자동화 시스템이</span><br><span class="line">생성한 결과보다 선호하는 경향을 말합니다.</span><br><span class="line">예를 들어 병아리 성별을 감별하는 자동화 시스템과 사람이 직접 감별하는 것 두 가지가 있다는 사실을 알려 줬을 때 어느 것이 정확도가 높을까? 라고 질문을 한다면 보통 사람들은</span><br><span class="line">자동화 시스템을 더 신뢰할 것이다. 하지만 실제로는 병아리 성별 감별하는 전문가 즉 감별사는</span><br><span class="line">자동화 시스템의 부정확성 때문에 고액의 연봉을 받는 직종이라고 한다.</span><br></pre></td></tr></table></figure><h4 id="3-표본-선택-편향"><a href="#3-표본-선택-편향" class="headerlink" title="3. 표본 선택 편향"></a>3. 표본 선택 편향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 포함 편향</span><br><span class="line">- 선택된 데이터가 대표셩을 갖지 않는 경우</span><br><span class="line">- ex) A 고등학교의 영어 성적 데이터를 갖고 전국의 고등학생 영어 성적의 분포를 알려고 하는 경우</span><br><span class="line">2. 무응답 편향</span><br><span class="line">- 데이터 수집시 참여도의 격차로 인해 데이터가 대표성을 갖지 못하는 경우</span><br><span class="line">- ex) 대선운동 할때 유선전화로 여론조사를 시행한 결과로 대선 후보의 당선 예측을 하는 경우</span><br><span class="line">3. 표본 추출 편향</span><br><span class="line">- 데이터 수집 과정에서 적절한 무작위 선택이 적용되지 않았을 경우</span><br><span class="line">- ex)</span><br></pre></td></tr></table></figure><h4 id="4-그룹-귀인-편향"><a href="#4-그룹-귀인-편향" class="headerlink" title="4. 그룹 귀인 편향"></a>4. 그룹 귀인 편향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 내집단 편향</span><br><span class="line">- 자신이 소속된 그룹 또는 본인이 공유하는 특성을 가진 그룹의 구성원을 선호하는 경향을 나타내는 경우</span><br><span class="line">- ex) 유유상종, XX대를 졸업한 A라는 사람이 동문인 B를 만났을 때 A가 B를 더 챙겨주고 싶어하고 친해지려하는 심리</span><br><span class="line">2. 외부 집단 동질화 편향</span><br><span class="line">- 자신이 속하지 않은 그룹의 개별 구성원에 관해 고정 관념을 갖거나 그들이 모두 동일한 특징을 가진다고 판단하는 경향을 나타내는 경우</span><br><span class="line">- ex) 어떤 A라는 사람이 컴퓨터를 전공했고 어떤 B라는 사람은 영문과를 전공했다고 했을 때 B라는 사람이 A라는 사람을 보고 &quot;컴퓨터 수리 잘하겠네?&quot; 라는 생각을 갖는 경향</span><br></pre></td></tr></table></figure><h4 id="5-내재적-편향"><a href="#5-내재적-편향" class="headerlink" title="5. 내재적 편향"></a>5. 내재적 편향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 확증 편향</span><br><span class="line">- 자신의 신념과 일치하는 정보는 받아들이고, 일치하지 않는 정보는 무시하는 경향</span><br><span class="line">- ex) 듣고싶은 것만 듣고 보고싶은 것만 보는 심리, 담배를 피는것은 몸에 해롭다는 것을</span><br><span class="line">- 알지만 일부 담배를 피고 오래 사는 사람을 보고 &#39;담배 아무리 적게 펴도 병걸릴 사람들은</span><br><span class="line">- 다 걸리고 안걸릴 사람은 아무리 많이펴도 안걸린다,</span><br><span class="line">- 100살 넘게 담배펴도 건강한 할아버지 봐라!&#39;라는 식의 사고방식</span><br><span class="line">2. 실험자 편향</span><br><span class="line">- 실험자가 바라는 방향대로 되기를 바라는 마음에서 발생되는 편향</span><br></pre></td></tr></table></figure><p>머신러닝 단기집중과정 (편향 출처) : <a href="https://developers.google.com/machine-learning/crash-course/fairness/types-of-bias" target="_blank" rel="noopener">google</a><br><br></p><hr><h2 id="Tensor-board"><a href="#Tensor-board" class="headerlink" title="Tensor board"></a>Tensor board</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">%load_ext version_information</span><br><span class="line">%load_ext tensorboard</span><br><span class="line"></span><br><span class="line">version_information tensorflow</span><br><span class="line">:</span><br><span class="line">SoftwareVersion</span><br><span class="line">Python<span class="number">3.7</span><span class="number">.3</span> <span class="number">64</span>bit [MSC v<span class="number">.1915</span> <span class="number">64</span> bit (AMD64)]</span><br><span class="line">IPython<span class="number">7.4</span><span class="number">.0</span></span><br><span class="line">OSWindows <span class="number">10</span> <span class="number">10.0</span><span class="number">.17134</span> SP0</span><br><span class="line">tensorflow<span class="number">2.0</span><span class="number">.0</span>-beta1</span><br><span class="line">Thu Jun <span class="number">27</span> <span class="number">17</span>:<span class="number">01</span>:<span class="number">13</span> <span class="number">2019</span> ¢¥eCN©öI¡¾©ö C¡ÍA¨ª¨öA</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(x_train, y_train),(x_test, y_test) = mnist.load_data()</span><br><span class="line">x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">model = create_model()</span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">              loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">log_dir=<span class="string">"log\\"</span> + datetime.datetime.now().strftime(<span class="string">"%Y%m%d-%H%M%S"</span>) <span class="comment"># 현재시간을 문자열로 바꿔서 저장</span></span><br><span class="line"></span><br><span class="line">tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model.fit(x=x_train,</span><br><span class="line">          y=y_train,</span><br><span class="line">          epochs=<span class="number">5</span>,</span><br><span class="line">          validation_data=(x_test, y_test),</span><br><span class="line">          callbacks=[tensorboard_callback]</span><br><span class="line">         )</span><br><span class="line"></span><br><span class="line">%lsmagic  <span class="comment"># %load_ext tensorboard를 하면 %tensorboard가 생긴다</span></span><br><span class="line">: Available line magics:</span><br><span class="line">%alias  %alias_magic  %autoawait  %autocall ....%tensorboard.....</span><br><span class="line"></span><br><span class="line">%tensorboard --logdir log/</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60267850-187a8380-9926-11e9-84a8-654798556cd4.JPG" alt="tensorboard"></p><p><a id = '35th'></a></p><h1 id="2019년-6월-28일-금요일-35th-마지막-수업"><a href="#2019년-6월-28일-금요일-35th-마지막-수업" class="headerlink" title="2019년 6월 28일 금요일 35th (마지막 수업)"></a>2019년 6월 28일 금요일 35th (마지막 수업)</h1>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Lecture </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI 이노베이션 스퀘어 수업(기본반) - machine learning</title>
      <link href="/2019/04/29/AILecture_machineLearning/"/>
      <url>/2019/04/29/AILecture_machineLearning/</url>
      
        <content type="html"><![CDATA[<p><a id = '21th'></a></p><h1 id="2019년-6월-4일-화요일-21th"><a href="#2019년-6월-4일-화요일-21th" class="headerlink" title="2019년 6월 4일 화요일 21th"></a>2019년 6월 4일 화요일 21th</h1><h2 id="기계학습-분류"><a href="#기계학습-분류" class="headerlink" title="기계학습 분류"></a>기계학습 분류</h2><p><img src="https://user-images.githubusercontent.com/33630505/59347252-1eca0680-8d4f-11e9-9104-a788a22a72e3.JPG" alt="learning model"></p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">지도 학습</span> <br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">정답을 알려주며 학습시킨다.</span><br><span class="line">예를 들어 &#39;바퀴 4개, 문짝 4개, 도로위를 시속 0~200km(input data) 달릴 수 있는 것은 자동차(label data or target data)야&#39;</span><br><span class="line">라고 학습 시키고 학습을 바탕으로 모델이 예측할 수 있도록 하는 방법이다.</span><br><span class="line"></span><br><span class="line">지도학습은 크게 Classification, Regression으로 나눈다.</span><br><span class="line">Classification은 또 이진분류, 다중분류로 볼 수 있다.</span><br><span class="line">이진분류 같은 경우 생존자 or 비생존자와 같이 둘 중 하나로 분류 가능한 것을 말한다.</span><br><span class="line">LogisticRegression 알고리즘이 대표적인 이진 분류 알고리즘이다.</span><br><span class="line">다중 분류는 어떤 데이터에 대해 여러 값 중 하나로 분류 가능한 것을 말한다.</span><br><span class="line">예를 들어 축구공, 야구공, 농구공 등 Label data가 여러개로 나뉠 수 있는 경우를 말한다.</span><br><span class="line">이때는 KNN알고리즘으로 분류 가능하다.</span><br><span class="line">KNN알고리즘은 데이터가 많아지거나 Label data가 많아지면 성능이 떨어질 가능성이 높다.</span><br><span class="line"></span><br><span class="line">Regression는 어떤 데이터들의 특징을 토대로 값을 예측하는 것을 말한다.</span><br><span class="line">예를 들어 키가 170cm인 사람의 몸무게는 65kg이다와 같이 Label data가 실수 값을 갖거나</span><br><span class="line">연속적, 범위가 정해지지 않은 경우 무한대인 경우이다.</span><br><span class="line"></span><br><span class="line">분류인지 회귀인지는 label data가 유한개인지 무한개인지 생각해보면 된다.</span><br></pre></td></tr></table></figure><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">비지도 학습</span> <br>        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">정답을 알려주지 않고 비슷한 데이터들 끼리 군집화하여 학습한다.</span><br><span class="line">예를 들어 &#39;남자, 여자 사진을 무작위로 입력값으로 줬을 때 사진을 보고 공통적으로 보이는</span><br><span class="line">특성들을 찾아 비슷한 특성끼리 묶어 남자, 여자를 학습 시킨 데이터를 기반으로 분류하는 것을 말한다.</span><br><span class="line"></span><br><span class="line">비지도학습은 크게 Clustering, Visualization &amp; Dimensionality  Reduction, Association으로 나뉜다.</span><br><span class="line">Clustering은 비슷한 것끼리 묶는 방법이다.</span><br><span class="line">Clustering 방법중 대표적인 알고리즘인 k-means는 예를 들어 3가지로 묶는다고 했을 때 데이터에서 무작위로 임의의 값을 3개 찍고</span><br><span class="line">랜덤한 데이터 값에서 가까운 값을 찾아 평균을 낸다. 그러면 평균낸 값에서 가까운 값을 또 찾고 그 값에서 평균을 낸다.</span><br><span class="line">이와 같은 작업을 반복하여 평균값이 변하지 않는 때를 찾아 그 평균 값을 기준으로 군집화 하면 그것이 클러스터링 방법이다.</span><br><span class="line"></span><br><span class="line">Visualization &amp; Dimensionality  Reduction은 데이터간의 상관성을 분석하여 포함시키지 않아도 예측하는데 큰 지장 없는</span><br><span class="line">데이터 열을 줄임으로써 차원을 축소하는 방법이다.</span><br><span class="line">대표적으로 pca 방법이 있다. pca알고리즘은 데이터 분포에서 variance가 큰 방향의 벡터에 데이터를 정사영하여</span><br><span class="line">차원을 축소시킨다. 이렇게 했을 때 데이터의 구조는 크게 바뀌지 않으면서 차원은 감소시킬수 있기 때문이다.</span><br><span class="line"></span><br><span class="line">Association은 유사한 요소를 찾아 묶는 것이다. 이때 유사성을 파악할때 데이터간의 차이를 측정하는 방법인</span><br><span class="line">유클리드 거리 측정 방법과 비-유클리드 거리 측정법으로 나눌 수 있다.</span><br><span class="line">예를 들어 &#39;근처에 사는 사람은 비슷한 성격을 갖고 있을 것이다&#39; 처럼 묶거나</span><br><span class="line">&#39;피자를 사는 사람은 꼭 콜라를 산다&#39; 처럼 묶을 수 있다.</span><br></pre></td></tr></table></figure><p>지도학습, 비지도학습 : <a href="https://marobiana.tistory.com/155" target="_blank" rel="noopener">tistory</a> <br><br>차원 축소 (pca): <a href="https://excelsior-cjh.tistory.com/167" target="_blank" rel="noopener">tistory</a>, &nbsp; <a href="https://wikidocs.net/7646" target="_blank" rel="noopener">wikidocs</a> <br></p><h2 id="기계학습-목적"><a href="#기계학습-목적" class="headerlink" title="기계학습 목적"></a>기계학습 목적</h2><p><span  style="color: red; font-size:30px;">Data</span><strong>로 부터</strong> <br><br><span  style="color: red; font-size:30px;">Specific</span><strong>문제</strong> <span  style="color: red; font-size:30px">해결</span><strong>을 위한</strong> <br><br><span  style="color: red; font-size:30px;">최적의 모델</span> <strong>만들기</strong></p><h2 id="Data수집부터-예측까지-과정"><a href="#Data수집부터-예측까지-과정" class="headerlink" title="Data수집부터 예측까지 과정"></a>Data수집부터 예측까지 과정</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0. Data 불러들이기</span><br><span class="line">- 적합한 데이터 format으로 변환</span><br><span class="line">1. Tidy data인지 확인하기</span><br><span class="line">2. info</span><br><span class="line">- missing datat 체크 (mino.matrix)</span><br><span class="line">- object, category type은 숫자 타입으로 변환</span><br><span class="line">- 차원의 저주 (필요없는 열 삭제)</span><br><span class="line">- 데이터 갯수 확인 (데이터 갯수가 충분한가)</span><br><span class="line">- 메모리 크기 확인 (내가 불러들일 수 있는 사이즈인가)</span><br><span class="line">- label(target,class) data 포함 여부 확인</span><br><span class="line">3. describe</span><br><span class="line">- 지도학습을 하는 경우 pairplot으로 분류 가능한지 확인</span><br><span class="line">- label data가 유한개인지 무한개인지 확인</span><br><span class="line">- label data 유한 --&gt; classifications</span><br><span class="line">- label data 무한 --&gt; regression</span><br><span class="line">- 상관성 확인해야 하는 경우 heatmap</span><br><span class="line">- boxplot</span><br><span class="line">- 비지도학습을 하는 경우 label data가 없이 즉, 기준이되는 답이 없이 학습해야함.</span><br><span class="line">- 비지도학습의 경우 클러스터링, 시각화와 차원축소, 연관 규칙 학습등의 알고리즘을 사용</span><br><span class="line">4. 왜도, 첨도</span><br><span class="line">- skew</span><br><span class="line">- kurtosis</span><br><span class="line">5. 5총사중 나머지 3개 (head, tail, sample)</span><br><span class="line">6. 목적에 맞게 평가 척도에 따라 최적의 모델 생성</span><br><span class="line">7. 성능 테스트</span><br></pre></td></tr></table></figure><h2 id="label이-유한일때-무한일때"><a href="#label이-유한일때-무한일때" class="headerlink" title="label이 유한일때, 무한일때"></a>label이 유한일때, 무한일때</h2><h3 id="유한일때"><a href="#유한일때" class="headerlink" title="유한일때"></a>유한일때</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">iris</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58871405-e138fe00-86fc-11e9-87a6-f7f31a8a8ca0.JPG" alt="iris"></p><h3 id="무한일때"><a href="#무한일때" class="headerlink" title="무한일때"></a>무한일때</h3><blockquote><p>mpg(연비)를 예측한다고 가정했을 때 연비는 정해져 있는 label이 아니기 때문에 무한 label임으로 regression 즉, 연속된 값을 예측해야 한다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">mpg = sns.load_dataset(<span class="string">'mpg'</span>)</span><br><span class="line">mpg</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58871406-e138fe00-86fc-11e9-94e0-c1ec9499cbd8.JPG" alt="mpg"></p><h2 id="masking-기법으로-missing-data-보기"><a href="#masking-기법으로-missing-data-보기" class="headerlink" title="masking 기법으로 missing data 보기"></a>masking 기법으로 missing data 보기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">mpg = sns.load_dataset(<span class="string">'mpg'</span>)</span><br><span class="line">mpg.horsepower[mpg.horsepower.isnull()] <span class="comment"># or mpg.horsepower[mpg.horsepower.isna()]</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"><span class="number">32</span>    NaN</span><br><span class="line"><span class="number">126</span>   NaN</span><br><span class="line"><span class="number">330</span>   NaN</span><br><span class="line"><span class="number">336</span>   NaN</span><br><span class="line"><span class="number">354</span>   NaN</span><br><span class="line"><span class="number">374</span>   NaN</span><br></pre></td></tr></table></figure><h2 id="missing-data-그래프로-확인하기"><a href="#missing-data-그래프로-확인하기" class="headerlink" title="missing data 그래프로 확인하기"></a>missing data 그래프로 확인하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install missingno</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> mino</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">mpg = sns.load_dataset(<span class="string">'mpg'</span>)</span><br><span class="line">mino.matrix(mpg)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58872893-fb281000-86ff-11e9-8a18-258b12ba14d1.JPG" alt="mino"></p><blockquote><p>data의 양이 충분하지 않을때 missing data가 있으면 적당한 값으로 채워 넣어 성능을 높여주고,<br>적당한 값을 채우기 애매할 때는 missing data가 있는 row를 지워야 한다.</p></blockquote><h2 id="데이터를-쪼개-성능-비교하기"><a href="#데이터를-쪼개-성능-비교하기" class="headerlink" title="데이터를 쪼개 성능 비교하기"></a>데이터를 쪼개 성능 비교하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">iris.species = iris.species.map(&#123;<span class="string">'setosa'</span>: <span class="number">0</span>, <span class="string">'versicolor'</span>:<span class="number">1</span>,<span class="string">'virginica'</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">iris_data = iris[iris.columns[:<span class="number">-1</span>]]</span><br><span class="line">iris[<span class="string">'species'</span>]</span><br><span class="line"></span><br><span class="line">knn.fit(iris_data, iris[<span class="string">'species'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 관례상 행렬은 대문자, 벡터는 소문자로 표기</span></span><br><span class="line">X_train, X_test, y_train , y_test = train_test_split(iris[iris.columns[:<span class="number">-1</span>]], iris.species)</span><br><span class="line">len(X_train.index)</span><br><span class="line">len(X_test.index)</span><br><span class="line">: <span class="number">112</span></span><br><span class="line">  <span class="number">38</span>    </span><br><span class="line"><span class="comment"># 75 : 25 비율로 쪼갬</span></span><br><span class="line"></span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line">knn.predict(X_test)</span><br><span class="line">y_test.values</span><br><span class="line"></span><br><span class="line">: array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], dtype=int64)</span><br><span class="line">  array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], dtype=int64)     </span><br><span class="line"></span><br><span class="line">knn.predict(X_test) == y_test.values       </span><br><span class="line">:</span><br><span class="line">array([ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>,  <span class="literal">True</span>])</span><br><span class="line"></span><br><span class="line">confusion_matrix(y_test, knn.predict(X_test))</span><br><span class="line">:</span><br><span class="line">array([[<span class="number">10</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">       [ <span class="number">0</span>, <span class="number">10</span>,  <span class="number">0</span>],</span><br><span class="line">       [ <span class="number">0</span>,  <span class="number">1</span>, <span class="number">17</span>]], dtype=int64)</span><br><span class="line"><span class="comment"># virginica를 예측한 test에서는 한번은 versicolor이라고 잘못 예측 했기 때문에 0 , 1 , 17</span></span><br></pre></td></tr></table></figure><p><strong>Model</strong> 학습이 끝난 알고리즘 + 데이터를 Model 이라고 한다</p><p><strong>복습시간</strong> 18시 50분 ~ 19시 45분 / 총 55분  </p><p><a id = '22th'></a></p><h1 id="2019년-6월-5일-수요일-22th"><a href="#2019년-6월-5일-수요일-22th" class="headerlink" title="2019년 6월 5일 수요일 22th"></a>2019년 6월 5일 수요일 22th</h1><h2 id="One-hot-encoding-amp-Label-encoding"><a href="#One-hot-encoding-amp-Label-encoding" class="headerlink" title="One hot encoding &amp; Label encoding"></a>One hot encoding &amp; Label encoding</h2><blockquote><p>기계학습으로 예측분석을 하기 위해서는 문자를 숫자로 변환 해야하기 때문에 Encoding을 해야한다<br>그런데 문자를 숫자로 encoding할때 성능에 영향을 미치기 때문에 상황에 따라 encoding 방식을 달리 해야 한다</p></blockquote><h3 id="One-hot-encoding"><a href="#One-hot-encoding" class="headerlink" title="One hot encoding"></a>One hot encoding</h3><blockquote><p>하나의 값만 True이고 나머지는 모두 False인 인코딩 방식</p></blockquote><h4 id="Scikit"><a href="#Scikit" class="headerlink" title="Scikit"></a>Scikit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"></span><br><span class="line">ohe = OneHotEncoder()</span><br><span class="line">t = ohe.fit(data[[<span class="string">'species'</span>]])</span><br><span class="line">t.array()</span><br><span class="line"></span><br><span class="line">: array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       .....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ohe.fit_transform(data[['species']]).toarray() 한번에 가능</span></span><br><span class="line"></span><br><span class="line">ohe.inverse_transform([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line">: array([[<span class="string">'setosa'</span>]], dtype=object)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자로 인코딩 되기 전 문자</span></span><br></pre></td></tr></table></figure><blockquote><p>Scikit’s onehotencoder의 장점은 인코딩 되기 전 문자를 알 수 있다는 것.</p></blockquote><p><span style='background-color:red'>밑의 경우에는 어떻게 해야 할까..?</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(ohe.fit_transform(data[[<span class="string">'species'</span>]]), columns=[<span class="string">'target'</span>])</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">target</span><br><span class="line"><span class="number">0</span>(<span class="number">0</span>, <span class="number">0</span>)\t1<span class="number">.0</span></span><br><span class="line"><span class="number">1</span>(<span class="number">0</span>, <span class="number">0</span>)\t1<span class="number">.0</span></span><br><span class="line"><span class="number">2</span>(<span class="number">0</span>, <span class="number">0</span>)\t1<span class="number">.0</span></span><br><span class="line"><span class="number">3</span>(<span class="number">0</span>, <span class="number">0</span>)\t1<span class="number">.0</span></span><br><span class="line"><span class="number">4</span>(<span class="number">0</span>, <span class="number">0</span>)\t1<span class="number">.0</span></span><br><span class="line"><span class="number">5</span>(<span class="number">0</span>, <span class="number">0</span>)\t1<span class="number">.0</span></span><br></pre></td></tr></table></figure><h4 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">pd.get_dummies(data.species)</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">      setosa   versicolor virginica</span><br><span class="line"><span class="number">0</span><span class="number">1</span>       <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span><span class="number">1</span>       <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2</span><span class="number">1</span>       <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">3</span><span class="number">1</span>       <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">4</span><span class="number">1</span>       <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">5</span><span class="number">1</span>       <span class="number">0</span>    <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="LabelEncoder"><a href="#LabelEncoder" class="headerlink" title="LabelEncoder"></a>LabelEncoder</h3><h4 id="Scikit-1"><a href="#Scikit-1" class="headerlink" title="Scikit"></a>Scikit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"></span><br><span class="line">le = LabelEncoder()</span><br><span class="line">le.fit_transform(data.species)</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"></span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h4 id="pandas-map"><a href="#pandas-map" class="headerlink" title="pandas map"></a>pandas map</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">iris.species = iris.species.map(<span class="string">'setosa'</span>: <span class="number">0</span>, <span class="string">'versicolor'</span>:<span class="number">1</span>,<span class="string">'virginica'</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>Label encoding시 주의</strong> 거리기반 알고리즘을 사용할 때 라벨 인코딩된 값으로 학습을 하게되면 숫자간의 격차로 인해 오차가 생길 위험이 있다. 예를 들어 0, 1, 2로 라벨 인코딩 되었다고 했을 때 0과 1사이 1과 2사이는 둘다 1간격만 있어 상관 없지만 0과 2사이에는 2간격이 생겨 학습시 주의해야 한다. 따라서 label encoding 해야할 때와 하지 말아야 할때를 잘 구분해야 한다.</p><h2 id="Bias-Variance"><a href="#Bias-Variance" class="headerlink" title="Bias , Variance"></a>Bias , Variance</h2><p><img src="https://user-images.githubusercontent.com/33630505/58957665-fd5f9c80-87db-11e9-8094-c5ba63e4375e.JPG" alt="optimal"></p><blockquote><p>Bias가 높으면 값이 편향되어 있어서 값이 모여있고 Variance가 높으면 값이 퍼져있게된다.<br>현실에 적용할 수 있는 모델을 만들기 위해서는 Bias와 Variance가 만나는 지점을 목표로 삼고 모델을 만들어야 한다.</p></blockquote><h2 id="Trade-off"><a href="#Trade-off" class="headerlink" title="Trade off"></a>Trade off</h2><p><img src="https://user-images.githubusercontent.com/33630505/58957666-fd5f9c80-87db-11e9-9dea-1802253b3aad.JPG" alt="tradeoff"></p><blockquote><p>다양한 데이터를 학습시키지 않게 되면 bias가 높아져 정확도가 떨어지는 대신 학습하지 않은 데이터중 일부는 어쩌다 맞추는 경우는 Underfit이다.<br>다양한 데이터를 학습시키긴 했지만 데이터 양이 많지 않아 bias는 낮지만 variance가 높아 학습한 데이터에 대해서만 정확도가 높고 전혀 보지 못한 데이터에 대해서는 정확도가 현저히 낮게 되는 경우는 Overfit이다.</p></blockquote><p><span style="background-color: skyblue">Underfit의 경우 training시 정확성은 떨어지지만 test에서 오차범위가 크지 않게 예측을 할 수 있지만, Overfit의 경우 training시에 정확성은 높지만 test에서 오차범위가 크게 예측을 할 수 가 있다.</span><br><br><br><span style="background-color: skyblue">예를 들어 Underfit인 경우 사과를 맞추는 로봇이 있다고 가정했을 때 ‘사과는 동그랗고 빨갛다’ 라고만 학습시키고 테스트를 했을 때 석류나 자두같이 동그랗고 빨간 과일을 보게되어도 사과라고 예측할 것이다. Overfit의 경우는 ‘지름이 10cm이며 동그랗고 빨간색이다’ 라고 학습 시킨 경우에는 자두같이 작지만 빨간 과일에 대해서는 사과라고 예측하지는 않겠지만 10cm가 넘는 사과이거나 초록색 사과인 경우를 사과라고 판단하지 못하는 오류를 범할 수 있다</span></p><h2 id="Model-성능-평가하는-2가지-방법"><a href="#Model-성능-평가하는-2가지-방법" class="headerlink" title="Model 성능 평가하는 2가지 방법"></a>Model 성능 평가하는 2가지 방법</h2><h3 id="Hold-out"><a href="#Hold-out" class="headerlink" title="Hold out"></a>Hold out</h3><blockquote><p>Train-test-split</p></blockquote><p><strong>Data leakage</strong> training data에는 있지만 test data에는 없어 overfitting된경우 발생하는 문제</p><h3 id="Cross-Validation-교차-검증"><a href="#Cross-Validation-교차-검증" class="headerlink" title="Cross Validation (교차 검증)"></a>Cross Validation (교차 검증)</h3><blockquote><p>n등분 나누어 test, train을 n번 수행하여 평균을 내어 성능을 테스트한다. <br><br>보통 10등분으로 함. <br><br>모든 데이터가 최소 한번은 테스트 데이터로 쓰이도록 한다. <br><br>데이터가 적을때 대충의 성능평가를 할때 cross_val_score를 사용한다 <br></p></blockquote><p>data leakage현상을 방지할 수 있다.<br><br>데이터의 양이 많으면 매우 느리다는 단점이 있다.</p><h2 id="Model의-성능이-좌우되는-요소-2가지"><a href="#Model의-성능이-좌우되는-요소-2가지" class="headerlink" title="Model의 성능이 좌우되는 요소 2가지"></a>Model의 성능이 좌우되는 요소 2가지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 알고리즘</span><br><span class="line">2. 하이퍼 파라미터</span><br></pre></td></tr></table></figure><p><strong>복습시간</strong>  21시 10분 ~ 1시 / 2시간 50분</p><p><a id = '23th'></a></p><h1 id="2019년-6월-10일-월요일-23th"><a href="#2019년-6월-10일-월요일-23th" class="headerlink" title="2019년 6월 10일 월요일 23th"></a>2019년 6월 10일 월요일 23th</h1><h2 id="map-vs-apply"><a href="#map-vs-apply" class="headerlink" title="map vs apply"></a>map vs apply</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. map은 dictionary, 함수 방식 둘다 지원</span><br><span class="line">2. apply는 함수방식만 지원</span><br><span class="line">- apply방식은 args&#x3D;() 옵션으로 재활용 가능한 함수 방식을 사용할 수 있다</span><br></pre></td></tr></table></figure><br><h2 id="count-vs-size"><a href="#count-vs-size" class="headerlink" title="count vs size"></a>count vs size</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count는 미싱데이터를 포함하지 않고</span><br><span class="line">size는 포함한다</span><br></pre></td></tr></table></figure><br><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">a.count(<span class="number">1</span>)</span><br><span class="line">b.count(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">: <span class="number">3</span></span><br><span class="line">  <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">c = np.arange(<span class="number">10</span>)</span><br><span class="line">c.size</span><br><span class="line"></span><br><span class="line">: <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="cut-amp-qcut"><a href="#cut-amp-qcut" class="headerlink" title="cut &amp; qcut"></a>cut &amp; qcut</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><blockquote><p>최저값과 최대값의 간격을 n등분하여 나눔</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">49</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">30</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">100</span>]])</span><br><span class="line">x=pd.DataFrame(a)</span><br><span class="line">x.rename(&#123;<span class="number">0</span>:<span class="string">'x'</span>,<span class="number">1</span>:<span class="string">'y'</span>,<span class="number">2</span>:<span class="string">'z'</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">pd.cut(x.z,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"><span class="number">0</span>    (<span class="number">1.902</span>, <span class="number">51.0</span>]</span><br><span class="line"><span class="number">1</span>    (<span class="number">1.902</span>, <span class="number">51.0</span>]</span><br><span class="line"><span class="number">2</span>    (<span class="number">1.902</span>, <span class="number">51.0</span>]</span><br><span class="line"><span class="number">3</span>    (<span class="number">1.902</span>, <span class="number">51.0</span>]</span><br><span class="line"><span class="number">4</span>    (<span class="number">1.902</span>, <span class="number">51.0</span>]</span><br><span class="line"><span class="number">5</span>    (<span class="number">51.0</span>, <span class="number">100.0</span>]</span><br></pre></td></tr></table></figure><h3 id="qcut"><a href="#qcut" class="headerlink" title="qcut"></a>qcut</h3><blockquote><p>전체 데이터 갯수에서 n%로 나눔</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">49</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">30</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">100</span>]])</span><br><span class="line">x=pd.DataFrame(a)</span><br><span class="line">x.rename(&#123;<span class="number">0</span>:<span class="string">'x'</span>,<span class="number">1</span>:<span class="string">'y'</span>,<span class="number">2</span>:<span class="string">'z'</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">pd.qcut(x.z,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"><span class="number">0</span>    (<span class="number">1.999</span>, <span class="number">25.0</span>]</span><br><span class="line"><span class="number">1</span>    (<span class="number">1.999</span>, <span class="number">25.0</span>]</span><br><span class="line"><span class="number">2</span>    (<span class="number">1.999</span>, <span class="number">25.0</span>]</span><br><span class="line"><span class="number">3</span>    (<span class="number">25.0</span>, <span class="number">100.0</span>]</span><br><span class="line"><span class="number">4</span>    (<span class="number">25.0</span>, <span class="number">100.0</span>]</span><br><span class="line"><span class="number">5</span>    (<span class="number">25.0</span>, <span class="number">100.0</span>]</span><br></pre></td></tr></table></figure><h2 id="Discriminative-vs-Generative"><a href="#Discriminative-vs-Generative" class="headerlink" title="Discriminative  vs Generative"></a>Discriminative  vs Generative</h2><blockquote><p>분류하여 예측 하는 모델에는 두 가지 방식이 있다. Discriminative, Generative</p></blockquote><br><h3 id="Discriminative"><a href="#Discriminative" class="headerlink" title="Discriminative"></a>Discriminative</h3><blockquote><p>입력 데이터들이 있을때 label data를 구별해내는 방식</p></blockquote><blockquote><p>어떤 입력값(input) x가 주어졌을 때 그 결과값(label) y일 확률을 알아내는 것</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/59189720-d4f9e880-8bb5-11e9-97e4-69ec7a2a5d09.JPG" alt="discriminative"></p><p><span style="background-color: skyblue">대표 알고리즘</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Logistic Regression</span><br><span class="line">2. Conditional Random Field</span><br><span class="line">3. Support Vector Machine</span><br><span class="line">4. Linear Regression</span><br></pre></td></tr></table></figure><p><strong>장점</strong> 데이터가 충분할 경우 성능이 좋음</p><p><strong>단점</strong> 데이터가 실제 어떤 모습인지 본질을 이해하기 어려움</p><br><hr>#### SVM(Support Vector Machine)<blockquote><p>SVM은 수학적으로 증명 가능하고 초평면을 경계로 분류하는 알고리즘 이라고 볼 수 있다 <br><br>선형, 비선형 둘다 성능 좋지만 최적화를 고려 안해 속도가 느리다는 단점이 있다</p></blockquote><br><p><img src="https://user-images.githubusercontent.com/33630505/59195422-e8617f80-8bc6-11e9-8f3e-e05d569ec4d9.JPG" alt="svm"></p><hr><h3 id="Generative"><a href="#Generative" class="headerlink" title="Generative"></a>Generative</h3><blockquote><p>입력값과 결과값이 주어질때, 일정한 분포 규칙속에 존재한다는 가정을 한다.</p></blockquote><blockquote><p>관측 데이터 결합확률 분포를 통해 확률 모델을 만들어낸다. 즉 주어진 데이터를 보고 분포 규칙을 생성해 낸다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/59195390-d384ec00-8bc6-11e9-8dc7-dd27c882753f.JPG" alt="generative"></p><br><p><img src="https://user-images.githubusercontent.com/33630505/59195454-fadbb900-8bc6-11e9-955e-51f5048ee8ec.JPG" alt="generative2"></p><p><span style="background-color: skyblue">대표 알고리즘</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Naive Bayes</span><br><span class="line">2. Gaussian discriminant Analysis</span><br><span class="line">3. Gaussian Mixture Model</span><br></pre></td></tr></table></figure><p><strong>장점</strong> 데이터 자체의 특성을 파악하기에 좋다, 데이터를 생성해 새로운 결과물을 얻어낼 수 있다.</p><p><strong>단점</strong> 데이터가 많은 경우 Discriminative에 비해 성능이 떨어 질수 있다.</p><p>Generative &amp; Discriminative: <a href="https://m.blog.naver.com/PostView.nhn?blogId=2feelus&logNo=221078340870&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">naver blog</a><br><br></p><p>선형, 비선형 모델 : <a href="https://tensorflow.blog/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/2-3-7-%EC%BB%A4%EB%84%90-%EC%84%9C%ED%8F%AC%ED%8A%B8-%EB%B2%A1%ED%84%B0-%EB%A8%B8%EC%8B%A0/" target="_blank" rel="noopener">blog</a><br></p><h2 id="LogisticRegression을-제일처음에-하는-이유"><a href="#LogisticRegression을-제일처음에-하는-이유" class="headerlink" title="LogisticRegression을 제일처음에 하는 이유"></a>LogisticRegression을 제일처음에 하는 이유</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LogisticRegression은 데이터가 선형분류로 성능이 좋은지 안좋은지를 보고</span><br><span class="line">데이터가 선형 데이터인가 비선형 데이터인가 판별하는데</span><br><span class="line">기준이 될 수 있기 때문에 시간 절약을 할 수 있다</span><br><span class="line"></span><br><span class="line">선형분류와 비선형분류 알고리즘 둘다 성능이 비슷한 경우 선형데이터라고 간주하고</span><br><span class="line">선형분류 알고리즘 위주로 학습시키는데 사용하고</span><br><span class="line"></span><br><span class="line">선형분류 알고리즘의 성능이 현저하게 낮은 경우 비선형 데이터라고 간주하고</span><br><span class="line">그때부터는 비선형 알고리즘 위주로 학습시키는데 사용하면 시간을 절약할 수 있다</span><br></pre></td></tr></table></figure><br><p><strong>복습시간</strong>  18시 30분 ~ 22시 10분 / 총 3시간 40분</p><p><a id = '24th'></a></p><h1 id="2019년-6월-12일-수요일-24th"><a href="#2019년-6월-12일-수요일-24th" class="headerlink" title="2019년 6월 12일 수요일 24th"></a>2019년 6월 12일 수요일 24th</h1><h2 id="import를-하지-않고-외부-객체의-메소드를-사용-하는-방법"><a href="#import를-하지-않고-외부-객체의-메소드를-사용-하는-방법" class="headerlink" title="import를 하지 않고 외부 객체의 메소드를 사용 하는 방법"></a>import를 하지 않고 외부 객체의 메소드를 사용 하는 방법</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line">$whos</span><br><span class="line">:</span><br><span class="line">Variable   Type         Data/Info</span><br><span class="line">---------------------------------</span><br><span class="line">iris       DataFrame         sepal_length  sepal_&lt;...&gt;n\n[<span class="number">150</span> rows x <span class="number">5</span> columns]</span><br><span class="line">sns        module       &lt;module <span class="string">'seaborn'</span> <span class="keyword">from</span> <span class="string">'C&lt;...&gt;s\\seaborn\\__init__.py'</span>&gt;</span><br><span class="line"></span><br><span class="line">dir(iris)</span><br><span class="line">:</span><br><span class="line">[<span class="string">'T'</span>,</span><br><span class="line"> <span class="string">'_AXIS_ALIASES'</span>,</span><br><span class="line"> <span class="string">'_AXIS_IALIASES'</span>,</span><br><span class="line"> <span class="string">'_AXIS_LEN'</span>,</span><br><span class="line"> ....</span><br><span class="line"> <span class="string">'boxplot'</span>,</span><br><span class="line"> <span class="string">'iloc'</span>,</span><br><span class="line"> <span class="string">'index'</span>,</span><br><span class="line"> <span class="string">'infer_objects'</span>,</span><br><span class="line"> <span class="string">'info'</span>,</span><br><span class="line"> <span class="string">'insert'</span>,</span><br><span class="line"> <span class="string">'interpolate'</span>,</span><br><span class="line"> <span class="string">'isin'</span>,</span><br><span class="line"> .....</span><br></pre></td></tr></table></figure><blockquote><p>DataFrame 객체는  Pandas 프레임워크에 정의된 클래스이다. 따라서 Pandas를 import하지 않고는 사용할 수 없다.</p></blockquote><blockquote><p>하지만 import seaborn만 했는데 iris 객체가 DataFrame 타입으로 나온다. 어떻게 된것일까?</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!pip install seaborn</span><br><span class="line"></span><br><span class="line">Requirement already satisfied: seaborn in c:\users\samsung\anaconda3\lib\site-packages (0.9.0)</span><br><span class="line">Requirement already satisfied: numpy&gt;=1.9.3 in c:\users\samsung\anaconda3\lib\site-packages (from seaborn) (1.16.2)</span><br><span class="line">Requirement already satisfied: scipy&gt;=0.14.0 in c:\users\samsung\anaconda3\lib\site-packages (from seaborn) (1.2.1)</span><br><span class="line">Requirement already satisfied: pandas&gt;=0.15.2 in c:\users\samsung\anaconda3\lib\site-packages (from seaborn) (0.24.2)</span><br><span class="line">Requirement already satisfied: matplotlib&gt;=1.4.3 in c:\users\samsung\anaconda3\lib\site-packages (from seaborn) (3.0.3)</span><br><span class="line">Requirement already satisfied: pytz&gt;=2011k in c:\users\samsung\anaconda3\lib\site-packages (from pandas&gt;=0.15.2-&gt;seaborn) (2018.9)</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><blockquote><p>seaborn을 설치하게되면 numpy, scipy, pandas 등 같이 설치하게 된다. 왜냐하면 seaborn을 사용하기 위해서는 모두 필요하기 때문이다.</p></blockquote><blockquote><p>설치가 되었다고 해서 import하지 않고 쓸수 있다는 말은 아니다. seaborn 패키지 자체에서 numpy든 pandas든 import해서 seaborn으로 dataset을 생성하면 DataFrame 형태로 반환하도록 설계되어 있어 DataFrame 객체가 네임스페이스에 들어 있게 되면 DataFrame이 사용할 수 있는 메소드는 전부 사용할 수 있게 되는 것이다.</p></blockquote><h2 id="상황에-따른-알고리즘-사용법"><a href="#상황에-따른-알고리즘-사용법" class="headerlink" title="상황에 따른 알고리즘 사용법"></a>상황에 따른 알고리즘 사용법</h2><p><img src="https://user-images.githubusercontent.com/33630505/59346577-926b1400-8d4d-11e9-893c-04293ef73f8c.JPG" alt="algorithm"></p><h2 id="데이터의-양이-충분한지-판단하는-방법"><a href="#데이터의-양이-충분한지-판단하는-방법" class="headerlink" title="데이터의 양이 충분한지 판단하는 방법"></a>데이터의 양이 충분한지 판단하는 방법</h2><blockquote><p>데이터 분석시 info정보만으로 데이터의 양이 충분한지 안한지 가늠이 가지 않을때 Learning curve를 확인하여 데이터 양이 충분한지 판단한다.</p></blockquote><blockquote><p>Learning curve란 학습시킬때마다 정확도가 어떻게 달라지는지 추세를 확인하여 training score와 cv score가 만나는 지점 즉, overfitting되기 전 적당한 trade-off 지점을 확인할 수 있는 데이터 양이라고 한다면 데이터가 충분하다는 말</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn_evaluation <span class="keyword">import</span> plot</span><br><span class="line">!pip install sklearn-evaluation</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">data = pd.DataFrame(iris.data, columns=list(<span class="string">'ABCD'</span>))</span><br><span class="line">target = pd.DataFrame(iris.target, columns=[<span class="string">'target'</span>])</span><br><span class="line">iris2 = pd.concat([data, target], axis=<span class="number">1</span>)</span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">train_size, train_score, test_score = learning_curve(knn, iris2.iloc[:,:<span class="number">-1</span>], iris2.iloc[:,<span class="number">-1</span>], cv = <span class="number">10</span>)</span><br><span class="line">plot.learning_curve(train_score, test_score, train_size)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59351013-699c4c00-8d58-11e9-8ada-647b976d4949.JPG" alt="learning curve"></p><h2 id="Learning-curve-amp-LogisticRegression"><a href="#Learning-curve-amp-LogisticRegression" class="headerlink" title="Learning curve &amp; LogisticRegression"></a>Learning curve &amp; LogisticRegression</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">data = make_classification(<span class="number">1000</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">d = pd.DataFrame(data[<span class="number">0</span>])</span><br><span class="line">ta = pd.DataFrame(data[<span class="number">1</span>])</span><br><span class="line">train_size, train_score, test_score = learning_curve(lr, d, ta, cv=<span class="number">10</span>)</span><br><span class="line">plot.learning_curve(train_score, test_score, train_size)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59358328-4f1d9f00-8d67-11e9-83ce-43b6da0756ef.JPG" alt="logistic learning curve"></p><h2 id="하이퍼-파라미터-찾기-GridSearchCV"><a href="#하이퍼-파라미터-찾기-GridSearchCV" class="headerlink" title="하이퍼 파라미터 찾기 (GridSearchCV)"></a>하이퍼 파라미터 찾기 (GridSearchCV)</h2><blockquote><p>GridSearch를 활용하여 for문을 쓰지 않고 하이퍼 파라미터 찾기</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># iris2는 위에서 다룬 예제를 대체한다</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris2.iloc[:,:<span class="number">-1</span>], iris2.iloc[:,<span class="number">-1</span>])</span><br><span class="line">para_grid = &#123;<span class="string">'n_neighbors'</span>: range(<span class="number">2</span>,<span class="number">21</span>), <span class="string">'weights'</span>:[<span class="string">'uniform'</span>, <span class="string">'distance'</span>]&#125;</span><br><span class="line">gri = GridSearchCV(KNeighborsClassifier(), para_grid)</span><br><span class="line">gri.fit(x_train, y_train)  <span class="comment"># cross validation이기 때문에 전체 데이터로 fit 시켜야함</span></span><br><span class="line">gri.best_estimator_</span><br><span class="line">gri.best_params_</span><br><span class="line">gri.param_grid</span><br><span class="line">gri.best_score_</span><br><span class="line">pd.DataFrame(gri.cv_results_).T</span><br><span class="line"></span><br><span class="line">: GridSearchCV(cv=<span class="string">'warn'</span>, error_score=<span class="string">'raise-deprecating'</span>,</span><br><span class="line">       estimator=KNeighborsClassifier(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">           metric_params=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">5</span>, p=<span class="number">2</span>,</span><br><span class="line">           weights=<span class="string">'uniform'</span>),</span><br><span class="line">       fit_params=<span class="literal">None</span>, iid=<span class="string">'warn'</span>, n_jobs=<span class="literal">None</span>,</span><br><span class="line">       param_grid=&#123;<span class="string">'n_neighbors'</span>: range(<span class="number">2</span>, <span class="number">21</span>), <span class="string">'weights'</span>: [<span class="string">'uniform'</span>, <span class="string">'distance'</span>]&#125;,</span><br><span class="line">       pre_dispatch=<span class="string">'2*n_jobs'</span>, refit=<span class="literal">True</span>, return_train_score=<span class="string">'warn'</span>,</span><br><span class="line">       scoring=<span class="literal">None</span>, verbose=<span class="number">0</span>)</span><br><span class="line">KNeighborsClassifier(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">           metric_params=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">13</span>, p=<span class="number">2</span>,</span><br><span class="line">           weights=<span class="string">'distance'</span>)   </span><br><span class="line">&#123;<span class="string">'n_neighbors'</span>: <span class="number">13</span>, <span class="string">'weights'</span>: <span class="string">'distance'</span>&#125;</span><br><span class="line">&#123;<span class="string">'n_neighbors'</span>: range(<span class="number">2</span>, <span class="number">21</span>), <span class="string">'weights'</span>: [<span class="string">'uniform'</span>, <span class="string">'distance'</span>]&#125;</span><br><span class="line"><span class="number">0.9821428571428571</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59363332-f43c7580-8d6f-11e9-8858-226de6ce3354.JPG" alt="gri_results"></p><p><strong>LogisticRegression</strong> LogisticRegression알고리즘은 target data가 2개 이상일때만 Learning curve가 가능하다.</p><p><strong>Cross-validation &amp; Learning curve</strong> Cross-validation으로 성능 체크할때 n개로 나누어 체크를 하는데 이때 자동으로 데이터를 섞고나서 평가를 하기 때문에 데이터가 정렬 되어 있어도 섞어서 평가를 한다. 그런데 Learning curve로 학습 추세를 확인 할때는 데이터를 순서대로 학습시키기 때문에 최소 클래스 2개가 필요한 LogisticRegression알고리즘을 사용할 때는 shuffle 옵션을 True로 줘야 한다.</p><p><strong>복습시간</strong>  19시 ~  22시/ 총 3시간</p><p><a id = '25th'></a></p><h1 id="2019년-6월-13일-목요일-25th"><a href="#2019년-6월-13일-목요일-25th" class="headerlink" title="2019년 6월 13일 목요일 25th"></a>2019년 6월 13일 목요일 25th</h1><h2 id="Supervised-Learning-Process"><a href="#Supervised-Learning-Process" class="headerlink" title="Supervised Learning Process"></a>Supervised Learning Process</h2><p><img src="https://user-images.githubusercontent.com/33630505/59368687-bba19980-8d79-11e9-91bc-63d9a8d3988e.JPG" alt="supervised learning process"></p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Raw Data Collection</span> <br></p><p style = "border: 1.2px solid black; border-radius: 7px; display: block; padding: 10;">데이터 수집, 적합한 데이터 format으로 불러오기.        기초 통계분석하기 위해 보통 DataFrame 형태로 불러오거나 변환해준다.</p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Pre-Processing</span> <br>        </p><p style = "border: 1.2px solid black; border-radius: 7px; display: block; padding: 10;">Tidy Data인지 확인한다.        Tidy Data가 아닐 경우 변수는 열로 관측치는 행으로 구성할 수 있도록 melt로 행, 열 변환해준다. </p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Sampling</span> <br></p><p style = "border: 1.2px solid black; border-radius: 7px; display: block; padding: 10;">Train-Test-Split 하거나 데이터 양이 많지 않아 대략적인 성능을 알고 싶을 때는 Cross Validation. 보통 Big Data를 다룬다는 가정이 있기 때문에 Train-Test-Split을 한다.</p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Pre-Processing</span> <br></p><p style = "border: 1.2px solid black; border-radius: 7px; display: block; padding: 10;">info를 통해 데이터 양이 충분한지, 열 이름에 공백이나 특수문자는 없는지, 데이터 타입이 모두 숫자인지, 불러드릴 수 있는 크기인지, label data를 포함하고 있는지 등을 체크한다.        이때 데이터 양이 충분한지 여부를 확인하고 싶을때는 Learning Curve를 확인한다.        데이터 양이 적다고 판단이 되어 데이터 수집을 해야하는데 데이터 수집할 형편이 되지 않는다면 차원 축소를 고려해본다.        차원 축소는 Scaling, 수작업 등으로 한다.<pre><code>&lt;/p&gt;</code></pre><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Learning Algorithm Training</span> <br>        </p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Hyperparameter Optimization</span> <br></p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Post-Processing</span> <br></p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Final Model</span> <br></p><h2 id="Pandas-Profiling"><a href="#Pandas-Profiling" class="headerlink" title="Pandas-Profiling"></a>Pandas-Profiling</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install pandas-profiling</span><br></pre></td></tr></table></figure><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas_profiling <span class="keyword">import</span> ProfileReport</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">data = load_wine()</span><br><span class="line">data1=pd.DataFrame(data.data, columns=data.feature_names)</span><br><span class="line">data2 = pd.DataFrame(data.target, columns=[<span class="string">'target'</span>])</span><br><span class="line">data3 = pd.concat([data1,data2], axis=<span class="number">1</span>)</span><br><span class="line">ProfileReport(data3)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59434512-a59de280-8e26-11e9-8053-1d2431cea98c.JPG" alt="overview"></p><blockquote><p>ProfileReport를 사용해서 자기만의 전처리 방식을 자동화 할 수도 있다.</p></blockquote><h2 id="차원-축소-3가지-방법"><a href="#차원-축소-3가지-방법" class="headerlink" title="차원 축소 3가지 방법"></a>차원 축소 3가지 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Feature Scaling</span><br><span class="line">2. Feature Selection</span><br><span class="line">3. Dimensionality Reduction</span><br></pre></td></tr></table></figure><h3 id="Feature-Scaling"><a href="#Feature-Scaling" class="headerlink" title="Feature Scaling"></a>Feature Scaling</h3><h4 id="13개-차원에서-5개-차원으로-축소"><a href="#13개-차원에서-5개-차원으로-축소" class="headerlink" title="13개 차원에서 5개 차원으로 축소"></a>13개 차원에서 5개 차원으로 축소</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = load_wine()</span><br><span class="line">wine = pd.DataFrame(data.data, columns=data.feature_names)</span><br><span class="line">target = pd.DataFrame(data.target, columns=[<span class="string">'target'</span>])</span><br><span class="line">wine_data = pd.concat([wine, target], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pca = PCA(<span class="number">5</span>)</span><br><span class="line">wine_pca = pca.fit_transform(wine_data.iloc[:,:<span class="number">-1</span>])</span><br><span class="line">wine2 = pd.DataFrame(wine_pca)</span><br><span class="line">wine2_data = pd.concat([wine2, wine_data.target], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 13차원</span></span><br><span class="line">cross_val_score(KNeighborsClassifier(), wine_data.iloc[:,:<span class="number">-1</span>], wine_data.iloc[:,<span class="number">-1</span>], cv=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 5차원</span></span><br><span class="line">cross_val_score(KNeighborsClassifier(), wine2_data.iloc[:,:<span class="number">-1</span>], wine2_data.iloc[:,<span class="number">-1</span>], cv=<span class="number">10</span>)</span><br><span class="line">:</span><br><span class="line">array([<span class="number">0.68421053</span>, <span class="number">0.61111111</span>, <span class="number">0.66666667</span>, <span class="number">0.55555556</span>, <span class="number">0.66666667</span>,</span><br><span class="line">       <span class="number">0.55555556</span>, <span class="number">0.77777778</span>, <span class="number">0.66666667</span>, <span class="number">0.82352941</span>, <span class="number">0.75</span>      ])</span><br><span class="line"></span><br><span class="line">array([<span class="number">0.68421053</span>, <span class="number">0.61111111</span>, <span class="number">0.66666667</span>, <span class="number">0.55555556</span>, <span class="number">0.66666667</span>,</span><br><span class="line">       <span class="number">0.55555556</span>, <span class="number">0.77777778</span>, <span class="number">0.66666667</span>, <span class="number">0.82352941</span>, <span class="number">0.75</span>      ])</span><br></pre></td></tr></table></figure><blockquote><p>차원 축소 전과 축소 후 성능 비교후 성능이 축소 전과 비슷하다면 상관성이 높다는 의미로 차원을 축소해도 괜찮다.</p></blockquote><blockquote><p>데이터의 양이 차원에 비해 작을때 차원 축소로 성능 향상을 하기도 한다.</p></blockquote><p><span style="background-color:red">밑에 부터는 복습 자세하게 다시하기</span></p><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><blockquote><p>pipeline은 …</p></blockquote><h3 id="Pipeline만드는-두가지-방법"><a href="#Pipeline만드는-두가지-방법" class="headerlink" title="Pipeline만드는 두가지 방법"></a>Pipeline만드는 두가지 방법</h3><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">Pipeline</span> <br></p><p><span style = "border: 1.2px solid rgb(45, 164, 164); background-color: rgb(45, 164, 164); color: white">make_pipeline</span> <br></p><h3 id="Pipeline-1"><a href="#Pipeline-1" class="headerlink" title="Pipeline"></a>Pipeline</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> mino</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line">data = load_breast_cancer()</span><br><span class="line">X, y = pd.DataFrame(data.data), pd.DataFrame(data.target, columns=[<span class="string">'target'</span>])</span><br><span class="line">cancer = pd.concat([X, y], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t = cross_val_score(KNeighborsClassifier(),</span><br><span class="line">                    cancer.iloc[:, :<span class="number">-1</span>],</span><br><span class="line">                    cancer.iloc[:, <span class="number">-1</span>],</span><br><span class="line">                    cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(cancer.iloc[:, :<span class="number">-1</span>], cancer.iloc[:, <span class="number">-1</span>])</span><br><span class="line">pipe = Pipeline([(<span class="string">'scaler'</span>, MinMaxScaler()), (<span class="string">'knn'</span>, KNeighborsClassifier())])</span><br><span class="line">pipe.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">: Pipeline(memory=<span class="literal">None</span>,</span><br><span class="line">         steps=[(<span class="string">'scaler'</span>, MinMaxScaler(copy=<span class="literal">True</span>, feature_range=(<span class="number">0</span>, <span class="number">1</span>))),</span><br><span class="line">                (<span class="string">'knn'</span>,</span><br><span class="line">                 KNeighborsClassifier(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>,</span><br><span class="line">                                      metric=<span class="string">'minkowski'</span>, metric_params=<span class="literal">None</span>,</span><br><span class="line">                                      n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">5</span>, p=<span class="number">2</span>,</span><br><span class="line">                                      weights=<span class="string">'uniform'</span>))],</span><br><span class="line">         verbose=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="표준화"><a href="#표준화" class="headerlink" title="표준화"></a>표준화</h2><h2 id="GridSearchCV-Pipeline-하는-방법"><a href="#GridSearchCV-Pipeline-하는-방법" class="headerlink" title="GridSearchCV + Pipeline 하는 방법"></a>GridSearchCV + Pipeline 하는 방법</h2><p><strong>복습시간</strong>  19시 ~ 22시 / 총 3시간  </p><p><a id = '26th'></a></p><h1 id="2019년-6월-14일-금요일-26th"><a href="#2019년-6월-14일-금요일-26th" class="headerlink" title="2019년 6월 14일 금요일 26th"></a>2019년 6월 14일 금요일 26th</h1><h2 id="Unsupervised-Learnling"><a href="#Unsupervised-Learnling" class="headerlink" title="Unsupervised Learnling"></a>Unsupervised Learnling</h2><h2 id="k-means"><a href="#k-means" class="headerlink" title="k-means"></a>k-means</h2><blockquote><p>근처 값의 평균을 내어 n개로 묶는 clustering 방법</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">iris_data = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line"></span><br><span class="line">km = KMeans(<span class="number">3</span>)  <span class="comment"># 3가지로 묶는다</span></span><br><span class="line">vars(km.fit(iris_data.values))  </span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">&#123;<span class="string">'n_clusters'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'init'</span>: <span class="string">'k-means++'</span>,</span><br><span class="line"> <span class="string">'max_iter'</span>: <span class="number">300</span>,</span><br><span class="line"> <span class="string">'tol'</span>: <span class="number">0.0001</span>,</span><br><span class="line"> <span class="string">'precompute_distances'</span>: <span class="string">'auto'</span>,</span><br><span class="line"> <span class="string">'n_init'</span>: <span class="number">10</span>,</span><br><span class="line"> <span class="string">'verbose'</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">'random_state'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'copy_x'</span>: <span class="literal">True</span>,</span><br><span class="line"> <span class="string">'n_jobs'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'algorithm'</span>: <span class="string">'auto'</span>,</span><br><span class="line"> <span class="string">'cluster_centers_'</span>: array([[<span class="number">6.85</span>      , <span class="number">3.07368421</span>, <span class="number">5.74210526</span>, <span class="number">2.07105263</span>],</span><br><span class="line">        [<span class="number">5.006</span>     , <span class="number">3.428</span>     , <span class="number">1.462</span>     , <span class="number">0.246</span>     ],</span><br><span class="line">        [<span class="number">5.9016129</span> , <span class="number">2.7483871</span> , <span class="number">4.39354839</span>, <span class="number">1.43387097</span>]]),</span><br><span class="line"> <span class="string">'labels_'</span>: array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]),</span><br><span class="line"> <span class="string">'inertia_'</span>: <span class="number">78.85144142614601</span>,</span><br><span class="line"> <span class="string">'n_iter_'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>k-means : <a href="https://ratsgo.github.io/machine%20learning/2017/04/19/KC/" target="_blank" rel="noopener">github blog</a> <br><br><br></p><h3 id="k-means로-cluster-성능-파악하기"><a href="#k-means로-cluster-성능-파악하기" class="headerlink" title="k-means로 cluster 성능 파악하기"></a>k-means로 cluster 성능 파악하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">iris.target  <span class="comment"># target data (정답)</span></span><br><span class="line">:</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">km.labels_   <span class="comment"># cluster로 묶은 답</span></span><br><span class="line">:</span><br><span class="line">array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">np.where(km.labels_==<span class="number">1</span>)  <span class="comment"># 0 ~ 49 / 100% 맞춤</span></span><br><span class="line">:</span><br><span class="line">(array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line">        <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>,</span><br><span class="line">        <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>],</span><br><span class="line">       dtype=int64),)</span><br><span class="line">np.where(km.labels_==<span class="number">2</span>)  <span class="comment"># 50 ~ 99 / 101,106,112 ~ 149 / 2개 틀림  </span></span><br><span class="line">:</span><br><span class="line">(array([ <span class="number">50</span>,  <span class="number">51</span>,  <span class="number">53</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">57</span>,  <span class="number">58</span>,  <span class="number">59</span>,  <span class="number">60</span>,  <span class="number">61</span>,  <span class="number">62</span>,  <span class="number">63</span>,</span><br><span class="line">         <span class="number">64</span>,  <span class="number">65</span>,  <span class="number">66</span>,  <span class="number">67</span>,  <span class="number">68</span>,  <span class="number">69</span>,  <span class="number">70</span>,  <span class="number">71</span>,  <span class="number">72</span>,  <span class="number">73</span>,  <span class="number">74</span>,  <span class="number">75</span>,  <span class="number">76</span>,</span><br><span class="line">         <span class="number">78</span>,  <span class="number">79</span>,  <span class="number">80</span>,  <span class="number">81</span>,  <span class="number">82</span>,  <span class="number">83</span>,  <span class="number">84</span>,  <span class="number">85</span>,  <span class="number">86</span>,  <span class="number">87</span>,  <span class="number">88</span>,  <span class="number">89</span>,  <span class="number">90</span>,</span><br><span class="line">         <span class="number">91</span>,  <span class="number">92</span>,  <span class="number">93</span>,  <span class="number">94</span>,  <span class="number">95</span>,  <span class="number">96</span>,  <span class="number">97</span>,  <span class="number">98</span>,  <span class="number">99</span>, <span class="number">101</span>, <span class="number">106</span>, <span class="number">113</span>, <span class="number">114</span>,</span><br><span class="line">        <span class="number">119</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">133</span>, <span class="number">138</span>, <span class="number">142</span>, <span class="number">146</span>, <span class="number">149</span>], dtype=int64),)</span><br><span class="line">np.where(km.labels_==<span class="number">0</span>)  <span class="comment"># 100 ~ 149 / 52, 77 / 14개 틀림</span></span><br><span class="line">:</span><br><span class="line">(array([ <span class="number">52</span>,  <span class="number">77</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>,</span><br><span class="line">        <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">120</span>, <span class="number">122</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>,</span><br><span class="line">        <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">147</span>, <span class="number">148</span>],</span><br><span class="line">       dtype=int64),)</span><br></pre></td></tr></table></figure><h2 id="dbscan"><a href="#dbscan" class="headerlink" title="dbscan"></a>dbscan</h2><blockquote><p>묶음 갯수 파악하기</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN, dbscan  <span class="comment"># 둘다 같은 기능</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">iris_data = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line">dbs = DBSCAN()</span><br><span class="line">dbs.fit(iris_data.iloc[:,:<span class="number">-1</span>])</span><br><span class="line">vars(dbs.fit(iris_data.iloc[:,:<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">DBSCAN(algorithm=<span class="string">'auto'</span>, eps=<span class="number">0.5</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'euclidean'</span>,</span><br><span class="line">    metric_params=<span class="literal">None</span>, min_samples=<span class="number">5</span>, n_jobs=<span class="literal">None</span>, p=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'eps'</span>: <span class="number">0.5</span>,</span><br><span class="line"> <span class="string">'min_samples'</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="string">'metric'</span>: <span class="string">'euclidean'</span>,</span><br><span class="line"> <span class="string">'metric_params'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'algorithm'</span>: <span class="string">'auto'</span>,</span><br><span class="line"> <span class="string">'leaf_size'</span>: <span class="number">30</span>,</span><br><span class="line"> <span class="string">'p'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'n_jobs'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'core_sample_indices_'</span>: array([  <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>,   <span class="number">8</span>,   <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>,  <span class="number">12</span>,</span><br><span class="line">         <span class="number">13</span>,  <span class="number">16</span>,  <span class="number">17</span>,  <span class="number">19</span>,  <span class="number">20</span>,  <span class="number">21</span>,  <span class="number">23</span>,  <span class="number">24</span>,  <span class="number">25</span>,  <span class="number">26</span>,  <span class="number">27</span>,  <span class="number">28</span>,  <span class="number">29</span>,</span><br><span class="line">         <span class="number">30</span>,  <span class="number">31</span>,  <span class="number">32</span>,  <span class="number">33</span>,  <span class="number">34</span>,  <span class="number">35</span>,  <span class="number">36</span>,  <span class="number">37</span>,  <span class="number">38</span>,  <span class="number">39</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">43</span>,</span><br><span class="line">         <span class="number">44</span>,  <span class="number">45</span>,  <span class="number">46</span>,  <span class="number">47</span>,  <span class="number">48</span>,  <span class="number">49</span>,  <span class="number">50</span>,  <span class="number">51</span>,  <span class="number">52</span>,  <span class="number">53</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">56</span>,</span><br><span class="line">         <span class="number">58</span>,  <span class="number">61</span>,  <span class="number">63</span>,  <span class="number">65</span>,  <span class="number">66</span>,  <span class="number">67</span>,  <span class="number">69</span>,  <span class="number">70</span>,  <span class="number">71</span>,  <span class="number">72</span>,  <span class="number">73</span>,  <span class="number">74</span>,  <span class="number">75</span>,</span><br><span class="line">         <span class="number">76</span>,  <span class="number">77</span>,  <span class="number">78</span>,  <span class="number">79</span>,  <span class="number">80</span>,  <span class="number">81</span>,  <span class="number">82</span>,  <span class="number">83</span>,  <span class="number">84</span>,  <span class="number">85</span>,  <span class="number">86</span>,  <span class="number">88</span>,  <span class="number">89</span>,</span><br><span class="line">         <span class="number">90</span>,  <span class="number">91</span>,  <span class="number">92</span>,  <span class="number">94</span>,  <span class="number">95</span>,  <span class="number">96</span>,  <span class="number">97</span>,  <span class="number">99</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">110</span>,</span><br><span class="line">        <span class="number">111</span>, <span class="number">112</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">132</span>,</span><br><span class="line">        <span class="number">133</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">149</span>],</span><br><span class="line">       dtype=int64),</span><br><span class="line"> <span class="string">'labels_'</span>: array([ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,</span><br><span class="line">         <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,</span><br><span class="line">        <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,</span><br><span class="line">         <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,</span><br><span class="line">         <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>,  <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">         <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">         <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>],</span><br><span class="line">       dtype=int64),</span><br><span class="line"> <span class="string">'components_'</span>: array([[<span class="number">5.1</span>, <span class="number">3.5</span>, <span class="number">1.4</span>, <span class="number">0.2</span>],</span><br><span class="line">        [<span class="number">4.9</span>, <span class="number">3.</span> , <span class="number">1.4</span>, <span class="number">0.2</span>],</span><br><span class="line">        [<span class="number">4.7</span>, <span class="number">3.2</span>, <span class="number">1.3</span>, <span class="number">0.2</span>],</span><br><span class="line">......</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min_samples는 영역 안의 최소 데이터 갯수</span><br><span class="line">eps는 영역 크기</span><br></pre></td></tr></table></figure><br><h2 id="Agglomerative-Clustering"><a href="#Agglomerative-Clustering" class="headerlink" title="Agglomerative Clustering"></a>Agglomerative Clustering</h2><h3 id="Dendrograms"><a href="#Dendrograms" class="headerlink" title="Dendrograms"></a>Dendrograms</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.cluster.hierarchy <span class="keyword">import</span> dendrogram, linkage</span><br><span class="line"></span><br><span class="line">linkage_matrix = linkage(X, <span class="string">'ward'</span>)</span><br><span class="line">figure = plt.figure(figsize=(<span class="number">7.5</span>, <span class="number">5</span>))</span><br><span class="line">dendrogram(</span><br><span class="line">    linkage_matrix, <span class="comment">#</span></span><br><span class="line">    color_threshold=<span class="number">0</span>,</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'Hierarchical Clustering Dendrogram (Ward)'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'sample index'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'distance'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59520588-44990c00-8f05-11e9-99bb-06d03b26ff40.JPG" alt="dendrogram"></p><h2 id="mglearn으로-clustering-시각화-해서-보기"><a href="#mglearn으로-clustering-시각화-해서-보기" class="headerlink" title="mglearn으로 clustering 시각화 해서 보기"></a>mglearn으로 clustering 시각화 해서 보기</h2><h3 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install mglearn</span><br></pre></td></tr></table></figure><h3 id="k-means방식으로-clustering-하는-과정"><a href="#k-means방식으로-clustering-하는-과정" class="headerlink" title="k-means방식으로 clustering 하는 과정"></a>k-means방식으로 clustering 하는 과정</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mglearn</span><br><span class="line">mglearn.plot_kmeans.plot_kmeans_algorithm()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59517495-ab66f700-8efe-11e9-8de2-fb47d3d01680.JPG" alt="kmeans"></p><h3 id="k-means-boundaries"><a href="#k-means-boundaries" class="headerlink" title="k-means boundaries"></a>k-means boundaries</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mglearn</span><br><span class="line">mglearn.plot_kmeans.plot_kmeans_boundaries()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59517493-ab66f700-8efe-11e9-87f4-74532ab636a1.JPG" alt="boundaries"></p><h3 id="agglomerative"><a href="#agglomerative" class="headerlink" title="agglomerative"></a>agglomerative</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mglearn</span><br><span class="line">mglearn.plot_agglomerative.plot_agglomerative_algorithm()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59517492-aace6080-8efe-11e9-944c-f61807ea32e0.JPG" alt="agglomerative"></p><h3 id="dbscan-1"><a href="#dbscan-1" class="headerlink" title="dbscan"></a>dbscan</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mglearn</span><br><span class="line">mglearn.plot_dbscan.plot_dbscan()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59519335-9db37080-8f02-11e9-8caa-822cf5e52152.JPG" alt="dbscan"></p><h2 id="dbscan-k-means"><a href="#dbscan-k-means" class="headerlink" title="dbscan + k-means"></a>dbscan + k-means</h2><hr><span style="background-color: red">알고리즘 만들기는 다음시간에 계속</span><h2 id="알고리즘-만들기"><a href="#알고리즘-만들기" class="headerlink" title="알고리즘 만들기"></a>알고리즘 만들기</h2><h3 id="Duck-typing-방식"><a href="#Duck-typing-방식" class="headerlink" title="Duck typing 방식"></a>Duck typing 방식</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEstimator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'a'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X,y)</span>:</span></span><br><span class="line">        print(<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">my = MyEstimator()</span><br><span class="line">my.fit(data.iloc[:,:<span class="number">-1</span>],data.iloc[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.dummy <span class="keyword">import</span> DummyClassifier</span><br><span class="line">dum = DummyClassifier() <span class="comment"># 사람처럼 분류하는 알고리즘</span></span><br></pre></td></tr></table></figure><h3 id="BaseEstimator-상속-방식"><a href="#BaseEstimator-상속-방식" class="headerlink" title="BaseEstimator 상속 방식"></a>BaseEstimator 상속 방식</h3><p><strong>Dummy 알고리즘</strong> Dummy 알고리즘과 내가 만든 알고리즘과 비교해서 성능이 좋지 못하다면 자신만의 알고리즘을 만들 필요가 딱히 없음…</p><p><strong>복습시간</strong>  19시 45분 ~ 24시 / 총 4시간 15분  </p><p><a id = '27th'></a></p><h1 id="2019년-6월-17일-월요일-27th"><a href="#2019년-6월-17일-월요일-27th" class="headerlink" title="2019년 6월 17일 월요일 27th"></a>2019년 6월 17일 월요일 27th</h1><h2 id="영화-추천-모델-만들기"><a href="#영화-추천-모델-만들기" class="headerlink" title="영화 추천 모델 만들기"></a>영화 추천 모델 만들기</h2><h3 id="Collaborative-filtering"><a href="#Collaborative-filtering" class="headerlink" title="Collaborative filtering"></a>Collaborative filtering</h3><blockquote><p>나와 비슷한 사람을 찾아 내가본 영화를 제외한 비슷한 사람이 본 영화 추천</p></blockquote><h3 id="필요한-데이터-불러오기"><a href="#필요한-데이터-불러오기" class="headerlink" title="필요한 데이터 불러오기"></a>필요한 데이터 불러오기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'u.data'</span>, delimiter=<span class="string">'\t'</span>, header=<span class="literal">None</span>, engine=<span class="string">'python'</span>, usecols=range(<span class="number">3</span>),names=[<span class="string">'user_id'</span>,<span class="string">'movie_id'</span>,<span class="string">'ratings'</span>])</span><br><span class="line">items=pd.read_csv(<span class="string">'u.item'</span>, delimiter=<span class="string">'|'</span>, header=<span class="literal">None</span>, engine=<span class="string">'python'</span>, usecols=range(<span class="number">3</span>), names=[<span class="string">'movie_id'</span>,<span class="string">'title'</span>,<span class="string">'year'</span>])</span><br><span class="line"></span><br><span class="line">data.head(<span class="number">4</span>)</span><br><span class="line">:</span><br><span class="line">user_idmovie_idratings</span><br><span class="line"><span class="number">0</span><span class="number">196</span><span class="number">242</span><span class="number">3</span></span><br><span class="line"><span class="number">1</span><span class="number">186</span><span class="number">302</span><span class="number">3</span></span><br><span class="line"><span class="number">2</span><span class="number">22</span><span class="number">377</span><span class="number">1</span></span><br><span class="line"><span class="number">3</span><span class="number">244</span><span class="number">51</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line">items.head(<span class="number">4</span>)</span><br><span class="line">:</span><br><span class="line">movie_idtitleyear</span><br><span class="line"><span class="number">0</span><span class="number">1</span>Toy Story (<span class="number">1995</span>)<span class="number">01</span>-Jan<span class="number">-1995</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span>GoldenEye (<span class="number">1995</span>)<span class="number">01</span>-Jan<span class="number">-1995</span></span><br><span class="line"><span class="number">2</span><span class="number">3</span>Four Rooms (<span class="number">1995</span>)<span class="number">01</span>-Jan<span class="number">-1995</span></span><br><span class="line"><span class="number">3</span><span class="number">4</span>Get Shorty (<span class="number">1995</span>)<span class="number">01</span>-Jan<span class="number">-1995</span></span><br></pre></td></tr></table></figure><h3 id="DESCR-README-등-도메인-정보-확인하기"><a href="#DESCR-README-등-도메인-정보-확인하기" class="headerlink" title="DESCR, README 등 도메인 정보 확인하기"></a>DESCR, README 등 도메인 정보 확인하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">u.data     -- The full u data set, 100000 ratings by 943 users on 1682 items.</span><br><span class="line">              Each user has rated at least 20 movies.  Users and items are</span><br><span class="line">              numbered consecutively from 1.  The data is randomly</span><br><span class="line">              ordered. This is a tab separated list of</span><br><span class="line">         user id | item id | rating | timestamp.</span><br><span class="line">              The time stamps are unix seconds since 1&#x2F;1&#x2F;1970 UTC</span><br><span class="line"></span><br><span class="line">u.item     -- Information about the items (movies); this is a tab separated</span><br><span class="line">              list of</span><br><span class="line">              movie id | movie title | release date | video release date |</span><br><span class="line">              IMDb URL | unknown | Action | Adventure | Animation |</span><br><span class="line">              Children&#39;s | Comedy | Crime | Documentary | Drama | Fantasy |</span><br><span class="line">              Film-Noir | Horror | Musical | Mystery | Romance | Sci-Fi |</span><br><span class="line">              Thriller | War | Western |</span><br><span class="line">              The last 19 fields are the genres, a 1 indicates the movie</span><br><span class="line">              is of that genre, a 0 indicates it is not; movies can be in</span><br><span class="line">              several genres at once.</span><br><span class="line">              The movie ids are the ones used in the u.data data set.</span><br></pre></td></tr></table></figure><h3 id="불러온-정보-필요한-형태로-변형하기"><a href="#불러온-정보-필요한-형태로-변형하기" class="headerlink" title="불러온 정보 필요한 형태로 변형하기"></a>불러온 정보 필요한 형태로 변형하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 유저 아이디 + 영화 아이디 + 평점 + 영화 이름 + 개봉년도 DataFrame 만들기</span></span><br><span class="line">user_movie_rate=pd.merge(data,items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># user index, item columns로 만들기</span></span><br><span class="line">user_item = data.set_index([<span class="string">'user_id'</span>,<span class="string">'movie_id'</span>]).unstack().fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="회원간의-상관성-보기-어떤-연관성-전략을-세울지-고민"><a href="#회원간의-상관성-보기-어떤-연관성-전략을-세울지-고민" class="headerlink" title="회원간의 상관성 보기 (어떤 연관성 전략을 세울지 고민)"></a>회원간의 상관성 보기 (어떤 연관성 전략을 세울지 고민)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_item에서 user가 index이기 때문에 corr하기 위해 Transform 해야함</span></span><br><span class="line">user_item_corr = user_item.T.corr()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59600997-c4a9b680-913d-11e9-983e-e5482a173c99.JPG" alt="user_corr"></p><h3 id="연관성이-높은-3명-뽑기-세부-전략-세우기"><a href="#연관성이-높은-3명-뽑기-세부-전략-세우기" class="headerlink" title="연관성이 높은 3명 뽑기 (세부 전략 세우기)"></a>연관성이 높은 3명 뽑기 (세부 전략 세우기)</h3><blockquote><p>회원 번호 2를 나라고 가정</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_item_corr.loc[<span class="number">2</span>].sort_values(ascending=<span class="literal">False</span>)[:<span class="number">4</span>]</span><br><span class="line">:</span><br><span class="line">user_id</span><br><span class="line"><span class="number">2</span>      <span class="number">1.000000</span></span><br><span class="line"><span class="number">701</span>    <span class="number">0.570307</span></span><br><span class="line"><span class="number">931</span>    <span class="number">0.495166</span></span><br><span class="line"><span class="number">460</span>    <span class="number">0.485913</span></span><br><span class="line">Name: <span class="number">2</span>, dtype: float64</span><br></pre></td></tr></table></figure><h3 id="나와-비슷한-사람-영화-목록-나의-영화-목록"><a href="#나와-비슷한-사람-영화-목록-나의-영화-목록" class="headerlink" title="나와 비슷한 사람 영화 목록 - 나의 영화 목록"></a>나와 비슷한 사람 영화 목록 - 나의 영화 목록</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 나의 영화 목록</span></span><br><span class="line">my_movie_list = user_movie_rate[user_movie_rate.user_id==<span class="number">2</span>]</span><br><span class="line">my_movie_list = my_movie_list.movie_id</span><br><span class="line">my_movie_list=set(my_movie_list)</span><br><span class="line">my_movie_list.__len__()</span><br><span class="line">:</span><br><span class="line"><span class="number">62</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나와 비슷한 사람 영화 목록</span></span><br><span class="line">other = user_movie_rate[user_movie_rate.user_id.isin([<span class="number">701</span>]).movie_id.value</span><br><span class="line">other_movie_list = set(other)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나와 비슷한 사람 영화 목록 - 나의 영화 목록</span></span><br><span class="line">reco_movie_to_me = other_movie_list - my_movie_list</span><br></pre></td></tr></table></figure><h3 id="최종-추천-영화-목록-출력하기"><a href="#최종-추천-영화-목록-출력하기" class="headerlink" title="최종 추천 영화 목록 출력하기"></a>최종 추천 영화 목록 출력하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">reco_movie_to_me=user_movie_rate[user_movie_rate.movie_id.isin(reco_movie_to_me)].sort_values(<span class="string">'ratings'</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">final_reco_movie_to_me = set(reco_movie_to_me.movie_id.values)</span><br><span class="line">final_my_reco_movie</span><br><span class="line">:</span><br><span class="line">&#123;<span class="number">124</span>, <span class="number">326</span>, <span class="number">328</span>, <span class="number">333</span>, <span class="number">344</span>, <span class="number">689</span>, <span class="number">690</span>, <span class="number">750</span>, <span class="number">751</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 최종 추천 영화 목록</span></span><br><span class="line">list(map(<span class="keyword">lambda</span> x:set(user_movie_rate.title[user_movie_rate.movie_id==x].values),final_my_reco_movie))</span><br><span class="line">:</span><br><span class="line">[&#123;<span class="string">'G.I. Jane (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Conspiracy Theory (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Game, The (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Amistad (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Tomorrow Never Dies (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Jackal, The (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Seven Years in Tibet (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Apostle, The (1997)'</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'Lone Star (1996)'</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="Pandas-format-대표값-설정-없이-그대로-변형하는-4가지-방법"><a href="#Pandas-format-대표값-설정-없이-그대로-변형하는-4가지-방법" class="headerlink" title="Pandas format 대표값 설정 없이 그대로 변형하는 4가지 방법"></a>Pandas format 대표값 설정 없이 그대로 변형하는 4가지 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. stack</span><br><span class="line">2. unstack</span><br><span class="line">3. melt</span><br><span class="line">4. pivot</span><br></pre></td></tr></table></figure><h3 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'u.data'</span>, delimiter=<span class="string">'\t'</span>, header=<span class="literal">None</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">data.rename(&#123;<span class="number">0</span>:<span class="string">'user_id'</span>,<span class="number">1</span>:<span class="string">'movie_id'</span>,<span class="number">2</span>:<span class="string">'ratings'</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">data=data.pivot(<span class="string">'user_id'</span>,<span class="string">'movie_id'</span>,<span class="string">'ratings'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59602677-4a2f6580-9142-11e9-93a6-c1cf399baa65.JPG" alt="pivot"></p><h2 id="Surprise"><a href="#Surprise" class="headerlink" title="Surprise"></a>Surprise</h2><h3 id="설치-2"><a href="#설치-2" class="headerlink" title="설치"></a>설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install surprise</span><br></pre></td></tr></table></figure><h3 id="Surprise를-활용하여-예상-별점-예측하기"><a href="#Surprise를-활용하여-예상-별점-예측하기" class="headerlink" title="Surprise를 활용하여 예상 별점 예측하기"></a>Surprise를 활용하여 예상 별점 예측하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Dataset, Reader, SVD, KNNBasic</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'u.data'</span>, delimiter=<span class="string">'\t'</span>, header=<span class="literal">None</span>, engine=<span class="string">'python'</span>, usecols=range(<span class="number">3</span>),names=[<span class="string">'user_id'</span>,<span class="string">'movie_id'</span>,<span class="string">'ratings'</span>])  </span><br><span class="line"></span><br><span class="line">sur_data = Dataset.load_from_df(data, Reader(rating_scale=(<span class="number">1</span>,<span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">kb = KNNBasic()</span><br><span class="line">svd = SVD()</span><br><span class="line"></span><br><span class="line">kb.fit(sur_data.build_full_trainset())</span><br><span class="line">svd.fit(sur_data.build_full_trainset())</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;124, 326, 328, 333, 344, 689, 690, 750, 751&#125; 위 예제에서 회원아이디 2인 사람의 영화 추천목록</span></span><br><span class="line"></span><br><span class="line">svd.predict(<span class="number">2</span>,<span class="number">344</span>)</span><br><span class="line">:</span><br><span class="line">Prediction(uid=<span class="number">2</span>, iid=<span class="number">344</span>, r_ui=<span class="literal">None</span>, est=<span class="number">3.7619267139014876</span>, details=&#123;<span class="string">'was_impossible'</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">svd.predict(<span class="number">2</span>,<span class="number">124</span>)</span><br><span class="line">:</span><br><span class="line">Prediction(uid=<span class="number">2</span>, iid=<span class="number">124</span>, r_ui=<span class="literal">None</span>, est=<span class="number">4.160187263892665</span>, details=&#123;<span class="string">'was_impossible'</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">kb.predict(<span class="number">2</span>,<span class="number">124</span>)</span><br><span class="line">:</span><br><span class="line">Prediction(uid=<span class="number">2</span>, iid=<span class="number">124</span>, r_ui=<span class="literal">None</span>, est=<span class="number">4.065428928759065</span>, details=&#123;<span class="string">'actual_k'</span>: <span class="number">40</span>, <span class="string">'was_impossible'</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">kb.predict(<span class="number">2</span>,<span class="number">344</span>)</span><br><span class="line">:</span><br><span class="line">Prediction(uid=<span class="number">2</span>, iid=<span class="number">344</span>, r_ui=<span class="literal">None</span>, est=<span class="number">3.696881271344415</span>, details=&#123;<span class="string">'actual_k'</span>: <span class="number">40</span>, <span class="string">'was_impossible'</span>: <span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Scikit으로-예상-별점-예측하기"><a href="#Scikit으로-예상-별점-예측하기" class="headerlink" title="Scikit으로 예상 별점 예측하기"></a>Scikit으로 예상 별점 예측하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"></span><br><span class="line">knn = KNeighborsRegressor(<span class="number">3</span>)</span><br><span class="line">knn.fit(data.iloc[:,:<span class="number">-1</span>],data.iloc[:,<span class="number">-1</span>])</span><br><span class="line">:</span><br><span class="line">KNeighborsRegressor(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">          metric_params=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">3</span>, p=<span class="number">2</span>,</span><br><span class="line">          weights=<span class="string">'uniform'</span>)</span><br><span class="line"></span><br><span class="line">knn.predict([[<span class="number">2</span>,<span class="number">344</span>]])</span><br><span class="line">:</span><br><span class="line">array([<span class="number">3.33333333</span>])</span><br><span class="line"></span><br><span class="line">knn.predict([[<span class="number">2</span>,<span class="number">124</span>]])</span><br><span class="line">:</span><br><span class="line">array([<span class="number">4.</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">knn = KNeighborsRegressor(<span class="number">40</span>)</span><br><span class="line">knn.fit(data.iloc[:,:<span class="number">-1</span>],data.iloc[:,<span class="number">-1</span>])</span><br><span class="line">:</span><br><span class="line">KNeighborsRegressor(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">          metric_params=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">40</span>, p=<span class="number">2</span>,</span><br><span class="line">          weights=<span class="string">'uniform'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">knn.predict([[<span class="number">2</span>,<span class="number">344</span>]])</span><br><span class="line">:</span><br><span class="line">array([<span class="number">3.075</span>])</span><br><span class="line"></span><br><span class="line">knn.predict([[<span class="number">2</span>,<span class="number">124</span>]])</span><br><span class="line">:</span><br><span class="line">array([<span class="number">3.9</span>])</span><br></pre></td></tr></table></figure><h2 id="plot-knn-regression-mglearn"><a href="#plot-knn-regression-mglearn" class="headerlink" title="plot_knn_regression (mglearn)"></a>plot_knn_regression (mglearn)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mglearn</span><br><span class="line"></span><br><span class="line">mglearn.plot_knn_regression.plot_knn_regression()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59603791-49e49980-9145-11e9-9970-0ea5d8318d34.JPG" alt="knn_regression"></p><h2 id="recommendation-pdf-내용-추가"><a href="#recommendation-pdf-내용-추가" class="headerlink" title="recommendation.pdf 내용 추가"></a>recommendation.pdf 내용 추가</h2><p><strong>복습시간</strong>  19시 10분 ~ 21시 17분 / 총 2시간 7분</p><p><a id = '28th'></a></p><h1 id="2019년-6월-18일-화요일-28th"><a href="#2019년-6월-18일-화요일-28th" class="headerlink" title="2019년 6월 18일 화요일 28th"></a>2019년 6월 18일 화요일 28th</h1><h2 id="Surprise-vs-Scikit"><a href="#Surprise-vs-Scikit" class="headerlink" title="Surprise vs Scikit"></a>Surprise vs Scikit</h2><h3 id="차이점-2가지"><a href="#차이점-2가지" class="headerlink" title="차이점 2가지"></a>차이점 2가지</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Train_test_split</span><br><span class="line">2. 평가척도</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scikit에서는 Train_Test_Split으로 데이터를 나누었지만 Surprise에서는 Fold로 랜덤하게 쪼개준다.</span><br><span class="line">그리고 Scikit에서 평가척도는 score하나 뿐이었지만 Surprise에서는 평가척도로 여러가지가 있다.</span><br><span class="line">예를 들어 rmse(root mean square error) &#x3D;&gt; 평균 제곱근 편차</span><br><span class="line"></span><br><span class="line">Fold &#x3D;&gt; train,test default로 5쌍으로 쪼개어진 generator를 반환한다.</span><br></pre></td></tr></table></figure><h3 id="Surprise-예제"><a href="#Surprise-예제" class="headerlink" title="Surprise 예제"></a>Surprise 예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> SVD, KNNBasic, Dataset, Reader, dump</span><br><span class="line"><span class="keyword">from</span> surprise.accuracy <span class="keyword">import</span> rmse</span><br><span class="line"></span><br><span class="line">data = Dataset.load_builtin(<span class="string">'ml-100k'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trainset, testset <span class="keyword">in</span> data.folds():</span><br><span class="line">    algo_knn.fit(trainset)</span><br><span class="line">    predictions_knn = algo_knn.test(testset)</span><br><span class="line">    rmse(predictions_knn)</span><br><span class="line">:</span><br><span class="line">Computing the msd similarity matrix...</span><br><span class="line">Done computing similarity matrix.</span><br><span class="line">RMSE: <span class="number">0.9753</span>                       </span><br><span class="line">Computing the msd similarity matrix...</span><br><span class="line">Done computing similarity matrix.</span><br><span class="line">RMSE: <span class="number">0.9685</span></span><br><span class="line">Computing the msd similarity matrix...</span><br><span class="line">Done computing similarity matrix.</span><br><span class="line">RMSE: <span class="number">0.9870</span></span><br><span class="line">Computing the msd similarity matrix...</span><br><span class="line">Done computing similarity matrix.</span><br><span class="line">RMSE: <span class="number">0.9858</span></span><br><span class="line">Computing the msd similarity matrix...</span><br><span class="line">Done computing similarity matrix.</span><br><span class="line">RMSE: <span class="number">0.9739</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 평균 제곱근 편차가 0.9739면 어떻다는 거니... 생각해보자..</span></span><br></pre></td></tr></table></figure><h2 id="os-vs-sys"><a href="#os-vs-sys" class="headerlink" title="os vs sys"></a>os vs sys</h2><blockquote><p>os는 파일관련 처리할 때 사용하고 운영체제 내 폴더파일을 다룰때도 사용한다. <br><br>참고로 os는 위험한애임.. <br><br>sys는 파이썬 관점에서 경로를 확인할때 등에 사용되는 모듈 이다. <br><br>자세한건 더 공부하면서 추가해보자.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.path.expanduser</span><br><span class="line">: &lt;module <span class="string">'ntpath'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\SAMSUNG\\Anaconda3\\lib\\ntpath.py'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path</span><br><span class="line">: [<span class="string">'C:\\Users\\SAMSUNG\\Anaconda3\\lib\\site-packages\\win32\\lib'</span>,</span><br><span class="line"> <span class="string">'C:\\Users\\SAMSUNG\\Anaconda3\\lib\\site-packages\\Pythonwin'</span>,</span><br><span class="line"> <span class="string">'C:\\Users\\SAMSUNG\\Anaconda3\\lib\\site-packages\\IPython\\extensions'</span>,</span><br><span class="line"> <span class="string">'C:\\Users\\SAMSUNG\\.ipython'</span>]</span><br></pre></td></tr></table></figure><h2 id="Validation-curve"><a href="#Validation-curve" class="headerlink" title="Validation_curve"></a>Validation_curve</h2><blockquote><p>GridSearchCV로 하이퍼 파라미터를 찾을때 같이 사용함으로써 적절한 하이퍼 파라미터를 찾기 위해 참고하면 좋다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> validation_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn_evaluation <span class="keyword">import</span> plot</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">train_scores, test_scores=validation_curve(knn, iris.iloc[:,:<span class="number">-1</span>], iris.iloc[:,<span class="number">-1</span>], <span class="string">'n_neighbors'</span>, [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], cv=<span class="number">10</span>)</span><br><span class="line">plot.validation_curve(train_scores, test_scores, [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="string">'n_neighbors'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59681973-2a667300-9210-11e9-8e1e-384e6233675d.JPG" alt="validation_curve"></p><h2 id="Statsmodel로-regression분석하기"><a href="#Statsmodel로-regression분석하기" class="headerlink" title="Statsmodel로 regression분석하기"></a>Statsmodel로 regression분석하기</h2><blockquote><p>Linear regression 분석은 머신러닝에서 해설분야를 담당하고 예측하는데 쓰지는 않는다.</p></blockquote><h3 id="R방식"><a href="#R방식" class="headerlink" title="R방식"></a>R방식</h3><h4 id="설치-3"><a href="#설치-3" class="headerlink" title="설치"></a>설치</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install statsmodels</span><br></pre></td></tr></table></figure><h4 id="예제-1"><a href="#예제-1" class="headerlink" title="예제"></a>예제</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf</span><br><span class="line"></span><br><span class="line">data = sm.datasets.get_rdataset(<span class="string">"Guerry"</span>, <span class="string">"HistData"</span>).data</span><br><span class="line"></span><br><span class="line">results = smf.ols(<span class="string">'Lottery ~ Literacy + np.log(Pop1831)'</span>,data=data).fit()</span><br><span class="line">results2 = smf.ols(<span class="string">'Lottery ~ Literacy + Instruction'</span>,data=data).fit()</span><br><span class="line"></span><br><span class="line">results.summary()</span><br><span class="line">results2.summary()</span><br></pre></td></tr></table></figure><h4 id="results-summary"><a href="#results-summary" class="headerlink" title="results summary"></a>results summary</h4><p><img src="https://user-images.githubusercontent.com/33630505/59684068-4704aa00-9214-11e9-8bd1-4d6417b831f0.JPG" alt="summary"></p><h4 id="results2-summary"><a href="#results2-summary" class="headerlink" title="results2 summary"></a>results2 summary</h4><p><img src="https://user-images.githubusercontent.com/33630505/59684100-5552c600-9214-11e9-97e9-9b89f399f6c2.JPG" alt="summary2"></p><h3 id="Python-방식"><a href="#Python-방식" class="headerlink" title="Python 방식"></a>Python 방식</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">nobs = <span class="number">100</span></span><br><span class="line">X = np.random.random((nobs, <span class="number">2</span>))</span><br><span class="line">X = sm.add_constant(X)</span><br><span class="line">beta = [<span class="number">1</span>, <span class="number">.1</span>, <span class="number">.5</span>]</span><br><span class="line">e = np.random.random(nobs)</span><br><span class="line">Iy = np.dot(X, beta) + e</span><br><span class="line"></span><br><span class="line">results = sm.OLS(Iy, X).fit()</span><br><span class="line"></span><br><span class="line">print(results.summary())</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/59684963-102f9380-9216-11e9-8603-4d2679cf351c.JPG" alt="python_summary"></p><p><strong>복습시간</strong>    19시 ~ 22시  / 총 3시간</p><p><a id = '29th'></a></p><h1 id="2019년-6월-19일-수요일-29th"><a href="#2019년-6월-19일-수요일-29th" class="headerlink" title="2019년 6월 19일 수요일 29th"></a>2019년 6월 19일 수요일 29th</h1><h2 id="버전관리-2가지-방법"><a href="#버전관리-2가지-방법" class="headerlink" title="버전관리 2가지 방법"></a>버전관리 2가지 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. version-information</span><br><span class="line">2. watermark</span><br></pre></td></tr></table></figure><h3 id="version-information"><a href="#version-information" class="headerlink" title="version-information"></a>version-information</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설치 방법</span></span><br><span class="line">!pip install version-information</span><br><span class="line"></span><br><span class="line">%load_ext version_information   <span class="comment"># import 처럼 version_information을 쓰겠다고 명시해주는 구문</span></span><br><span class="line"></span><br><span class="line">%version_information numpy, pandas, seaborn, scikit-learn, statsmodels <span class="comment"># numpy, pandas, seaborn, 등의 버전 명시</span></span><br></pre></td></tr></table></figure><blockquote><p>watermark 방식보다 이쁘게 나온다</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/59765932-1be48e00-92da-11e9-92f5-29c8becce363.JPG" alt="version_information"></p><h3 id="watermark"><a href="#watermark" class="headerlink" title="watermark"></a>watermark</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%load_ext watermark</span><br><span class="line"></span><br><span class="line">%watermark -a 지혁 -d -p numpy,pandas,seaborn</span><br></pre></td></tr></table></figure><blockquote><p>version_information은 한글이 깨지지만 watermark는 한글도 지원한다</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/59765934-1be48e00-92da-11e9-9e6f-08ea3a07d2a7.JPG" alt="watermark"></p><h2 id="Feature-selection"><a href="#Feature-selection" class="headerlink" title="Feature-selection"></a>Feature-selection</h2><blockquote><p>pre-processing의 일종으로 column을 줄여야겠다는 판단이 들었을때 하는 전처리. <br><br>성능을 높이기 위한 전처리로, 연산 속도를 향상 시키는 방법으로 사용한다. <br><br>이때 정확도 성능을 낮추지 않는 선에서 feature-selection을 진행한다.</p></blockquote><h3 id="3가지-방식"><a href="#3가지-방식" class="headerlink" title="3가지 방식"></a>3가지 방식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Filter</span><br><span class="line">2. Embeded</span><br><span class="line">3. Wrapper</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><blockquote><p>통계값을 보고 경험적으로 도메인 지식을 통해 column을 걸러낸다.</p></blockquote><h4 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 불러와서 DataFrame 형태로 만들기</span></span><br><span class="line">data = load_boston()</span><br><span class="line">boston = pd.DataFrame(data.data, columns=data.feature_names)</span><br><span class="line">target = pd.DataFrame(data.target, columns=[<span class="string">'target'</span>])</span><br><span class="line">boston_target = pd.concat([boston, target], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기초 통계분석 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pairplot으로 clustering 경향 살피거나 도메인 지식 활용하여 영향력이 가장 없는 column 걸러내기</span></span><br><span class="line"></span><br><span class="line">boston_target_raw=boston_target.copy() <span class="comment"># 원본 데이터 copy해두기</span></span><br><span class="line">boston_target.drop(columns=[<span class="string">'AGE'</span>])  <span class="comment"># 가구당 나이는 집값에 영향이 크지 않다고 판단하여 걸러 내본다.</span></span><br><span class="line">cross_val_score(LinearRegression(), boston_target.iloc[:,:<span class="number">-1</span>], bost_target2.target, cv=<span class="number">10</span>).mean()</span><br><span class="line"></span><br><span class="line">: <span class="number">0.20252899006055775</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 원본 데이터의 정확도</span></span><br><span class="line">cross_val_score(LinearRegression(), boston_target_raw.iloc[:,:<span class="number">-1</span>], bost_target_raw.target, cv=<span class="number">10</span>).mean()</span><br><span class="line"></span><br><span class="line">: <span class="number">0.20252899006055775</span></span><br></pre></td></tr></table></figure><blockquote><p>AGE column을 걸러냈을 때와 걸러내기 전의 정확도가 같기 때문에 age는 영향력이 없는 column! <br><br>따라서 빼도 되는 feature!</p></blockquote><h3 id="wrapper"><a href="#wrapper" class="headerlink" title="wrapper"></a>wrapper</h3><blockquote><p>통계값과 머신러닝 기법을 동시에 사용하여 기준을 두고 ranking을 구해 n개 column 뽑는 방법.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">rfe = RFE(model, <span class="number">7</span>)</span><br><span class="line">X_rfe = rfe.fit_transform(boston_target_raw.iloc[:,:<span class="number">-1</span>], boston_target_raw.target)  <span class="comment"># filter 예시에 있는 boston data 사용</span></span><br><span class="line">X_rfe</span><br><span class="line">:</span><br><span class="line"></span><br><span class="line">array([[ <span class="number">0.</span>   ,  <span class="number">0.538</span>,  <span class="number">6.575</span>, ...,  <span class="number">1.</span>   , <span class="number">15.3</span>  ,  <span class="number">4.98</span> ],</span><br><span class="line">       [ <span class="number">0.</span>   ,  <span class="number">0.469</span>,  <span class="number">6.421</span>, ...,  <span class="number">2.</span>   , <span class="number">17.8</span>  ,  <span class="number">9.14</span> ],</span><br><span class="line">       [ <span class="number">0.</span>   ,  <span class="number">0.469</span>,  <span class="number">7.185</span>, ...,  <span class="number">2.</span>   , <span class="number">17.8</span>  ,  <span class="number">4.03</span> ],</span><br><span class="line">       ...,</span><br><span class="line">       [ <span class="number">0.</span>   ,  <span class="number">0.573</span>,  <span class="number">6.976</span>, ...,  <span class="number">1.</span>   , <span class="number">21.</span>   ,  <span class="number">5.64</span> ],</span><br><span class="line">       [ <span class="number">0.</span>   ,  <span class="number">0.573</span>,  <span class="number">6.794</span>, ...,  <span class="number">1.</span>   , <span class="number">21.</span>   ,  <span class="number">6.48</span> ],</span><br><span class="line">       [ <span class="number">0.</span>   ,  <span class="number">0.573</span>,  <span class="number">6.03</span> , ...,  <span class="number">1.</span>   , <span class="number">21.</span>   ,  <span class="number">7.88</span> ]])</span><br><span class="line"></span><br><span class="line">model.fit(X_rfe, boston_target_raw.target)</span><br><span class="line">:</span><br><span class="line">LinearRegression(copy_X=<span class="literal">True</span>, fit_intercept=<span class="literal">True</span>, n_jobs=<span class="literal">None</span>,</span><br><span class="line">         normalize=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">vars(rfe)</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">&#123;<span class="string">'estimator'</span>: LinearRegression(copy_X=<span class="literal">True</span>, fit_intercept=<span class="literal">True</span>, n_jobs=<span class="literal">None</span>,</span><br><span class="line">          normalize=<span class="literal">False</span>),</span><br><span class="line"> <span class="string">'n_features_to_select'</span>: <span class="number">7</span>,</span><br><span class="line"> <span class="string">'step'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'verbose'</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">'estimator_'</span>: LinearRegression(copy_X=<span class="literal">True</span>, fit_intercept=<span class="literal">True</span>, n_jobs=<span class="literal">None</span>,</span><br><span class="line">          normalize=<span class="literal">False</span>),</span><br><span class="line"> <span class="string">'n_features_'</span>: <span class="number">7</span>,</span><br><span class="line"> <span class="string">'support_'</span>: array([<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>]),</span><br><span class="line"> <span class="string">'ranking_'</span>: array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>])&#125;</span><br></pre></td></tr></table></figure><h3 id="Embeded"><a href="#Embeded" class="headerlink" title="Embeded"></a>Embeded</h3><blockquote><p>알고리즘으로 자동으로 영향력이 어느 정도인가 분류 해주는 방법.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">dt = DecisionTreeClassifier()</span><br><span class="line">dt.fit(iris.iloc[:,:<span class="number">-1</span>], iris.iloc[:,<span class="number">-1</span>]) <span class="comment"># classification에 한정해서 숫자로 바꾸지 않았을때 자동으로 바꿔줌</span></span><br><span class="line">:</span><br><span class="line">DecisionTreeClassifier(class_weight=<span class="literal">None</span>, criterion=<span class="string">'gini'</span>, max_depth=<span class="literal">None</span>,</span><br><span class="line">            max_features=<span class="literal">None</span>, max_leaf_nodes=<span class="literal">None</span>,</span><br><span class="line">            min_impurity_decrease=<span class="number">0.0</span>, min_impurity_split=<span class="literal">None</span>,</span><br><span class="line">            min_samples_leaf=<span class="number">1</span>, min_samples_split=<span class="number">2</span>,</span><br><span class="line">            min_weight_fraction_leaf=<span class="number">0.0</span>, presort=<span class="literal">False</span>, random_state=<span class="literal">None</span>,</span><br><span class="line">            splitter=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">dt.predict([[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">: array([<span class="string">'virginica'</span>], dtype=object)</span><br><span class="line"></span><br><span class="line">dt.feature_importances_</span><br><span class="line">: array([<span class="number">0.</span>        , <span class="number">0.01333333</span>, <span class="number">0.06405596</span>, <span class="number">0.92261071</span>])  <span class="comment"># 각각의 숫자는 영향력의 크기를 나타낸다</span></span><br></pre></td></tr></table></figure><h2 id="Ensemble"><a href="#Ensemble" class="headerlink" title="Ensemble"></a>Ensemble</h2><blockquote><p>여러가지 알고리즘을 동시에 사용하여 최적의 성능을 낼수 있는 알고리즘을 생성한다</p></blockquote><h3 id="RandomForest"><a href="#RandomForest" class="headerlink" title="RandomForest"></a>RandomForest</h3><blockquote><p>랜덤포레스트는 분류, 회귀 분석 등에 사용되는 앙상블 학습 방법의 일종으로, <br><br>훈련 과정에서 구성한 다수의 결정 트리로부터 분류 또는 평균 예측치를 출력함으로써 동작한다.<br><br>성능이 좋고 overfitting이 잘 안일어난다. <br></p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">rf=RandomForestClassifier()</span><br><span class="line">rf.fit(iris.iloc[:,:<span class="number">-1</span>], iris.iloc[:,<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">: RandomForestClassifier(bootstrap=<span class="literal">True</span>, class_weight=<span class="literal">None</span>, criterion=<span class="string">'gini'</span>,</span><br><span class="line">            max_depth=<span class="literal">None</span>, max_features=<span class="string">'auto'</span>, max_leaf_nodes=<span class="literal">None</span>,</span><br><span class="line">            min_impurity_decrease=<span class="number">0.0</span>, min_impurity_split=<span class="literal">None</span>,</span><br><span class="line">            min_samples_leaf=<span class="number">1</span>, min_samples_split=<span class="number">2</span>,</span><br><span class="line">            min_weight_fraction_leaf=<span class="number">0.0</span>, n_estimators=<span class="number">10</span>, n_jobs=<span class="literal">None</span>,</span><br><span class="line">            oob_score=<span class="literal">False</span>, random_state=<span class="literal">None</span>, verbose=<span class="number">0</span>,</span><br><span class="line">            warm_start=<span class="literal">False</span>)</span><br><span class="line">rf.feature_importances_</span><br><span class="line">: array([<span class="number">0.03122967</span>, <span class="number">0.02095218</span>, <span class="number">0.57202362</span>, <span class="number">0.37579453</span>])</span><br></pre></td></tr></table></figure><h2 id="MLxtend"><a href="#MLxtend" class="headerlink" title="MLxtend"></a>MLxtend</h2><h3 id="설치-4"><a href="#설치-4" class="headerlink" title="설치"></a>설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install mlxtend</span><br></pre></td></tr></table></figure><h2 id="Staking"><a href="#Staking" class="headerlink" title="Staking"></a>Staking</h2><h2 id="Data부터-Model-학습까지"><a href="#Data부터-Model-학습까지" class="headerlink" title="Data부터 Model 학습까지"></a>Data부터 Model 학습까지</h2><h2 id="Cross-validate-3가지"><a href="#Cross-validate-3가지" class="headerlink" title="Cross-validate 3가지"></a>Cross-validate 3가지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Cross_val_score</span><br><span class="line">2. Cross_validate</span><br><span class="line">3. Cross_val_predict</span><br></pre></td></tr></table></figure><h2 id="Fit-transform-하는-3가지"><a href="#Fit-transform-하는-3가지" class="headerlink" title="Fit_transform 하는 3가지"></a>Fit_transform 하는 3가지</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> pre-processing</span><br><span class="line"><span class="number">2.</span> feature-extraction</span><br><span class="line"><span class="number">3.</span> RFE</span><br></pre></td></tr></table></figure><h2 id="Column-줄이는-3가지-방법"><a href="#Column-줄이는-3가지-방법" class="headerlink" title="Column 줄이는 3가지 방법"></a>Column 줄이는 3가지 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. filter</span><br><span class="line">2. PCA</span><br><span class="line">3. RFE</span><br></pre></td></tr></table></figure><p><strong>복습시간</strong>    18시 45분 ~  22시 20분 / 총 3시간 35분  </p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Lecture </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI 이노베이션 스퀘어 수업(기본반) - numpy</title>
      <link href="/2019/04/29/AILecture_numpy/"/>
      <url>/2019/04/29/AILecture_numpy/</url>
      
        <content type="html"><![CDATA[<p><a id = '12th'></a></p><h1 id="2019년-5월-20일-월요일-열두번째-수업"><a href="#2019년-5월-20일-월요일-열두번째-수업" class="headerlink" title="2019년 5월 20일 월요일 열두번째 수업"></a>2019년 5월 20일 월요일 열두번째 수업</h1><h2 id="정보의-진화-단계"><a href="#정보의-진화-단계" class="headerlink" title="정보의 진화 단계"></a>정보의 진화 단계</h2><p><img src="https://user-images.githubusercontent.com/33630505/58008628-c1fc7700-7b27-11e9-9e69-6f39608cd81d.JPG" alt="dikw"></p><p>DIKW : <a href="http://blog.naver.com/PostView.nhn?blogId=gracehappyworld&logNo=221481622524&categoryNo=17&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search" target="_blank" rel="noopener">blog</a></p><h2 id="인공지능의-시작과-배경"><a href="#인공지능의-시작과-배경" class="headerlink" title="인공지능의 시작과 배경"></a>인공지능의 시작과 배경</h2><p>Physical Labor과 Cognitive Labor의 한계를 극복하기 위해 인공지능으로 자동화 시키는 분야가 발달하게 됨 <br><br>그러나 요즘은 보통 물리적 노동보다는 인지적 관점에서 관심이 쏠리고 있다 <br><br>아직 인공지능은 이해하는 능력은 부족하지만 인식하는 능력은 사람의 영역 그 이상까지 왔다 <br></p><h3 id="지능"><a href="#지능" class="headerlink" title="지능"></a>지능</h3><p>지식을 <br></p><ol><li>이해</li><li>인식</li><li>추론</li><li>학습</li><li>생성</li><li>해결</li><li>결정<br>할 수 있는 능력</li></ol><h2 id="인공지능"><a href="#인공지능" class="headerlink" title="인공지능"></a>인공지능</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#39;인간을 대체할 수 있는 기계 또는 지능을 갖춘 존재로부터 의사소통, 상황의 상관관계 이해 및</span><br><span class="line"> 결론 도출 등 인간의 행동을 모방할 수 있는 기술&#39;</span><br><span class="line"></span><br><span class="line">좁은 의미에서 기계학습이라 볼 수 있다</span><br><span class="line">기계학습은 데이터를 넣어주면 프로그래밍된 논리나 규칙을 바탕으로</span><br><span class="line">스스로 학습하여 문제해결을 하는 알고리즘을 생성한다</span><br><span class="line"></span><br><span class="line">deep learning은 인간 신경망을 모델화하여 스스로 데이터 세트를 예측하는 기술이다</span><br><span class="line">deep learning은 인식분야에서 정확도가 높지만 인식이외에 기능은 좋지 않다</span><br><span class="line">deep learning은 정형화 데이터에서 성능이 좋지 않고 비정형 데이터에서 성능이 좋다</span><br></pre></td></tr></table></figure><h3 id="AI-Machine-learning-deep-learning"><a href="#AI-Machine-learning-deep-learning" class="headerlink" title="AI, Machine learning, deep learning"></a>AI, Machine learning, deep learning</h3><p><img src="https://user-images.githubusercontent.com/33630505/58009466-7f3b9e80-7b29-11e9-9515-20b4583abaf6.JPG" alt="ai"></p><h3 id="인공지능-영역의-분류"><a href="#인공지능-영역의-분류" class="headerlink" title="인공지능 영역의 분류"></a>인공지능 영역의 분류</h3><p><img src="https://user-images.githubusercontent.com/33630505/58367430-26e61180-7f1a-11e9-97a3-9c163f0b52d4.JPG" alt="ai"></p><h2 id="인공지능의-문제해결-전략"><a href="#인공지능의-문제해결-전략" class="headerlink" title="인공지능의 문제해결 전략"></a>인공지능의 문제해결 전략</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">인간의 인지적 작업을</span><br><span class="line">어떻게 Computing Model로 만들어내고</span><br><span class="line">그것을 Machine에서 구현하여</span><br><span class="line">그 작업을 자동으로 효율적으로 할 수 있게 할 것인가?</span><br><span class="line"></span><br><span class="line">Computing Model</span><br><span class="line">- Theory of computation</span><br><span class="line">  컴퓨터 과학의 한 갈래로, 어떤 문제를 컴퓨터로 풀 수 있는지, 또</span><br><span class="line">  얼마나 효율적으로 풀 수 있는지</span><br><span class="line">- Programmable</span><br></pre></td></tr></table></figure><h2 id="파이썬은-연산속도가-느린데-도대체-왜-파이썬으로-AI를-하는가"><a href="#파이썬은-연산속도가-느린데-도대체-왜-파이썬으로-AI를-하는가" class="headerlink" title="파이썬은 연산속도가 느린데 도대체 왜 파이썬으로 AI를 하는가?"></a>파이썬은 연산속도가 느린데 도대체 왜 파이썬으로 AI를 하는가?</h2><h3 id="Numpy가-있기-때문에"><a href="#Numpy가-있기-때문에" class="headerlink" title="Numpy가 있기 때문에!"></a>Numpy가 있기 때문에!</h3><p><span style="background-color:rgb(56, 188, 182)">Numpy는 속도가 빠르고 사용하기가 쉽다! </span><br><br>Numpy는 벡터 연산, 행렬 연산을 효율적으로 쉽게 만들 수 있다<br><br>Numpy는 속도 개선의 최적화를 하지 않아도 되기 때문에 AI에서 Numpy를 쓰는 것이다 <br><br><br></p><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><blockquote><p>Numarray와 Numeric이라는 오래된 Python 패키지를 계승해서 나온 수학 및 과학 연산을 위한 파이썬 패키지이다.</p></blockquote><br><h3 id="Numpy-속도가-빠른-이유"><a href="#Numpy-속도가-빠른-이유" class="headerlink" title="Numpy 속도가 빠른 이유"></a>Numpy 속도가 빠른 이유</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> C나 Fortran으로 만들어져 속도가 빠르다</span><br><span class="line"><span class="number">2.</span> Array기반으로 처리하기 때문에 속도가 빠르다</span><br><span class="line"><span class="number">3.</span> 데이터를 <span class="number">1</span>열로 저장해, 효율적인 자료구조 형태를 갖기 때문에 빠르다</span><br><span class="line"><span class="number">4.</span> Homogeneous한 Type만을 저장하기 때문에 타입 체크 비용이 들지 않아 빠르다</span><br><span class="line"><span class="number">5.</span> 데이터를 메모리에 한번에 올려 처리하기 때문에 속도가 빠르다</span><br><span class="line"><span class="number">6.</span> 데이터 구조가 Structured array방식이기 때문에 데이터 접근이 빠르다</span><br></pre></td></tr></table></figure><h3 id="Numpy는-벡터-기반이다"><a href="#Numpy는-벡터-기반이다" class="headerlink" title="Numpy는 벡터 기반이다"></a>Numpy는 벡터 기반이다</h3><ul><li>1차 Vector (Numpy에서 vector는 방향이 없다고 간주)</li><li>2차 Matrics  </li><li>3차 Tensor</li></ul><br><h3 id="python-속도-개선을-위한-방법"><a href="#python-속도-개선을-위한-방법" class="headerlink" title="python 속도 개선을 위한 방법"></a>python 속도 개선을 위한 방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. Computing Power</span><br><span class="line">- GPU</span><br><span class="line">- Parallel Computing</span><br><span class="line"></span><br><span class="line">2. Compiler</span><br><span class="line">- Cython</span><br><span class="line">- PyPy ....</span><br><span class="line"></span><br><span class="line">3. Library</span><br><span class="line">- Numpy</span><br><span class="line"></span><br><span class="line">4. Algorithm&#x2F; Data Structure</span><br></pre></td></tr></table></figure><br><h3 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop없이 벡터연산으로 속도 향상을 하는 방법</span><br><span class="line">요즘은 cpu자체에서 vector processor를 지원</span><br><span class="line">함수형 패러다임 + 선형대수 기법</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58010431-4ef4ff80-7b2b-11e9-81fb-7fb7bba0cd19.JPG" alt="array"><br><br></p><p><strong>Numpy Tip1</strong> python list와 numpy list는 차이가 있다. python은 linked list , type check로 인해 속도가 느리고, numpy 에서는 type이 통일되어 있어 속도가 빠르다</p><p><img src="https://user-images.githubusercontent.com/33630505/58010552-8bc0f680-7b2b-11e9-9c2b-ff3cb5012eaa.JPG" alt="list"></p><br><h2 id="Python-문법으로-벡터화-하기-vs-Numpy"><a href="#Python-문법으로-벡터화-하기-vs-Numpy" class="headerlink" title="Python 문법으로 벡터화 하기 vs Numpy"></a>Python 문법으로 벡터화 하기 vs Numpy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(a,b)]</span><br><span class="line">x([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">: [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@np.vectorize</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">z([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">: array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><br><h3 id="Numpy-사용하기"><a href="#Numpy-사용하기" class="headerlink" title="Numpy 사용하기"></a>Numpy 사용하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array(<span class="number">0</span>)</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">d = np.array([[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]])</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">type(a)</span><br><span class="line"></span><br><span class="line">: array(<span class="number">0</span>)</span><br><span class="line">  array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">  array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">  array([[[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]]])</span><br><span class="line">  numpy.ndarray</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">5</span>,<span class="number">25</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">np.max(a)</span><br><span class="line">np.min(a)</span><br><span class="line"></span><br><span class="line">: <span class="number">24</span></span><br><span class="line">  <span class="number">5</span></span><br><span class="line"></span><br><span class="line">np.argmax(a)</span><br><span class="line">np.argmin(a)  <span class="comment"># Function 방식</span></span><br><span class="line">: <span class="number">19</span></span><br><span class="line">  <span class="number">0</span></span><br><span class="line"></span><br><span class="line">a.argmax()   <span class="comment"># Method 방식</span></span><br><span class="line">: <span class="number">19</span></span><br></pre></td></tr></table></figure><br><h3 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h3><blockquote><p>객체를 만들어내는 부분을 서브 클래스로 위임해 캡슐화 하는 패턴 <br><br>타입에 따라 다르게 동작하고 싶을때 사용하는 패턴이다<br><br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))   <span class="comment"># 메소드 방식(Factory Method)</span></span><br><span class="line">: np.array([<span class="string">'a'</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">np.ndarray([<span class="string">'a'</span>,<span class="number">1</span>]) <span class="comment"># 인스턴스 방식(Homogeneous한 타입의 mutable이기 때문에 타입이 다르면 에러가 난다)</span></span><br><span class="line">: TypeError</span><br><span class="line"></span><br><span class="line">np.ndarray(shape=(<span class="number">2</span>,<span class="number">2</span>), dtype=float, order=<span class="string">'F'</span>) <span class="comment"># 인스턴스 방식은 랜덤으로 값이 채워진다</span></span><br><span class="line">: array([[<span class="number">1.49769904e-311</span>, <span class="number">0.00000000e+000</span>],</span><br><span class="line">       [<span class="number">0.00000000e+000</span>, <span class="number">5.02034658e+175</span>]])</span><br></pre></td></tr></table></figure><br><h3 id="Endianness"><a href="#Endianness" class="headerlink" title="Endianness"></a>Endianness</h3><blockquote><p>컴퓨터의 메모리와 같은 1차원 공간에 여러 개의 연속된 대상을 배열하는 방법 <br><br>여기서 바이트를 배열하는 방법을 Byte order라고 한다</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/61672256-e510f600-ad25-11e9-8c01-b43f98be8de0.png" alt="endian"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.array([<span class="string">'a'</span>, <span class="number">1</span>]) <span class="comment"># little-endian</span></span><br><span class="line">: array([<span class="string">'a'</span>, <span class="string">'1'</span>], dtype=<span class="string">'&lt;U1'</span>)</span><br><span class="line"></span><br><span class="line">dt = np.dtype(<span class="string">"&gt;i4"</span>) <span class="comment"># big-endian</span></span><br><span class="line">dt.byteorder</span><br><span class="line">: <span class="string">'&gt;'</span></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="string">'a'</span>, <span class="number">1</span>])</span><br><span class="line">a.flags</span><br><span class="line">: C_CONTIGUOUS : <span class="literal">True</span>  <span class="comment"># C 저장 방식</span></span><br><span class="line">  F_CONTIGUOUS : <span class="literal">True</span>  <span class="comment"># Fortran 저장 방식</span></span><br><span class="line">  OWNDATA : <span class="literal">True</span></span><br><span class="line">  WRITEABLE : <span class="literal">True</span></span><br><span class="line">  ALIGNED : <span class="literal">True</span></span><br><span class="line">  WRITEBACKIFCOPY : <span class="literal">False</span></span><br><span class="line">  UPDATEIFCOPY : <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]], order = <span class="string">"C"</span>)</span><br><span class="line">b.flags</span><br><span class="line">: C_CONTIGUOUS : <span class="literal">True</span></span><br><span class="line">  F_CONTIGUOUS : <span class="literal">False</span></span><br><span class="line">  OWNDATA : <span class="literal">True</span></span><br><span class="line">  WRITEABLE : <span class="literal">True</span></span><br><span class="line">  ALIGNED : <span class="literal">True</span></span><br><span class="line">  WRITEBACKIFCOPY : <span class="literal">False</span></span><br><span class="line">  UPDATEIFCOPY : <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]], order = <span class="string">"C"</span>)</span><br><span class="line">c.flags</span><br><span class="line">: C_CONTIGUOUS : <span class="literal">False</span></span><br><span class="line">  F_CONTIGUOUS : <span class="literal">True</span></span><br><span class="line">  OWNDATA : <span class="literal">True</span></span><br><span class="line">  WRITEABLE : <span class="literal">True</span></span><br><span class="line">  ALIGNED : <span class="literal">True</span></span><br><span class="line">  WRITEBACKIFCOPY : <span class="literal">False</span></span><br><span class="line">  UPDATEIFCOPY : <span class="literal">False</span></span><br></pre></td></tr></table></figure><br><h4 id="Big-endian"><a href="#Big-endian" class="headerlink" title="Big-endian"></a>Big-endian</h4><blockquote><p>큰 단위가 앞에 오는 경우 <br><br>최상위 바이트 (MSB - Most Significant Byte)부터 차례로 저장하는 방식</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/68069380-f8127800-fda2-11e9-8309-5ac9655162c4.JPG" alt="big_endian"><br><br></p><h4 id="Little-endian"><a href="#Little-endian" class="headerlink" title="Little-endian"></a>Little-endian</h4><blockquote><p>작은 단위가 앞에 오는 경우 <br><br>최하위 바이트 (LSB - Least Significant Byte)부터 차례로 저장하는 방식</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/68069383-02cd0d00-fda3-11e9-98b6-bffa911e22d2.JPG" alt="little-endian"><br><br></p><h3 id="Big-endian-VS-Little-endian"><a href="#Big-endian-VS-Little-endian" class="headerlink" title="Big-endian VS Little-endian"></a>Big-endian VS Little-endian</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">빅 엔디언은 사람이 숫자를 읽고 쓰는 방법과 같기 때문에 디버깅 과정에서 메모리의 값을 보기 편하다는 장점이 있다.</span><br><span class="line">ex) 0x12345678 &#x3D;&gt; 12 34 56 78로 표현</span><br><span class="line"></span><br><span class="line">리틀 엔디언은 메모리에 저장된 값의 하위 바이트들만 사용할 때 별도의 계산이 필요 없다는 장점이 있다.</span><br><span class="line">ex) 32비트 숫자인 0x2A(16진수)를 표현하면 2A 00 00 00 가 되는데, 하위 바이트를 사용하려고 한다면 앞의 한 바이트만 떼어 내면 된다.</span><br><span class="line">    (빅 엔디언에서는 하위 바이트를 얻기 위해서는 3바이트를 더해야 한다는 단점이 있다)    </span><br><span class="line"></span><br><span class="line">보통 변수의 첫 바이트를 그 변수의 주소로 삼기 때문에 이런 리틀 엔디언의 성질은 종종 프로그래밍을 편하게 해준다.</span><br><span class="line">또한 가산기가 덧셈을 하는 과정은 LSB로부터 시작하여 자리 올림을 계산해야 하므로 리틀 엔디언에서 가산기 설계가 조금 더 단순해진다.</span><br><span class="line">(오늘날의 프로세서는 여러개의 바이트를 동시에 읽어들여 동시에 덧셈을 수행하는 구조를 갖고 있어 사실상 차이가 없다)</span><br><span class="line"></span><br><span class="line">※ 엔디안 방식은 데이터를 전송하는 네트워크 층에서 중요하게 여겨진다.</span><br><span class="line">   서로 다른 방식의 데이터 저장방식을 갖고 통신을 하게되면 엉뚱한 값을 주고 받기 때문이다.</span><br><span class="line"></span><br><span class="line">빅 엔디언 &#x3D;&gt;  Unix의 Risc계열의 프로세서가 사용하는 바이트 오더링</span><br><span class="line">             네트워크에서 사용하는 바이트 오더링</span><br><span class="line">     앞에서부터 스택에 PUSH</span><br><span class="line">     비교연산에서 리틀 엔디언보다 속도가 빠르다</span><br><span class="line">리틀 엔디언 &#x3D;&gt; Intel 계열의 프로세서가 사용하는 바이트 오더링</span><br><span class="line">              뒤에서부터 스택에 PUSH</span><br><span class="line">      계산연산에서 빅 엔디언 보다 속도가 빠르다</span><br></pre></td></tr></table></figure><br><p>출처: <a href="https://genesis8.tistory.com/37" target="_blank" rel="noopener">tistory</a>, &nbsp; <a href="https://ko.wikipedia.org/wiki/%EC%97%94%EB%94%94%EC%96%B8" target="_blank" rel="noopener">위키백과</a></p><br><h3 id="특수-행렬-만들기"><a href="#특수-행렬-만들기" class="headerlink" title="특수 행렬 만들기"></a>특수 행렬 만들기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 영행렬 만들기</span></span><br><span class="line">z = np.zeros([<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">z</span><br><span class="line">: array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단위행렬(항등행렬) 만들기</span></span><br><span class="line">y = np.eye(<span class="number">3</span>)</span><br><span class="line">y</span><br><span class="line">: array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 전치행렬 만들기</span></span><br><span class="line">t = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">t.T</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 일행렬 만들기</span></span><br><span class="line">o = np.ones((<span class="number">5</span>,<span class="number">4</span>))</span><br><span class="line">o</span><br><span class="line">: array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원하는 숫자로 행렬 채우기</span></span><br><span class="line">f = np.full((<span class="number">3</span>,<span class="number">3</span>),<span class="number">3</span>)</span><br><span class="line">f</span><br><span class="line">: array([[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원하는 행렬 shape 복사해서 일행렬 만들기</span></span><br><span class="line">l = np.ones_like(f)</span><br><span class="line">l</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 대각행렬 만들기</span></span><br><span class="line"></span><br><span class="line">np.diagonal([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">: array([<span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 상부 삼각행렬</span></span><br><span class="line"></span><br><span class="line">np.triu([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 하부 삼각행렬</span></span><br><span class="line"></span><br><span class="line">np.tri(<span class="number">4</span>)</span><br><span class="line">: array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line">np.tril([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]], <span class="number">-1</span>)</span><br><span class="line">: array([[ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">[ <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">0</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line">np.linspace(<span class="number">0</span>,<span class="number">30</span>)</span><br><span class="line">: array([ <span class="number">0.</span>        ,  <span class="number">0.6122449</span> ,  <span class="number">1.2244898</span> ,  <span class="number">1.83673469</span>,  <span class="number">2.44897959</span>,</span><br><span class="line">          <span class="number">3.06122449</span>,  <span class="number">3.67346939</span>,  <span class="number">4.28571429</span>,  <span class="number">4.89795918</span>,  <span class="number">5.51020408</span>,</span><br><span class="line">          <span class="number">6.12244898</span>,  <span class="number">6.73469388</span>,  <span class="number">7.34693878</span>,  <span class="number">7.95918367</span>,  <span class="number">8.57142857</span>,</span><br><span class="line">          <span class="number">9.18367347</span>,  <span class="number">9.79591837</span>, <span class="number">10.40816327</span>, <span class="number">11.02040816</span>, <span class="number">11.63265306</span>,</span><br><span class="line">          <span class="number">12.24489796</span>, <span class="number">12.85714286</span>, <span class="number">13.46938776</span>, <span class="number">14.08163265</span>, <span class="number">14.69387755</span>,</span><br><span class="line">          <span class="number">15.30612245</span>, <span class="number">15.91836735</span>, <span class="number">16.53061224</span>, <span class="number">17.14285714</span>, <span class="number">17.75510204</span>,</span><br><span class="line">          <span class="number">18.36734694</span>, <span class="number">18.97959184</span>, <span class="number">19.59183673</span>, <span class="number">20.20408163</span>, <span class="number">20.81632653</span>,</span><br><span class="line">          <span class="number">21.42857143</span>, <span class="number">22.04081633</span>, <span class="number">22.65306122</span>, <span class="number">23.26530612</span>, <span class="number">23.87755102</span>,</span><br><span class="line">          <span class="number">24.48979592</span>, <span class="number">25.10204082</span>, <span class="number">25.71428571</span>, <span class="number">26.32653061</span>, <span class="number">26.93877551</span>,</span><br><span class="line">          <span class="number">27.55102041</span>, <span class="number">28.16326531</span>, <span class="number">28.7755102</span> , <span class="number">29.3877551</span> , <span class="number">30.</span>        ])</span><br><span class="line"></span><br><span class="line">np.logspace(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">: array([<span class="number">1.00000000e+001</span>, <span class="number">1.04811313e+003</span>, <span class="number">1.09854114e+005</span>, <span class="number">1.15139540e+007</span>,</span><br><span class="line">         <span class="number">1.20679264e+009</span>, <span class="number">1.26485522e+011</span>, <span class="number">1.32571137e+013</span>, <span class="number">1.38949549e+015</span>,</span><br><span class="line">         <span class="number">1.45634848e+017</span>, <span class="number">1.52641797e+019</span>, <span class="number">1.59985872e+021</span>, <span class="number">1.67683294e+023</span>,</span><br><span class="line">         <span class="number">1.75751062e+025</span>, <span class="number">1.84206997e+027</span>, <span class="number">1.93069773e+029</span>, <span class="number">2.02358965e+031</span>,</span><br><span class="line">         <span class="number">2.12095089e+033</span>, <span class="number">2.22299648e+035</span>, <span class="number">2.32995181e+037</span>, <span class="number">2.44205309e+039</span>,</span><br><span class="line">         <span class="number">2.55954792e+041</span>, <span class="number">2.68269580e+043</span>, <span class="number">2.81176870e+045</span>, <span class="number">2.94705170e+047</span>,</span><br><span class="line">         <span class="number">3.08884360e+049</span>, <span class="number">3.23745754e+051</span>, <span class="number">3.39322177e+053</span>, <span class="number">3.55648031e+055</span>,</span><br><span class="line">         <span class="number">3.72759372e+057</span>, <span class="number">3.90693994e+059</span>, <span class="number">4.09491506e+061</span>, <span class="number">4.29193426e+063</span>,</span><br><span class="line">         <span class="number">4.49843267e+065</span>, <span class="number">4.71486636e+067</span>, <span class="number">4.94171336e+069</span>, <span class="number">5.17947468e+071</span>,</span><br><span class="line">         <span class="number">5.42867544e+073</span>, <span class="number">5.68986603e+075</span>, <span class="number">5.96362332e+077</span>, <span class="number">6.25055193e+079</span>,</span><br><span class="line">         <span class="number">6.55128557e+081</span>, <span class="number">6.86648845e+083</span>, <span class="number">7.19685673e+085</span>, <span class="number">7.54312006e+087</span>,</span><br><span class="line">         <span class="number">7.90604321e+089</span>, <span class="number">8.28642773e+091</span>, <span class="number">8.68511374e+093</span>, <span class="number">9.10298178e+095</span>,</span><br><span class="line">         <span class="number">9.54095476e+097</span>, <span class="number">1.00000000e+100</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random</span></span><br><span class="line">np.empty((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">: array([[<span class="number">0.00000000e+000</span>, <span class="number">0.00000000e+000</span>, <span class="number">0.00000000e+000</span>],</span><br><span class="line">         [<span class="number">0.00000000e+000</span>, <span class="number">0.00000000e+000</span>, <span class="number">4.36754031e-321</span>],</span><br><span class="line">         [<span class="number">8.70018274e-313</span>, <span class="number">6.79038653e-313</span>, <span class="number">1.24610994e-306</span>]])</span><br></pre></td></tr></table></figure><p><strong>array</strong> 는 몇차원 데이터인지 통칭하는 단어이다. 그리고 return 값에 array가 나오면 Numpy형태라는 뜻. 파이썬에서 사용하는 형태를 Numpy로 바꿔준다. 벡터를 만드는 방식이기도 하다</p><h3 id="행렬-연산"><a href="#행렬-연산" class="headerlink" title="행렬 연산"></a>행렬 연산</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment"># broadcasting</span></span><br><span class="line">a + <span class="number">3</span></span><br><span class="line">: array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">a.dot(a) <span class="comment"># 내적</span></span><br><span class="line">: <span class="number">55</span></span><br><span class="line"></span><br><span class="line">np.sum(a)</span><br><span class="line">: <span class="number">15</span></span><br><span class="line"></span><br><span class="line">t = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">np.sum(t, axis = <span class="number">1</span>) <span class="comment"># 행연산</span></span><br><span class="line">: array([ <span class="number">6</span>, <span class="number">15</span>, <span class="number">24</span>])</span><br><span class="line"></span><br><span class="line">np.sum(t,axis=<span class="number">0</span>) <span class="comment"># 열연산</span></span><br><span class="line">:array([<span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>])</span><br><span class="line"></span><br><span class="line">A = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">B = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">A @ B  <span class="comment"># At sign 연산자 (행렬곱)</span></span><br><span class="line">: array([[ <span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">22</span>]])</span><br></pre></td></tr></table></figure><br><h3 id="Python-Numpy-속도-비교"><a href="#Python-Numpy-속도-비교" class="headerlink" title="Python, Numpy 속도 비교"></a>Python, Numpy 속도 비교</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%timeit np.sum(np.arange(<span class="number">10000000</span>))</span><br><span class="line">: <span class="number">24.6</span> ms ± <span class="number">2.2</span> ms per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10</span> loops each)</span><br><span class="line"></span><br><span class="line">%timeit sum(range(<span class="number">10000000</span>))</span><br><span class="line">: <span class="number">352</span> ms ± <span class="number">6.34</span> ms per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1</span> loop each)</span><br></pre></td></tr></table></figure><br><h3 id="데이터-정보-확인하는-방법"><a href="#데이터-정보-확인하는-방법" class="headerlink" title="데이터 정보 확인하는 방법"></a>데이터 정보 확인하는 방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. dtype</span><br><span class="line">2. size</span><br><span class="line">3. shape</span><br><span class="line">4. ndim</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">a.dtype</span><br><span class="line">a.size</span><br><span class="line">a.shape</span><br><span class="line">a.ndim</span><br><span class="line"></span><br><span class="line">: dtype(<span class="string">'int32'</span>)</span><br><span class="line">  <span class="number">10</span></span><br><span class="line">  (<span class="number">10</span>,)</span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h2 id="Stride"><a href="#Stride" class="headerlink" title="Stride"></a>Stride</h2><p><img src="https://user-images.githubusercontent.com/33630505/58012662-f2481380-7b2f-11e9-833e-4966c0e17241.JPG" alt="ndarray"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">a.dtype</span><br><span class="line">: dtype(<span class="string">'int32'</span>)</span><br><span class="line">a.strides</span><br><span class="line">: (<span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8bit = 1byte</span></span><br><span class="line"><span class="comment"># dtype에서 int 32bit라고 나왔기 때문에 byte로 바꾸면 4byte가 되는데</span></span><br><span class="line"><span class="comment"># 데이터 하나당 4byte를 차지한다고 보면된다</span></span><br><span class="line"><span class="comment"># 따라서 strides에서 맨 앞을 4byte로 나누어주면 그 갯수만큼 하나의 묶음으로 생각한다</span></span><br><span class="line"><span class="comment"># 즉, 한 행이 3개 데이터로 구성 되어 있다는 뜻</span></span><br></pre></td></tr></table></figure><p><strong>stride만 바꾸어 shape 자유자재로 바꾸기</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">a</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">-1</span>,<span class="number">5</span>)</span><br><span class="line">a</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="comment"># -1은 자동으로 알아서 하라는 뜻 / 행렬의 크기를 모를때 유용</span></span><br></pre></td></tr></table></figure><br><h2 id="reshape-vs-resize"><a href="#reshape-vs-resize" class="headerlink" title="reshape vs resize"></a>reshape vs resize</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># reshape</span></span><br><span class="line"></span><br><span class="line">a. reshape(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">: array([[<span class="number">0</span>],</span><br><span class="line">         [<span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>],</span><br><span class="line">         [<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">a. reshape(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># resize</span></span><br><span class="line"></span><br><span class="line">np.resize(a,(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">         [<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">np.resize(a,(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">np.resize(a,(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">         [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><h2 id="데이터-형태-변환하기"><a href="#데이터-형태-변환하기" class="headerlink" title="데이터 형태 변환하기"></a>데이터 형태 변환하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a.astype(<span class="string">'float32'</span>)</span><br><span class="line">: array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">7.</span>, <span class="number">8.</span>, <span class="number">9.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line">a.astype(<span class="string">'int64'</span>)       </span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], dtype=int64)   </span><br><span class="line"></span><br><span class="line">a.astype(<span class="string">'bool'</span>)</span><br><span class="line">: array([[ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">       [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">       [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>]])</span><br></pre></td></tr></table></figure><br><h2 id="array는-sequence-type"><a href="#array는-sequence-type" class="headerlink" title="array는 sequence type"></a>array는 sequence type</h2><blockquote><p>sequence type은 indexing, slicing이 가능하다!</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">n</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">n[:,<span class="number">1</span>]</span><br><span class="line">: array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">n[:][<span class="number">1</span>]</span><br><span class="line">: array([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">n[<span class="number">1</span>,:]</span><br><span class="line">: array([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">n[n&gt;<span class="number">3</span>]</span><br><span class="line">: array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><br><h3 id="Numpy-Indexing"><a href="#Numpy-Indexing" class="headerlink" title="Numpy Indexing"></a>Numpy Indexing</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 일반 indexing</span><br><span class="line">2. 콤마</span><br><span class="line">3. Fancy indexing</span><br><span class="line">4. Masking</span><br><span class="line">5. 조건문 (where)</span><br></pre></td></tr></table></figure><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">a</span><br><span class="line">: array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">         [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">         [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">         [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">         [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>]])  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 일반 indexing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">        print(a[x][y], end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line">: <span class="number">18</span> <span class="number">19</span></span><br><span class="line">  <span class="number">23</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콤마</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">3</span>:,<span class="number">3</span>:]</span><br><span class="line">: array([[<span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">23</span>, <span class="number">24</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fancy indexing</span></span><br><span class="line"></span><br><span class="line">a[[<span class="number">3</span>,<span class="number">4</span>],<span class="number">3</span>:]</span><br><span class="line">: array([[<span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">         [<span class="number">23</span>, <span class="number">24</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Masking</span></span><br><span class="line"></span><br><span class="line">a[(a &gt; <span class="number">17</span>) &amp; (a &lt; <span class="number">20</span>) + (a &gt; <span class="number">22</span>)].reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">: array([[<span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">23</span>, <span class="number">24</span>]])</span><br><span class="line"></span><br><span class="line">b = np.array([[<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>],</span><br><span class="line">              [<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>],</span><br><span class="line">              [<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>],</span><br><span class="line">              [<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">True</span>],</span><br><span class="line">              [<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">True</span>]])</span><br><span class="line">a[b].reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">: array([[<span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">23</span>, <span class="number">24</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 조건문</span></span><br><span class="line">a[np.where((a &gt; <span class="number">17</span>) &amp; (a &lt; <span class="number">20</span>) + (a &gt; <span class="number">22</span>))].reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">: array([[<span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">23</span>, <span class="number">24</span>]])</span><br></pre></td></tr></table></figure><h3 id="nditer"><a href="#nditer" class="headerlink" title="nditer"></a>nditer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.nditer([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">next(a)</span><br><span class="line">: (array(<span class="number">1</span>), array(<span class="number">2</span>), array(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">b = np.nditer([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">next(b)</span><br><span class="line">: (array(<span class="number">1</span>), array(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">d = np.nditer(c)</span><br><span class="line">next(d)</span><br><span class="line">: array(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><code>복습 시간</code> 17시 40분 ~ 19시 / 총 1시간 20분</p><p><a id = '13th'></a></p><h1 id="2019년-5월-21일-화요일-13th"><a href="#2019년-5월-21일-화요일-13th" class="headerlink" title="2019년 5월 21일 화요일 13th"></a>2019년 5월 21일 화요일 13th</h1><h2 id="Masking"><a href="#Masking" class="headerlink" title="Masking"></a>Masking</h2><blockquote><p>True, False를 활용해 인덱싱하는 방법</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">a &gt; <span class="number">3</span></span><br><span class="line">: array([<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>])</span><br><span class="line">a[a&gt;<span class="number">3</span>]</span><br><span class="line">: array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">a[(a &gt; <span class="number">3</span>) &amp; (a &lt; <span class="number">8</span>)]</span><br><span class="line">: array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">a[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]]</span><br><span class="line">: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="ix"><a href="#ix" class="headerlink" title="ix_"></a>ix_</h2><p><span style="background-color:skyblue">Cartesian product 연산</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">h = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">h</span><br><span class="line">: array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>]])</span><br><span class="line">h[np.ix_([<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])]</span><br><span class="line">:</span><br><span class="line">array([[ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br></pre></td></tr></table></figure><h2 id="Namedtuple"><a href="#Namedtuple" class="headerlink" title="Namedtuple"></a>Namedtuple</h2><blockquote><p>이름 있는 튜플 만들기<br>sequence tuple 처럼 사용 가능<br>클래스처럼 이름으로 접근가능</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">t = namedtuped(<span class="string">'AttendanceSheet'</span>,[<span class="string">'name'</span>,<span class="string">'attendance'</span>])</span><br><span class="line">x=t(<span class="string">'jh'</span>,<span class="string">'yes'</span>)</span><br><span class="line">x[<span class="number">0</span>]</span><br><span class="line">x[<span class="number">1</span>]</span><br><span class="line">x.name</span><br><span class="line">x.attendance</span><br><span class="line">type(x)</span><br><span class="line"></span><br><span class="line">: jh</span><br><span class="line">  yes</span><br><span class="line">  jh</span><br><span class="line">  yes</span><br><span class="line">  __main__.AttendanceSheet</span><br></pre></td></tr></table></figure><h2 id="broadcasting"><a href="#broadcasting" class="headerlink" title="broadcasting"></a>broadcasting</h2><blockquote><p>벡터연산에서 자동으로 크기 맞춰주는 기법</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">: array([ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>])</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58095909-e717e500-7c0e-11e9-9adb-d916ca172bf2.JPG" alt="broadcasting"></p><h2 id="ufunc-universal-function"><a href="#ufunc-universal-function" class="headerlink" title="ufunc(universal function)"></a>ufunc(universal function)</h2><blockquote><p>범용적인 함수 즉, python, numpy 둘다 있는 함수 but 차이가 있다</p></blockquote><h3 id="1개의-배열에-대한-ufunc-함수"><a href="#1개의-배열에-대한-ufunc-함수" class="headerlink" title="1개의 배열에 대한 ufunc 함수"></a>1개의 배열에 대한 ufunc 함수</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">abs,fabs &#x3D;&gt; 절대값</span><br><span class="line">ceil &#x3D;&gt; 올림</span><br><span class="line">floor &#x3D;&gt; 내림</span><br><span class="line">modf &#x3D;&gt; 정수부분과 소수점 부분 분리</span><br><span class="line">rint &#x3D;&gt; 올림하거나 내림하거나 5를 기준으로</span><br><span class="line">log, log10, log2, log1p &#x3D;&gt; 로그 값 취하기</span><br><span class="line">exp &#x3D;&gt; exponential 지수함수 (정확히 어떻게 계산되는지는 모르겠음)</span><br><span class="line">sqrt &#x3D;&gt; 루트</span><br><span class="line">square &#x3D;&gt; 제곱</span><br><span class="line">isnan &#x3D;&gt; nan인지 체크</span><br><span class="line">isinfinite &#x3D;&gt; 유한한 수안자 체크</span><br><span class="line">logical_not &#x3D;&gt; 모르겠음</span><br><span class="line">sign &#x3D; &gt; 0을 제외하고 다 1로 반환 (사실 정확하지 않음)</span><br><span class="line">sin, cos, tan &#x3D;&gt; sin, cos, tan값 계산</span><br><span class="line">arcsin, arccos, arctan &#x3D;&gt; 역삼각함수 계산</span><br></pre></td></tr></table></figure><h3 id="2개의-배열에-대한-ufunc-함수"><a href="#2개의-배열에-대한-ufunc-함수" class="headerlink" title="2개의 배열에 대한 ufunc 함수"></a>2개의 배열에 대한 ufunc 함수</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">add &#x3D;&gt; 각 요소 더하기</span><br><span class="line">subtract &#x3D;&gt; 각 요소 빼기</span><br><span class="line">multiply &#x3D;&gt; 각 요소 곱하기</span><br><span class="line">divide &#x3D;&gt; 각 요소 나눈 값</span><br><span class="line">floor_divide &#x3D;&gt; 각 요소 나눈 몫</span><br><span class="line">mod &#x3D;&gt; 각 요소 나눈 나머지</span><br><span class="line">power &#x3D;&gt; 승 계산 ex) 2,3 &#x3D;&gt; 2의 3 승 : 8</span><br><span class="line">maximum, fmax &#x3D;&gt; 더 큰 값</span><br><span class="line">minimum, fmin &#x3D;&gt; 더 작은 값</span><br><span class="line">greater &#x3D;&gt; 앞 값이 더 크면 True 작으면 False</span><br><span class="line">greater_equal &#x3D;&gt; 앞 값이 크거나 같으면 True 작으면 False</span><br><span class="line">less &#x3D;&gt; greater 반대</span><br><span class="line">less_equal &#x3D;&gt; greater_equal 반대</span><br><span class="line">equal &#x3D;&gt; 같으면 True</span><br><span class="line">not_equal &#x3D;&gt; 다르면 True</span><br><span class="line">copysign &#x3D;&gt; 모르겠음</span><br></pre></td></tr></table></figure><h3 id="Python-Numpy-ufunc"><a href="#Python-Numpy-ufunc" class="headerlink" title="Python, Numpy ufunc"></a>Python, Numpy ufunc</h3><blockquote><p>python에서는 동시에 사용 못하지만 numpy에서는 한꺼번에 연산 가능</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.sqrt(<span class="number">4</span>)</span><br><span class="line">: <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">np.sqrt((<span class="number">4</span>,<span class="number">9</span>))</span><br><span class="line">: array([<span class="number">2.</span>, <span class="number">3.</span>])</span><br></pre></td></tr></table></figure><hr><p><img src="https://user-images.githubusercontent.com/33630505/58092007-052d1780-7c06-11e9-86ca-8b8a2dae0a74.JPG" alt="ufunc1"><br><img src="https://user-images.githubusercontent.com/33630505/58092009-065e4480-7c06-11e9-9dbc-eb9665801c3a.JPG" alt="ufunc2"><br><img src="https://user-images.githubusercontent.com/33630505/58092011-078f7180-7c06-11e9-826c-b477930b24a5.JPG" alt="ufunc3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.sqrt([<span class="number">4</span>,<span class="number">9</span>])</span><br><span class="line">np.sqrt((<span class="number">4</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">둘다 가능</span><br></pre></td></tr></table></figure><p><strong>Numpy Tip1</strong> mutable 성질이 중요하지 않으면 list, tuple 혼용 가능</p><h3 id="배열-분할하기-붙이기"><a href="#배열-분할하기-붙이기" class="headerlink" title="배열 분할하기, 붙이기"></a>배열 분할하기, 붙이기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split (분할하기)</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">a</span><br><span class="line">: array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line"></span><br><span class="line">np.hsplit(a,<span class="number">2</span>) <span class="comment"># 수평축으로 분할(세로, 사실상 수직) (np.split(a,2,axis=1))</span></span><br><span class="line">: [array([[ <span class="number">0</span>,  <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>]]),</span><br><span class="line">   array([[ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">14</span>, <span class="number">15</span>]])]</span><br><span class="line"></span><br><span class="line">np.hsplit(a,(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">: [array([[ <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">4</span>],</span><br><span class="line">        [ <span class="number">8</span>],</span><br><span class="line">        [<span class="number">12</span>]]),</span><br><span class="line">   array([[ <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">9</span>],</span><br><span class="line">        [<span class="number">13</span>]]),</span><br><span class="line">   array([[ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">14</span>, <span class="number">15</span>]])]</span><br><span class="line"></span><br><span class="line">np.vsplit(a, <span class="number">2</span>)</span><br><span class="line">: [array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]),</span><br><span class="line">   array([[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])]</span><br><span class="line"></span><br><span class="line">np.s_[a,b]</span><br><span class="line">: (array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]), array([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>][<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>][slice(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">np.arange(<span class="number">10</span>)[np.s_[<span class="number">2</span>:<span class="number">5</span>]]</span><br><span class="line">: array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># stack (붙이기)</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">5</span>)</span><br><span class="line">b = np.arange(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">np.stack((a,b), axis=<span class="number">1</span>)</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">         [<span class="number">2</span>, <span class="number">7</span>],</span><br><span class="line">         [<span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">4</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">np.stack((a,b), axis=<span class="number">0</span>)</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">         [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">np.vstack((a,b))</span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">         [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">np.hstack((a,b))</span><br><span class="line">: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">np.column_stack((a,b))   <span class="comment"># np.c_[a,b]</span></span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">         [<span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">         [<span class="number">2</span>, <span class="number">7</span>],</span><br><span class="line">         [<span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">4</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">np.row_stack((a,b))      <span class="comment"># np.r_[a,b]랑 같음</span></span><br><span class="line">: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">         [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br></pre></td></tr></table></figure><br><h3 id="view-amp-copy"><a href="#view-amp-copy" class="headerlink" title="view &amp; copy"></a>view &amp; copy</h3><blockquote><p>python은 기본적으로 shallow copy, numpy는 기본적으로 deep copy</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python에서 deep copy하기</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy는 기본적으로 deep copy</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = a.copy()</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">  array([[<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><br><h3 id="ravel-amp-flatten"><a href="#ravel-amp-flatten" class="headerlink" title="ravel &amp; flatten"></a>ravel &amp; flatten</h3><blockquote><p>Ravel - Bolero (클래식/디지몬 어드벤처 극장판에서 나오는 노래)<br>ravel은 몇 차원이건 간에 모두 1차원으로 만들어 준다<br>그리고 view 방식이기 때문에 원래 값을 바꾸기 때문에 주의 해야한다<br>flatten은 copy 방식</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">a.ravel()</span><br><span class="line">a.flatten()</span><br><span class="line">: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">  array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><h3 id="newaxis"><a href="#newaxis" class="headerlink" title="newaxis"></a>newaxis</h3><blockquote><p>return이 None이고 차원을 추가한다<br>곱하기 할때에도 활용하는 방법이다.(차원을 맞추어 계산해야 하기 때문)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">a</span><br><span class="line">a.shape</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">  (<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># z축에 추가</span></span><br><span class="line">b=a[:,:,np.newaxis]</span><br><span class="line">b</span><br><span class="line">b.shape</span><br><span class="line">: array([[[<span class="number">1</span>],</span><br><span class="line">        [<span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>]]])</span><br><span class="line">   (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)<span class="comment">## 평면 두개    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y축에 추가</span></span><br><span class="line">c=a[:,np.newaxis]</span><br><span class="line">c</span><br><span class="line">c.shape</span><br><span class="line">: array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]])</span><br><span class="line">  (<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)     <span class="comment">## 평면 두개</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># x축에 추가</span></span><br><span class="line">d=a[np.newaxis,:]</span><br><span class="line">d</span><br><span class="line">d.shape</span><br><span class="line">: array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]])</span><br><span class="line">  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)     <span class="comment">## 평면 한개</span></span><br></pre></td></tr></table></figure><br><h4 id="elementwise-product"><a href="#elementwise-product" class="headerlink" title="elementwise product"></a>elementwise product</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b = np.array([[<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">a*b</span><br><span class="line">: array([[<span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><p><code>복습 시간</code> 18시 30분 ~ 21시 / 총 2시간 30분</p><p><a id = '14th'></a></p><h1 id="2019년-5월-23일-목요일-14th"><a href="#2019년-5월-23일-목요일-14th" class="headerlink" title="2019년 5월 23일 목요일 14th"></a>2019년 5월 23일 목요일 14th</h1><h2 id="newaxis-정리"><a href="#newaxis-정리" class="headerlink" title="newaxis 정리"></a>newaxis 정리</h2><p><span style="color:orange">1차원: 방향이 없는 벡터(스칼라)형태의 데이터만 존재, [] 1개</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a.shape</span><br><span class="line"></span><br><span class="line">: (<span class="number">3</span>,)  <span class="comment"># 3개의 데이터가 하나로 묶여 있다고 생각</span></span><br></pre></td></tr></table></figure><p><span style="color:orange">2차원 : 행렬, 평면, [] 2개</span> <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a[np.newaxis]     <span class="comment"># x축 추가 행기준으로 묶기</span></span><br><span class="line">a[np.newaxis].shape</span><br><span class="line"></span><br><span class="line">: array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]) <span class="comment"># 가장 바깥 [] 소거하고 행갯수 세면 x축 데이터 갯수</span></span><br><span class="line">                   <span class="comment"># 그 다음 안 [] 소거하고 행갯수 세면 y축 데이터 갯수</span></span><br><span class="line">  (<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">a[:,np.newaxis] <span class="comment"># y축 추가 열기준으로 묶기 (np.expand_dims(a, 1))</span></span><br><span class="line">a[:,np.newaxis].shape</span><br><span class="line"></span><br><span class="line">: array([[<span class="number">1</span>],      <span class="comment"># 가장 바깥 [] 소거하고 열갯수 세면 x축 데이터 갯수</span></span><br><span class="line">        [<span class="number">2</span>],       <span class="comment"># 그 다음 안 [] 소거하고 열갯수 세면 y축 데이터 갯수</span></span><br><span class="line">        [<span class="number">3</span>]])</span><br><span class="line">  (<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><span style="background-color:red">이 경우는 뭐지?</span> <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">a</span><br><span class="line">: array([list([<span class="number">1</span>, <span class="number">2</span>]), list([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])], dtype=object)</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">27</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">np.swapaxes(a, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">: array([[[ <span class="number">0</span>,  <span class="number">9</span>, <span class="number">18</span>],</span><br><span class="line">          [ <span class="number">3</span>, <span class="number">12</span>, <span class="number">21</span>],</span><br><span class="line">          [ <span class="number">6</span>, <span class="number">15</span>, <span class="number">24</span>]],</span><br><span class="line"></span><br><span class="line">         [[ <span class="number">1</span>, <span class="number">10</span>, <span class="number">19</span>],</span><br><span class="line">          [ <span class="number">4</span>, <span class="number">13</span>, <span class="number">22</span>],</span><br><span class="line">          [ <span class="number">7</span>, <span class="number">16</span>, <span class="number">25</span>]],</span><br><span class="line"></span><br><span class="line">         [[ <span class="number">2</span>, <span class="number">11</span>, <span class="number">20</span>],</span><br><span class="line">          [ <span class="number">5</span>, <span class="number">14</span>, <span class="number">23</span>],</span><br><span class="line">          [ <span class="number">8</span>, <span class="number">17</span>, <span class="number">26</span>]]])</span><br><span class="line"></span><br><span class="line">np.moveaxis(a, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">: array([[[ <span class="number">0</span>,  <span class="number">9</span>, <span class="number">18</span>],</span><br><span class="line">          [ <span class="number">1</span>, <span class="number">10</span>, <span class="number">19</span>],</span><br><span class="line">          [ <span class="number">2</span>, <span class="number">11</span>, <span class="number">20</span>]],</span><br><span class="line"></span><br><span class="line">         [[ <span class="number">3</span>, <span class="number">12</span>, <span class="number">21</span>],</span><br><span class="line">          [ <span class="number">4</span>, <span class="number">13</span>, <span class="number">22</span>],</span><br><span class="line">          [ <span class="number">5</span>, <span class="number">14</span>, <span class="number">23</span>]],</span><br><span class="line"></span><br><span class="line">         [[ <span class="number">6</span>, <span class="number">15</span>, <span class="number">24</span>],</span><br><span class="line">          [ <span class="number">7</span>, <span class="number">16</span>, <span class="number">25</span>],</span><br><span class="line">          [ <span class="number">8</span>, <span class="number">17</span>, <span class="number">26</span>]]])</span><br></pre></td></tr></table></figure><p><span style="color:orange">3차원 : 행렬 중첩, 평면 겹쳐서 직육면체처럼 [] 3개 </span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">a[np.newaxis]</span><br><span class="line">a[np.newaxis].shape</span><br><span class="line"></span><br><span class="line">: array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]])   <span class="comment"># 가장 바깥 []소거하고 []x2인 행갯수 세면 x축 데이터 갯수</span></span><br><span class="line">                       <span class="comment"># [[1,2,3]] 이라는 평면 1개   </span></span><br><span class="line">  (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)              <span class="comment"># 그 다음 안 [] 소거하고 []x1인 행갯수 세면 y축 데이터 갯수</span></span><br><span class="line">                       <span class="comment"># 마지막 [] 소거하고 행갯수 세면 z축 데이터 갯수</span></span><br><span class="line"></span><br><span class="line">a[:,np.newaxis]</span><br><span class="line">a[np.newaxis].shape    <span class="comment"># 위와 동일</span></span><br><span class="line"></span><br><span class="line">: array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]])</span><br><span class="line">  (<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>)      </span><br><span class="line"></span><br><span class="line">a[:,:,np.newaxis]</span><br><span class="line">a[:,:,np.newaxis].shape <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">: array([[[<span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>],</span><br><span class="line">         [<span class="number">3</span>]]])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="tile"><a href="#tile" class="headerlink" title="tile"></a>tile</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">np.tile(a,<span class="number">3</span>)</span><br><span class="line">: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">np,tile(a,(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">np.tile(a,[<span class="number">2</span>,<span class="number">3</span>])  <span class="comment"># duck typing</span></span><br><span class="line">: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><h2 id="파일-불러오기"><a href="#파일-불러오기" class="headerlink" title="파일 불러오기"></a>파일 불러오기</h2><h3 id="loadtxt-genfromtxt"><a href="#loadtxt-genfromtxt" class="headerlink" title="loadtxt, genfromtxt"></a>loadtxt, genfromtxt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">%%writefile a.csv</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"></span><br><span class="line">: Writing a.csv</span><br><span class="line"></span><br><span class="line">x = np.loadtxt(<span class="string">'a.csv'</span>, delimiter = <span class="string">','</span>)</span><br><span class="line">x</span><br><span class="line">: array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line">x = np.genfromtxt(<span class="string">'a.csv'</span>)</span><br><span class="line">: array([nan, nan])</span><br><span class="line"></span><br><span class="line"><span class="comment"># loadtxt는 delimiter를 이용해 문자열 구분을 하지 않으면 에러가 나지만</span></span><br><span class="line"><span class="comment"># getfromtxt는 nan이라는 출력값을 주고 에러를 발생시키지 않는다</span></span><br></pre></td></tr></table></figure><h3 id="fromfile"><a href="#fromfile" class="headerlink" title="fromfile"></a>fromfile</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.fromfile(<span class="string">'a.csv'</span>, sep=<span class="string">','</span>) <span class="comment"># \n을 만나면 종료</span></span><br><span class="line">x</span><br><span class="line"></span><br><span class="line">: array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>])</span><br></pre></td></tr></table></figure><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="Flat"><a href="#Flat" class="headerlink" title="Flat"></a>Flat</h3><blockquote><p>구조가 있는 파일</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. text file  </span><br><span class="line">&#x3D;&gt; 확장자 상관없이 열 수 있다.</span><br><span class="line">&#x3D;&gt; 데이터 교환시 유용함</span><br><span class="line">2. binary file</span><br><span class="line">&#x3D;&gt; 연결프로그램에 의존적</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.savez()</span><br><span class="line"></span><br><span class="line">np.save()</span><br></pre></td></tr></table></figure><h3 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h3><blockquote><p>구조가 없는 파일</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## linear algebra</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### WhyPythonIsSlow + open_with 내용 복습</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;docs.scipy.org&#x2F;doc&#x2F;numpy&#x2F;user&#x2F;quickstart.html 복습</span><br><span class="line"></span><br><span class="line">### 설명 보기</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.lookfor(&#39;shape&#39;)</span><br><span class="line">: 설명 ~</span><br><span class="line">np.info(&#39;shape&#39;)</span><br><span class="line">: 설명 ~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Lecture </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays(Codesignal)</title>
      <link href="/2019/04/29/Arrays/"/>
      <url>/2019/04/29/Arrays/</url>
      
        <content type="html"><![CDATA[<h1 id="FirstDuplicate"><a href="#FirstDuplicate" class="headerlink" title="FirstDuplicate"></a>FirstDuplicate</h1><blockquote><p>입력 리스트에서 제일 먼저 중복을 이루는 값 찾아내는 함수.</p></blockquote><br><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a: [2, 1, 3, 5, 3, 2]</span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">a: [1]</span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">a: [3, 3, 3]</span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">a: [1, 1, 2, 2, 1]</span><br><span class="line">[1번]</span><br><span class="line">Output: 1  </span><br><span class="line">or</span><br><span class="line">[2번]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><h2 id="1번-with-Python"><a href="#1번-with-Python" class="headerlink" title="[1번] with Python"></a>[1번] with Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstDuplicate</span><span class="params">(a)</span>:</span></span><br><span class="line">    temp = <span class="number">99</span></span><br><span class="line">    nums = list(set(a))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(a) == len(nums):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> a.count(i) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(a):</span><br><span class="line">                <span class="keyword">if</span> value == i <span class="keyword">and</span> a.index(i)!= index:</span><br><span class="line">                    <span class="keyword">if</span> temp &gt; index:</span><br><span class="line">                        temp = index</span><br><span class="line">    <span class="keyword">return</span> a[temp]</span><br></pre></td></tr></table></figure><p><code>가장 먼저 중복을 이루면 해당하는 값을 출력한다.</code></p><br><h2 id="2번-with-Python"><a href="#2번-with-Python" class="headerlink" title="[2번] with Python"></a>[2번] with Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstDuplicate</span><span class="params">(a)</span>:</span></span><br><span class="line">    temp = <span class="number">-1</span></span><br><span class="line">    nums = list(set(a))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(a) == len(nums):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> a.count(i) &gt; <span class="number">1</span>:</span><br><span class="line">            a.reverse()</span><br><span class="line">            <span class="keyword">if</span> temp &lt; a.index(i):</span><br><span class="line">                temp = a.index(i)</span><br><span class="line">                a.reverse()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a.reverse()</span><br><span class="line">    a.reverse()</span><br><span class="line">    <span class="keyword">return</span> a[temp]</span><br></pre></td></tr></table></figure><p><code>입력값의 전체를 확인 했을 때 가장 마지막 중복값의 인덱스가 빠른 경우의 값을 출력</code></p><br><h1 id="FirstNotRepeatingCharacter"><a href="#FirstNotRepeatingCharacter" class="headerlink" title="FirstNotRepeatingCharacter"></a>FirstNotRepeatingCharacter</h1><blockquote><p>가장 처음으로 오는 중복이 없는 문자</p></blockquote><br><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &#39;aabbcc&#39;</span><br><span class="line">ouput &#x3D; &#39;_&#39;</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;abbc&#39;</span><br><span class="line">output &#x3D; &#39;a&#39;</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;a&#39;</span><br><span class="line">output &#x3D; &#39;a&#39;</span><br></pre></td></tr></table></figure><br><h2 id="1번-with-Python-1"><a href="#1번-with-Python-1" class="headerlink" title="[1번] with Python"></a>[1번] with Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstNotRepeatingCharacter</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> list(s):</span><br><span class="line">        <span class="keyword">if</span> list(s).count(x) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'_'</span></span><br></pre></td></tr></table></figure><p><code>예외 상황없이 잘 되지만 속도가 매우 낮다.</code></p><br><h2 id="2번-with-Python-1"><a href="#2번-with-Python-1" class="headerlink" title="[2번] with Python"></a>[2번] with Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstNotRepeatingCharacter</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> Counter(s).items():</span><br><span class="line">        <span class="keyword">if</span> y==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"_"</span></span><br></pre></td></tr></table></figure><p><code>1번 버전보다 속도가 더 빠르다.</code></p><br><h2 id="3번-with-Python"><a href="#3번-with-Python" class="headerlink" title="[3번] with Python"></a>[3번] with Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstNotRepeatingCharacter</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> s.index(c) == s.rindex(c):</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'_'</span></span><br></pre></td></tr></table></figure><p><code>rindex는 가장 오른쪽에 있는 index값을 출력 하는 메소드!</code></p><br>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Arrays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> coding test </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI 이노베이션 스퀘어 수업(기본반) - pandas</title>
      <link href="/2019/04/29/AILecture_pandas/"/>
      <url>/2019/04/29/AILecture_pandas/</url>
      
        <content type="html"><![CDATA[<p><a id = '15th'></a></p><h1 id="2019년-5월-24일-금요일-15th"><a href="#2019년-5월-24일-금요일-15th" class="headerlink" title="2019년 5월 24일 금요일 15th"></a>2019년 5월 24일 금요일 15th</h1><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><blockquote><p>Numpy 기반으로 만들어진 데이터 조작, 분석을 위한 프레임워크 <br><br>Data Wrangling Tool, 데이터를 불러와 합치고, 간단한 전처리하고, 기초통계 분석하는 프레임워크<br></p></blockquote><p><span style="color:orange">Pandas로 할 수 있는 2가지</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 기초통계분석 (EDA)</span><br><span class="line">2. 전처리</span><br><span class="line">- 반정형 데이터를 정형데이터로 바꿔준다</span><br></pre></td></tr></table></figure><br><p>ETL vs Munging ETL(Extract Transform Load)는 개발자 입장에서 하는 파이프라인이고 Munging은 통계분석가 입장에서 하는 파이프라인이라고 생각하면 된다.</p><br><h2 id="데이터-종류"><a href="#데이터-종류" class="headerlink" title="데이터 종류"></a>데이터 종류</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 정형 데이터 : Dataframe 객체에 정확하게 컬럼에 집어 넣을 수 있는 데이터</span><br><span class="line">2. 비정형 데이터</span><br><span class="line">3. 반정형 데이터</span><br></pre></td></tr></table></figure><h2 id="데이터-타입-만드는-방법"><a href="#데이터-타입-만드는-방법" class="headerlink" title="데이터 타입 만드는 방법"></a>데이터 타입 만드는 방법</h2><h3 id="Numpy-방식-structured-array"><a href="#Numpy-방식-structured-array" class="headerlink" title="Numpy 방식 (structured array)"></a>Numpy 방식 (structured array)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([(<span class="string">'jihyuk'</span>,<span class="number">25</span>,<span class="number">73.0</span>),(<span class="string">'thor'</span>,<span class="number">35</span>,<span class="number">85.0</span>),(<span class="string">'lion'</span>,<span class="number">10</span>,<span class="number">30.0</span>)],dtype=[(<span class="string">'name'</span>,<span class="string">'U10'</span>),(<span class="string">'age'</span>,<span class="string">'i4'</span>),(<span class="string">'weight'</span>,<span class="string">'f4'</span>)])  </span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>]</span><br><span class="line">: (<span class="string">'jihyuk'</span>,<span class="number">25</span>,<span class="number">73.0</span>)</span><br><span class="line">x[<span class="number">0</span>][<span class="string">'name'</span>]  <span class="comment"># dict의 key값으로 접근</span></span><br><span class="line">: <span class="string">'jihyuk'</span></span><br></pre></td></tr></table></figure><h3 id="Python-방식-namedtuple"><a href="#Python-방식-namedtuple" class="headerlink" title="Python 방식 (namedtuple)"></a>Python 방식 (namedtuple)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">x = namedtuple(<span class="string">'Address'</span>,[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'weight'</span>])</span><br><span class="line">a = x(<span class="string">'jh'</span>,<span class="number">25</span>,<span class="string">'73.0'</span>)</span><br><span class="line"></span><br><span class="line">a.name  <span class="comment"># attribute</span></span><br><span class="line">a.age</span><br><span class="line">: <span class="string">'jh'</span></span><br><span class="line">  <span class="number">25</span></span><br></pre></td></tr></table></figure><h2 id="Pandas로-기초통계분석하기"><a href="#Pandas로-기초통계분석하기" class="headerlink" title="Pandas로 기초통계분석하기"></a>Pandas로 기초통계분석하기</h2><h3 id="첫번째-데이터-불러들이기"><a href="#첫번째-데이터-불러들이기" class="headerlink" title="[첫번째] 데이터 불러들이기"></a>[첫번째] 데이터 불러들이기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'/Users/SAMSUNG/Desktop/개인공부/AI/AI 이노베이션 스퀘어 기본과정/수업 내용/abc.csv'</span>,engine=<span class="string">'python'</span>)</span><br><span class="line">type(data)</span><br><span class="line">: pandas.core.frame.DataFrame</span><br><span class="line"></span><br><span class="line"><span class="comment"># read 메소드는 flat file 또는 sql format을 dataframe형태로 불러들인다</span></span><br><span class="line"><span class="comment"># 첫번째 인자는 불러올 파일의 경로인데 현재 작업파일과 동일한 위치에 있다면 파일이름만 적어줘도 된다</span></span><br><span class="line"><span class="comment"># engine = 'python' 이나 encoding = 'cp949'를 인자로 넣어주지 않으면 unicodeerror가 뜬다</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58368737-26567680-7f2c-11e9-9581-e21370c90f49.JPG" alt="read method"></p><p><strong>filepath_buffer</strong>는 read_csv 메소드의 첫번째 인자로 파일경로나, url이 올 수 있다  </p><p><strong>Dataframe</strong> 객체는 Numpy에서 structured array방식을 따라 데이터 타입을 생성한다. pandas는 벡터, 행렬연산으로 속도를 빠르게 하기 위해 Numpy방식을 그대로 이어받아 사용한다. 그리고 DataFrame에서 각 열은 단일 데이터 형식만을 저장한다. 따라서 타입체크를 하지 않아 속도가 빠르다. 또한 DataFrame은 dict, attr 두가지 방법으로 모두 접근 가능하다. ex) dataframe.column, dataframe[‘column’]</p><p><strong>Series</strong> 객체는 Dataframe에서 1차원 데이터 한 행이나 한 열, 1차원이기 때문에 방향은 없다. Series는 dataframe 처럼 dictionary 형태로 구성되어 있고 key값으로 index가 자동 생성이 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = np.read_csv(<span class="string">'abc.csv'</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">data.values</span><br><span class="line"></span><br><span class="line">: array([[<span class="string">'절도'</span>, <span class="string">' 129 '</span>, <span class="string">' 217 '</span>, ..., <span class="string">' 1 '</span>, <span class="string">' - '</span>, nan],</span><br><span class="line">       [<span class="string">'불법사용'</span>, <span class="string">' - '</span>, <span class="string">' - '</span>, ..., <span class="string">' - '</span>, <span class="string">' - '</span>, nan],</span><br><span class="line">       [<span class="string">'침입절도'</span>, <span class="string">' 29 '</span>, <span class="string">' 38 '</span>, ..., <span class="string">' - '</span>, <span class="string">' - '</span>, nan],</span><br><span class="line">       ...,</span><br><span class="line">       [<span class="string">'화재예방·소방시설설치유지및안전관리에관한법률'</span>, <span class="string">' - '</span>, <span class="string">' - '</span>, ..., <span class="string">' - '</span>, <span class="string">' - '</span>, nan],</span><br><span class="line">       [<span class="string">'화학물질관리법'</span>, <span class="string">' 1 '</span>, <span class="string">' - '</span>, ..., <span class="string">' 3 '</span>, <span class="string">' - '</span>, nan],</span><br><span class="line">       [<span class="string">'기타특별법'</span>, <span class="string">' 26 '</span>, <span class="string">' 226 '</span>, ..., <span class="string">' 4 '</span>, <span class="string">' - '</span>, nan]], dtype=object)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict으로 접근해서 values를 사용하면 numpy format인것을 확인할 수 있다</span></span><br></pre></td></tr></table></figure><h3 id="Series-Vector-차이점"><a href="#Series-Vector-차이점" class="headerlink" title="Series , Vector 차이점"></a>Series , Vector 차이점</h3><p>Series, Vector 둘다 1차원 데이터에 방향도 없지만 Series는 index가 붙는다</p><br><h3 id="두번째-분석하고-그래프-그리기"><a href="#두번째-분석하고-그래프-그리기" class="headerlink" title="[두번째] 분석하고 그래프 그리기"></a>[두번째] 분석하고 그래프 그리기</h3><h3 id="분석하기전-5가지-확인-사항"><a href="#분석하기전-5가지-확인-사항" class="headerlink" title="분석하기전 5가지 확인 사항"></a>분석하기전 5가지 확인 사항</h3><blockquote><p>데이터를 분석하기 전에 분석할 가치가 있는 데이터인지 부터 판단해야 한다!  데이터의 갯수가 충분한지 여부도 체크하고, 내가 불러들일 수 있는 크기의 데이터 양인지 체크하고 편향된 데이터값이 많은지 등등 알고서 분석에 적합한 데이터를 판별해야한다. (데이터가 많으면 많을 수록 분석, 예측시 성능이 좋아진다!</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. info : 데이터의 기본 정보를 보여준다</span><br><span class="line">2. describe : 숫자형태인 데이터에 대해서 기본 통계값을 보여준다</span><br><span class="line">3. head : default로 앞에서 5개 데이터만 불러온다 (앞에서부터 보고싶은 데이터 갯수 입력 가능)</span><br><span class="line">4. tail : head와 반대로 뒤에서 부터 데이터를 불러온다</span><br><span class="line">5. sample : 랜덤으로 하나의 데이터를 불러온다</span><br></pre></td></tr></table></figure><h3 id="info-describe로-데이터의-숨겨진-의미-찾기"><a href="#info-describe로-데이터의-숨겨진-의미-찾기" class="headerlink" title="info, describe로 데이터의 숨겨진 의미 찾기"></a>info, describe로 데이터의 숨겨진 의미 찾기</h3><ol><li>column 갯수 확인 =&gt; 차원의 저주 고려 <br></li><li>데이터 갯수 확인 =&gt; 큰 수의 법칙 고려 <br></li><li>미싱 데이터 찾기 =&gt; 미싱데이터를 포함하고 있으면 정확도  <br></li><li>데이터 타입 확인 =&gt; 적절한 타입을 썻는지 체크 (category, object는 각각 지원하는 기능이 다르다) <br></li></ol><br><h4 id="data-도로교통공단-시도-시군구별-도로형태별-교통사고-2018-공공데이터"><a href="#data-도로교통공단-시도-시군구별-도로형태별-교통사고-2018-공공데이터" class="headerlink" title="data (도로교통공단_시도_시군구별_도로형태별_교통사고(2018) 공공데이터)"></a>data (도로교통공단_시도_시군구별_도로형태별_교통사고(2018) 공공데이터)</h4><blockquote><p>pandas로 불러오면 rangeindex가 붙는다</p></blockquote><p><img src="https://user-images.githubusercontent.com/33630505/58369114-09707200-7f31-11e9-8b4b-cfcc10731401.JPG" alt="accident"></p><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'load.csv'</span>, engine = <span class="string">'python'</span>)</span><br><span class="line">data.info()</span><br><span class="line"></span><br><span class="line">: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">  <span class="title">RangeIndex</span>:</span> <span class="number">2001</span> entries, <span class="number">0</span> to <span class="number">2000</span></span><br><span class="line">  Data columns (total <span class="number">9</span> columns):</span><br><span class="line">  시도      <span class="number">2001</span> non-null object</span><br><span class="line">  시군구     <span class="number">2001</span> non-null object</span><br><span class="line">  도로형태    <span class="number">2001</span> non-null object</span><br><span class="line">  발생건수    <span class="number">2001</span> non-null int64</span><br><span class="line">  사망자수    <span class="number">2001</span> non-null int64</span><br><span class="line">  부상자수    <span class="number">2001</span> non-null int64</span><br><span class="line">  중상      <span class="number">2001</span> non-null int64</span><br><span class="line">  경상      <span class="number">2001</span> non-null int64</span><br><span class="line">  부상신고    <span class="number">2001</span> non-null int64</span><br><span class="line">  dtypes: int64(<span class="number">6</span>), object(<span class="number">3</span>)</span><br><span class="line">  memory usage: <span class="number">140.8</span>+ KB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 교통사고 공공데이터</span></span><br></pre></td></tr></table></figure><h4 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'load.csv'</span>, engine = <span class="string">'python'</span>)</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58369143-5f451a00-7f31-11e9-8bf4-b9dcac83f844.JPG" alt="describe"></p><h4 id="head-tail-sample"><a href="#head-tail-sample" class="headerlink" title="head, tail, sample"></a>head, tail, sample</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'load.csv'</span>, engine = <span class="string">'python'</span>)</span><br><span class="line">data.head(<span class="number">3</span>)</span><br><span class="line">data.tail(<span class="number">3</span>)</span><br><span class="line">data.sample(<span class="number">3</span>) <span class="comment"># replace = True 옵션을 주면 복원추출</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58369306-78e76100-7f33-11e9-9abc-f94e94aac804.JPG" alt="head"><br><img src="https://user-images.githubusercontent.com/33630505/58369307-7a188e00-7f33-11e9-9254-1fdaa0245e32.JPG" alt="tail"><br><img src="https://user-images.githubusercontent.com/33630505/58369313-90bee500-7f33-11e9-8549-92b5635e9a3d.JPG" alt="sample"></p><h4 id="표준편차-표로-보기-boxplot"><a href="#표준편차-표로-보기-boxplot" class="headerlink" title="표준편차 표로 보기 (boxplot)"></a>표준편차 표로 보기 (boxplot)</h4><p><img src="https://user-images.githubusercontent.com/33630505/58369325-c237b080-7f33-11e9-9d04-2ec773255130.JPG" alt="boxplot"></p><h3 id="왜도-skewness-첨도-kurtosis"><a href="#왜도-skewness-첨도-kurtosis" class="headerlink" title="왜도(skewness), 첨도(kurtosis)"></a>왜도(skewness), 첨도(kurtosis)</h3><p><strong>왜도</strong> <br><br>왜도는 데이터가 대칭이 아닌 정도를 나타낸다 <br><br>왜도의 값이 음수이면 오른쪽으로 치우친 정도를 나타내고 <br><br>왜도의 값이 양수이면 왼쪽으로 치우친 정도를 나타낸다 <br><br><br><br><strong>첨도</strong> <br><br>첨도는 데이터가 중간값의 분포도의 정도를 나타낸다 <br><br>첨도의 값이 3보다 작으면 완만한 분포를 나타내고 <br><br>첨도의 값이 3보다 크면 뾰족한 분포를 나타낸다 <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'load.csv'</span>, engine = <span class="string">'python'</span>)</span><br><span class="line">data.skew()</span><br><span class="line">data.kurtosis() <span class="comment"># kurt</span></span><br><span class="line"></span><br><span class="line">: 발생건수    <span class="number">3.765094</span></span><br><span class="line">사망자수    <span class="number">3.820251</span></span><br><span class="line">부상자수    <span class="number">3.778984</span></span><br><span class="line">중상      <span class="number">3.541237</span></span><br><span class="line">경상      <span class="number">3.847238</span></span><br><span class="line">부상신고    <span class="number">5.351853</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">발생건수    <span class="number">17.881821</span></span><br><span class="line">사망자수    <span class="number">18.509412</span></span><br><span class="line">부상자수    <span class="number">17.783772</span></span><br><span class="line">중상      <span class="number">15.962331</span></span><br><span class="line">경상      <span class="number">18.220330</span></span><br><span class="line">부상신고    <span class="number">40.538785</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h2 id="열-뽑는-4가지-방법"><a href="#열-뽑는-4가지-방법" class="headerlink" title="열 뽑는 4가지 방법"></a>열 뽑는 4가지 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. dictionary</span><br><span class="line">2. attribute</span><br><span class="line">3. fancy indexing</span><br><span class="line">4. data type</span><br></pre></td></tr></table></figure><p><strong>Pandas Tip1</strong> 데이터 분석시 데이터 조작을 하기위해 할당을 하는 경우에 view방식으로 접근하게되면 원본 데이터도 변경될 수 있으므로 copy방식을 사용해야 한다</p><h2 id="행-뽑는-방법"><a href="#행-뽑는-방법" class="headerlink" title="행 뽑는 방법"></a>행 뽑는 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.loc  # index 명으로 접근</span><br><span class="line">2.iloc # index 숫자로 접근</span><br></pre></td></tr></table></figure><h2 id="문제해결-그리고-예측"><a href="#문제해결-그리고-예측" class="headerlink" title="문제해결 그리고 예측"></a>문제해결 그리고 예측</h2><p><span style="background-color:orange">많은 데이터 확보 =&gt; 기초 통계분석 및 전처리 =&gt; 기계학습 및 딥러닝으로 예측 </span></p><h2 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h2><blockquote><p>수집한 데이터가 들어왔을 때, 이를 다양한 각도에서 관찰하고 이해하는 과정. <br><br>한마디로 데이터를 분석하기 전에 그래프나 통계적인 방법으로 자료를 직관적으로 바라보는 과정이다. <br></p></blockquote><br><h3 id="nan값-제거"><a href="#nan값-제거" class="headerlink" title="nan값 제거"></a>nan값 제거</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'abc.csv'</span>,engine=<span class="string">'python'</span>)</span><br><span class="line">data.iloc[<span class="number">4</span>].dropna()</span><br></pre></td></tr></table></figure><hr><p><code>복습 시간</code>  2시간으로 추정</p><h1 id="2019년-5월-26일-일요일-Jupyter-Notebook-오류"><a href="#2019년-5월-26일-일요일-Jupyter-Notebook-오류" class="headerlink" title="2019년 5월 26일 일요일 Jupyter Notebook 오류"></a>2019년 5월 26일 일요일 Jupyter Notebook 오류</h1><blockquote><p>Numpy 예제 100선을 풀기 위해 파일을 불러오는 도중 해당 파일이 Not trusted 문제가 발생했다</p></blockquote><h2 id="Not-trusted"><a href="#Not-trusted" class="headerlink" title="Not trusted"></a>Not trusted</h2><p>내가 작성한 파일이 아닌 다른 사람에 의해 만들어진 파일이라서 보안상 문제가 될 수 있어 발생한 오류 인것 같다<br><br>그래서 열고자 하는 파일이 믿을만하다는 것을 알려주기 위해서 명령 프롬프트를 통해 신뢰할만한 파일이라고 직접 알려줘야 한다<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter trust name.ipynb</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하자 not trusted 오류는 발생하지 않았다 <br></p><h2 id="페이지를-열기-위한-메모리가-충분하지-않음"><a href="#페이지를-열기-위한-메모리가-충분하지-않음" class="headerlink" title="페이지를 열기 위한 메모리가 충분하지 않음"></a>페이지를 열기 위한 메모리가 충분하지 않음</h2><p>크롬 브라우저에서 메모리가 부족하다는 것이다. <br><br>그래서 쿠키정보를 삭제해보았다.</p><p><strong>해결!</strong> <br><br>그러나 힌트파일이 아닌 정답파일은 파일 자체 내용이 많아서 그런지 아직도 안열린다…</p><p><a id = '16th'></a></p><h1 id="2019년-5월-27일-월요일-16th"><a href="#2019년-5월-27일-월요일-16th" class="headerlink" title="2019년 5월 27일 월요일 16th"></a>2019년 5월 27일 월요일 16th</h1><h2 id="유니콘이-되려면…"><a href="#유니콘이-되려면…" class="headerlink" title="유니콘이 되려면…"></a>유니콘이 되려면…</h2><p><img src="https://user-images.githubusercontent.com/33630505/58414654-fedfe500-80b6-11e9-950d-03888fd83082.JPG" alt="unicon"></p><p><strong>Data Wrangling</strong> Raw data를 또 다른 형태로 수작업으로 전환하거나 매핑하는 과정. 즉, 여러가지 데이터 포멧을 내가 원하는 데이터 포멧으로 전환하여 사용하기 위한 과정. (Data Munging 이라고도 불린다)</p><h2 id="그래프-그리기"><a href="#그래프-그리기" class="headerlink" title="그래프 그리기"></a>그래프 그리기</h2><h3 id="describe로-나오는-값들-그래프로-그리기"><a href="#describe로-나오는-값들-그래프로-그리기" class="headerlink" title="describe로 나오는 값들 그래프로 그리기"></a>describe로 나오는 값들 그래프로 그리기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.csv'</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">pd.plotting.boxplot(data)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58414617-e374da00-80b6-11e9-9e72-168df4140f90.JPG" alt="describe"></p><h3 id="정규분포가-되는지-확인하는-그래프-그리기"><a href="#정규분포가-되는지-확인하는-그래프-그리기" class="headerlink" title="정규분포가 되는지 확인하는 그래프 그리기"></a>정규분포가 되는지 확인하는 그래프 그리기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.csv'</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">pd.plotting.scatter_matrix(data)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58416173-aeb75180-80bb-11e9-8cc3-5d8f83737d5d.JPG" alt="scatter"></p><h2 id="matplotlib-inline-amp-notebook"><a href="#matplotlib-inline-amp-notebook" class="headerlink" title="matplotlib inline &amp; notebook"></a>matplotlib inline &amp; notebook</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">data.boxplot()</span><br><span class="line"></span><br><span class="line">%matplotlib notebook</span><br><span class="line">data.boxplot()</span><br></pre></td></tr></table></figure><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p><img src="https://user-images.githubusercontent.com/33630505/58416292-0f468e80-80bc-11e9-9789-12627d6fbdd7.JPG" alt="inline"></p><h3 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h3><p><img src="https://user-images.githubusercontent.com/33630505/58416310-1bcae700-80bc-11e9-90c0-54f9ba8cd9aa.JPG" alt="notebook"></p><h2 id="seaborn으로-그래프-이쁘게-그리기"><a href="#seaborn으로-그래프-이쁘게-그리기" class="headerlink" title="seaborn으로 그래프 이쁘게 그리기"></a>seaborn으로 그래프 이쁘게 그리기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.csv'</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">sns.pairplot(data)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58416408-63ea0980-80bc-11e9-818c-93fbe478439e.JPG" alt="seaborn"></p><h2 id="Header-name-바꾸기-전처리-과정중-일부"><a href="#Header-name-바꾸기-전처리-과정중-일부" class="headerlink" title="Header name 바꾸기 (전처리 과정중 일부)"></a>Header name 바꾸기 (전처리 과정중 일부)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.csv'</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">data.rename(&#123;<span class="number">0</span>:<span class="string">'sl'</span>,<span class="number">1</span>:<span class="string">'sw'</span>,<span class="number">2</span>:<span class="string">'pl'</span>,<span class="number">3</span>:<span class="string">'pw'</span>,<span class="string">'class'</span>:<span class="string">'class_'</span>&#125;,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># inplace True하면 자기자신이 바뀜</span></span><br></pre></td></tr></table></figure><h2 id="짝을-이뤄-그래프-그리기"><a href="#짝을-이뤄-그래프-그리기" class="headerlink" title="짝을 이뤄 그래프 그리기"></a>짝을 이뤄 그래프 그리기</h2><blockquote><p>열(column)에 object가 있을 때</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.csv'</span>, engine=<span class="string">'python'</span>)</span><br><span class="line">data.rename(&#123;<span class="number">0</span>:<span class="string">'sl'</span>,<span class="number">1</span>:<span class="string">'sw'</span>,<span class="number">2</span>:<span class="string">'pl'</span>,<span class="number">3</span>:<span class="string">'pw'</span>,<span class="string">'class'</span>:<span class="string">'class_'</span>&#125;,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">sns.pairplot(data,hue=<span class="string">'class_'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58416593-115d1d00-80bd-11e9-8b8a-59429b3f8b51.JPG" alt="hue"></p><h2 id="Tidy-Data"><a href="#Tidy-Data" class="headerlink" title="Tidy Data"></a>Tidy Data</h2><p><kbd>Wide format</kbd> ⇒  <kbd>Long format</kbd></p><blockquote><p>분석하기 좋은 데이터. Tidy data 형태로 만들면 차원도 줄고, 유지보수하기도 좋다</p></blockquote><p><strong>Tidy Data 특징</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 각 변수는 개별의 열(column)로 존재한다</span><br><span class="line">2. 각 관측치는 행(row)으로 구성한다</span><br><span class="line">3. 각 표는 단 하나의 관측기준에 의해서 조작된 데이터를 저장한다</span><br><span class="line">4. 만약 여러개의 표가 존재한다면, 적어도 하나이상의 열이 공유되어야 한다</span><br></pre></td></tr></table></figure><blockquote><p>위 원칙들은 관계형 데이터베이스 원칙과 유사하다</p></blockquote><p>※ 예시</p><p>변수 : 키, 몸무게, 성별 <br><br>값 : 175, 73, 남자 <br><br>관측치 : 사람  (값을 측정한 단위가 되는 기준) <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.csv'</span>)</span><br><span class="line">data.melt([<span class="string">'iso2'</span>,<span class="string">'year'</span>], var_name=<span class="string">'sp'</span>, value_name=<span class="string">'값'</span>).dropna()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58412407-58451580-80b1-11e9-869a-56ce832033bb.JPG" alt="tidy data"></p><p><strong>주의</strong> <br><br>Tidy Data화 하지 않으면 info, describe, 등.. 초기 작업시 엉망으로 값이 나온다</p><br>### 행 뽑기<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tb.loc[<span class="number">5</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58419146-bd563680-80c4-11e9-99e6-fd1fa156b058.JPG" alt="loc"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tb.iloc[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 파이썬 방식</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58419147-bd563680-80c4-11e9-9aeb-d56d82b27083.JPG" alt="iloc"></p><h2 id="상관성-체크하기-correlation"><a href="#상관성-체크하기-correlation" class="headerlink" title="상관성 체크하기  (correlation)"></a>상관성 체크하기  (correlation)</h2><blockquote><p>두 변수간에 어떤 선형적 관계를 갖고 있는지 분석하는 방법이 상관 분석. 그렇다면 상관성 있다는 것은 얼마나 관계가 있는지에 대한 정도라고 볼 수 있다. 만약 상관성이 1에 가깝다면 두 변수는 매우 관련 이 있다. 예를 들어 키가 크면 몸무게가 많이 나가는 것처럼 서로 관계가 가까운것.</p></blockquote><p><strong>양의 상관성</strong>: 기준이되는 변수가 커지면 상대 변수도 같이 커진다 <br><br><strong>음의 상관성</strong>: 기준이되는 변수가 커지면 상대 변수는 작아진다 <br></p><p><span style='color: red'>상관 분석은 왜 하는거야?</span><br><br>데이터 분석시 column이 많아지면 계산이 복잡해지는데 상관관계를 따져 <br><br>상관성이 높은 것들은 분석 데이터에서 제외시켜 계산 복잡도를 크게 줄일 수 있기 때문이다.<br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.txt'</span>)</span><br><span class="line">data.rename(&#123;<span class="number">0</span>:<span class="string">'sl'</span>,<span class="number">1</span>:<span class="string">'sw'</span>,<span class="number">2</span>:<span class="string">'pl'</span>,<span class="number">3</span>:<span class="string">'pw'</span>,<span class="string">'class'</span>:<span class="string">'class_'</span>&#125;,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">data.corr() <span class="comment"># method = &#123;'pearson', 'kendall', 'spearman'&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58418421-a9a9d080-80c2-11e9-9188-af2eb88e45b1.JPG" alt="corr"></p><p><strong>공분산</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.cov()</span><br></pre></td></tr></table></figure><h2 id="문자열에-사용하는-것들"><a href="#문자열에-사용하는-것들" class="headerlink" title="문자열에 사용하는 것들"></a>문자열에 사용하는 것들</h2><h3 id="Series에서-object-문자열-빈도수-체크하기"><a href="#Series에서-object-문자열-빈도수-체크하기" class="headerlink" title="Series에서 object(문자열) 빈도수 체크하기"></a>Series에서 object(문자열) 빈도수 체크하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'file.txt'</span>)</span><br><span class="line">data.rename(&#123;<span class="number">0</span>:<span class="string">'sl'</span>,<span class="number">1</span>:<span class="string">'sw'</span>,<span class="number">2</span>:<span class="string">'pl'</span>,<span class="number">3</span>:<span class="string">'pw'</span>,<span class="string">'4'</span>:<span class="string">'class_'</span>&#125;,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">'class_'</span>].value_counts()</span><br><span class="line"></span><br><span class="line">: Iris-versicolor    <span class="number">50</span></span><br><span class="line">  Iris-setosa        <span class="number">50</span></span><br><span class="line">  Iris-virginica     <span class="number">50</span></span><br><span class="line">  Name: class_, dtype: int64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data[<span class="string">'class_'</span>].value_counts().plot.pie()</span><br><span class="line">data[<span class="string">'class_'</span>].value_counts().plot.bar()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58419044-78320480-80c4-11e9-8ebb-cca88b2feb3b.JPG" alt="pie"><br><img src="https://user-images.githubusercontent.com/33630505/58419048-79fbc800-80c4-11e9-980c-5105d90b2777.JPG" alt="bar"></p><h3 id="nlargest-nsmallest-unique"><a href="#nlargest-nsmallest-unique" class="headerlink" title="nlargest, nsmallest, unique"></a>nlargest, nsmallest, unique</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = data[<span class="string">'class_'</span>].value_counts()</span><br><span class="line"></span><br><span class="line">x.nlargest()</span><br><span class="line">x.nsmallest()</span><br><span class="line">data[<span class="string">'class_'</span>].unique()</span><br><span class="line"></span><br><span class="line">: Iris-versicolor    <span class="number">50</span></span><br><span class="line">  Iris-setosa        <span class="number">50</span></span><br><span class="line">  Iris-virginica     <span class="number">50</span></span><br><span class="line">  Name: class_, dtype: int64</span><br><span class="line"></span><br><span class="line">  Iris-versicolor    <span class="number">50</span></span><br><span class="line">  Iris-setosa        <span class="number">50</span></span><br><span class="line">  Iris-virginica     <span class="number">50</span></span><br><span class="line">  Name: class_, dtype: int64</span><br><span class="line"></span><br><span class="line">  array([<span class="string">'Iris-setosa'</span>, <span class="string">'Iris-versicolor'</span>, <span class="string">'Iris-virginica'</span>], dtype=object)</span><br></pre></td></tr></table></figure><h2 id="기초-통계-분석시-알아두면-좋은-원칙-및-정리"><a href="#기초-통계-분석시-알아두면-좋은-원칙-및-정리" class="headerlink" title="기초 통계 분석시 알아두면 좋은 원칙 및 정리"></a>기초 통계 분석시 알아두면 좋은 원칙 및 정리</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. Occam&#39;s Razor (오캄의 면도날)</span><br><span class="line">- 같은 성능을 보일 때 간단한것을 택한다</span><br><span class="line">2. Curse of dimensionality (차원의 저주)</span><br><span class="line">- 차원이 커지면 커질수록 필요한 데이터의 양이 커져야 한다</span><br><span class="line">3. Law of large numbers (큰 수의 법칙)</span><br><span class="line">- 큰 모집단에서 무작위로 뽑은 표본의 평균이 전체 모집단의 평균과 가까울 가능성이 높다</span><br><span class="line">- 모집단이 커지면 표본평균은 모평균을 더 정확히 추정할 수 있다</span><br><span class="line">4. Central limit theorem (중심 극한 정리)</span><br><span class="line">- 동일한 확률분포를 가진 독립 확률 변수 n개의 평균의 분포는 n이 적당히 크다면 정규분포에 가까워진다는 정리</span><br></pre></td></tr></table></figure><h2 id="Indexing-amp-Slicing-Select-data"><a href="#Indexing-amp-Slicing-Select-data" class="headerlink" title="Indexing &amp; Slicing (Select data)"></a>Indexing &amp; Slicing (Select data)</h2><p>내가 필요한 통계값 구하기 위해</p><h2 id="MultiIndex"><a href="#MultiIndex" class="headerlink" title="MultiIndex"></a>MultiIndex</h2><p><img src="https://user-images.githubusercontent.com/33630505/58419324-440b1380-80c5-11e9-9630-d4f56d60c460.JPG" alt="multiindex"></p><p><strong>Pandas Tip1</strong> 예측 분석을 하려면 문자열을 숫자로 바꿔줘야한다 (Encoding)</p><br><p><strong>예시에 나오는 데이터 출처</strong> : <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/iris/" target="_blank" rel="noopener">archive</a><br></p><p><strong>복습시간</strong> 18시 30분 ~ 21시 / 총 2시간 30분</p><p><a id = '17th'></a></p><h1 id="2019년-5월-28일-화요일-17th"><a href="#2019년-5월-28일-화요일-17th" class="headerlink" title="2019년 5월 28일 화요일 17th"></a>2019년 5월 28일 화요일 17th</h1><h2 id="loc-iloc-lambda"><a href="#loc-iloc-lambda" class="headerlink" title="loc, iloc + lambda"></a>loc, iloc + lambda</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index = list(<span class="string">'abcdef'</span>), columns = list(<span class="string">'ABCD'</span>)</span><br><span class="line">data</span><br><span class="line">:    A            B               C               D</span><br><span class="line">a<span class="number">0.427092</span><span class="number">1.122736</span><span class="number">1.064223</span><span class="number">-0.724660</span></span><br><span class="line">b<span class="number">0.091881</span><span class="number">1.049868</span><span class="number">1.263243</span><span class="number">-0.193525</span></span><br><span class="line">c<span class="number">0.224007</span><span class="number">-1.128729</span><span class="number">-1.261087</span><span class="number">2.461563</span></span><br><span class="line">d<span class="number">-0.859961</span><span class="number">-0.450851</span><span class="number">-0.098474</span><span class="number">0.456542</span></span><br><span class="line">e<span class="number">0.339599</span><span class="number">-0.946570</span><span class="number">0.892721</span><span class="number">-0.331624</span></span><br><span class="line">f<span class="number">1.691290</span><span class="number">-0.565636</span><span class="number">0.905357</span><span class="number">-0.301717</span></span><br><span class="line"></span><br><span class="line">data.loc[<span class="keyword">lambda</span> x: x.B&gt;<span class="number">0</span>, :]</span><br><span class="line">:    A            B               C               D</span><br><span class="line">a<span class="number">0.427092</span><span class="number">1.122736</span><span class="number">1.064223</span><span class="number">-0.724660</span></span><br><span class="line">b<span class="number">0.091881</span><span class="number">1.049868</span><span class="number">1.263243</span><span class="number">-0.193525</span></span><br><span class="line"></span><br><span class="line">data.loc[:, <span class="keyword">lambda</span> x:[<span class="string">'D'</span>,<span class="string">'A'</span>]]</span><br><span class="line">:           D           A</span><br><span class="line">a<span class="number">-0.724660</span><span class="number">0.427092</span></span><br><span class="line">b<span class="number">-0.193525</span><span class="number">0.091881</span></span><br><span class="line">c<span class="number">2.461563</span><span class="number">0.224007</span></span><br><span class="line">d<span class="number">0.456542</span><span class="number">-0.859961</span></span><br><span class="line">e<span class="number">-0.331624</span><span class="number">0.339599</span></span><br><span class="line">f<span class="number">-0.301717</span><span class="number">1.691290</span></span><br><span class="line"></span><br><span class="line">data.iloc[:,<span class="keyword">lambda</span> x:[<span class="number">0</span>,<span class="number">3</span>]]</span><br><span class="line">:           A            D</span><br><span class="line">a<span class="number">0.427092</span><span class="number">-0.724660</span></span><br><span class="line">b<span class="number">0.091881</span><span class="number">-0.193525</span></span><br><span class="line">c<span class="number">0.224007</span><span class="number">2.461563</span></span><br><span class="line">d<span class="number">-0.859961</span><span class="number">0.456542</span></span><br><span class="line">e<span class="number">0.339599</span><span class="number">-0.331624</span></span><br><span class="line">f<span class="number">1.691290</span><span class="number">-0.301717</span></span><br><span class="line"></span><br><span class="line">data[<span class="keyword">lambda</span> x: x.columns[<span class="number">3</span>]]</span><br><span class="line">: a   <span class="number">-0.724660</span></span><br><span class="line">  b   <span class="number">-0.193525</span></span><br><span class="line">  c    <span class="number">2.461563</span></span><br><span class="line">  d    <span class="number">0.456542</span></span><br><span class="line">  e   <span class="number">-0.331624</span></span><br><span class="line">  f   <span class="number">-0.301717</span></span><br><span class="line">Name: D, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="columns"><a href="#columns" class="headerlink" title="columns"></a>columns</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">tips</span><br><span class="line">:    total_bill tip sex   smokerdaytime size</span><br><span class="line"><span class="number">0</span><span class="number">16.99</span><span class="number">1.01</span>Female NoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">1</span><span class="number">10.34</span><span class="number">1.66</span>Male NoSunDinner  <span class="number">3</span></span><br><span class="line"><span class="number">2</span><span class="number">21.01</span><span class="number">3.50</span>Male NoSunDinner  <span class="number">3</span></span><br><span class="line"><span class="number">3</span><span class="number">23.68</span><span class="number">3.31</span>Male NoSunDinner  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">tips.melt(tips.columns[:<span class="number">3</span>])    <span class="comment">#  열만 따로 뽑기</span></span><br><span class="line">:    total_bill tipsexvariable   value</span><br><span class="line"><span class="number">0</span><span class="number">16.99</span><span class="number">1.01</span>Femalesmoker     No</span><br><span class="line"><span class="number">1</span><span class="number">10.34</span><span class="number">1.66</span>Malesmoker     No</span><br><span class="line"><span class="number">2</span><span class="number">21.01</span><span class="number">3.50</span>Malesmoker     No</span><br><span class="line"><span class="number">3</span><span class="number">23.68</span><span class="number">3.31</span>Malesmoker     No</span><br></pre></td></tr></table></figure><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">'billboard.csv'</span>,engine=<span class="string">'python'</span>)</span><br><span class="line">data.melt(data.columns[:<span class="number">7</span>]).set_index(<span class="string">'genre'</span>).loc[<span class="string">'Rock'</span>]</span><br><span class="line"></span><br><span class="line">: yearartist.inverted     track     time    date.entered       date.peaked    variable        value</span><br><span class="line">genre</span><br><span class="line">Rock<span class="number">2000</span>Destiny<span class="string">'s Child Independent         3:38            2000-09-23         2000-11-18    x1st.week      78.0</span></span><br><span class="line"><span class="string">                                  Women Part I                                </span></span><br><span class="line"><span class="string">Rock2000  Santana Maria, Maria     4:18     2000-02-12        2000-04-08    x1st.week     15.0</span></span><br><span class="line"><span class="string">Rock2000Savage GardenI Knew I Loved You   4:07     1999-10-23        2000-01-29    x1st.week     71.0</span></span><br><span class="line"><span class="string">Rock2000Madonna             Music     3:45     2000-08-12        2000-09-16    x1st.week     41.0</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h2 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection"></a>Intersection</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">a.intersection(b)</span><br><span class="line">: &#123;<span class="number">3</span>&#125;</span><br><span class="line">a.intersection([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">: &#123;<span class="number">3</span>&#125;</span><br><span class="line">a.intersection(range(<span class="number">3</span>))</span><br><span class="line">:&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="새로운-연산자-만들기"><a href="#새로운-연산자-만들기" class="headerlink" title="새로운 연산자 만들기"></a>새로운 연산자 만들기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span><span class="params">(int)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">print(<span class="string">'안더해줌'</span>)</span><br><span class="line"></span><br><span class="line">x(<span class="number">3</span>) + x(<span class="number">4</span>)</span><br><span class="line">: 안더해줌</span><br></pre></td></tr></table></figure><h2 id="isin-predicate"><a href="#isin-predicate" class="headerlink" title="isin (predicate)"></a>isin (predicate)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.arange(<span class="number">5</span>), index=np.arange(<span class="number">5</span>)[::<span class="number">-1</span>], dtype=<span class="string">'int64'</span>)</span><br><span class="line"></span><br><span class="line">s.isin([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line">: <span class="number">4</span>    <span class="literal">False</span></span><br><span class="line">  <span class="number">3</span>    <span class="literal">False</span></span><br><span class="line">  <span class="number">2</span>     <span class="literal">True</span></span><br><span class="line">  <span class="number">1</span>    <span class="literal">False</span></span><br><span class="line">  <span class="number">0</span>     <span class="literal">True</span></span><br><span class="line">  dtype: bool</span><br><span class="line"></span><br><span class="line">s[s.isin([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])]  </span><br><span class="line">: <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">0</span>    <span class="number">4</span></span><br><span class="line">  dtype: int64</span><br></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><h2 id="split-strip"><a href="#split-strip" class="headerlink" title="split, strip"></a>split, strip</h2><p><strong>복습시간</strong> 12시 ~ 1시 30분 / 총 1시간 30분</p><p><a id = '18th'></a></p><h1 id="2019년-5월-30일-목요일-18th"><a href="#2019년-5월-30일-목요일-18th" class="headerlink" title="2019년 5월 30일 목요일 18th"></a>2019년 5월 30일 목요일 18th</h1><h2 id="기초통계-분석시-그래프-그리는-3가지"><a href="#기초통계-분석시-그래프-그리는-3가지" class="headerlink" title="기초통계 분석시 그래프 그리는 3가지"></a>기초통계 분석시 그래프 그리는 3가지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. boxplot</span><br><span class="line">2. pairplot</span><br><span class="line">3. heatmap</span><br></pre></td></tr></table></figure><h3 id="boxplot"><a href="#boxplot" class="headerlink" title="boxplot"></a>boxplot</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">tips.boxplot()  <span class="comment"># tips Dataframe의 attribute로 내장하고 있음</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pd.plotting.boxplot(tips)</span><br></pre></td></tr></table></figure><h3 id="pairplot"><a href="#pairplot" class="headerlink" title="pairplot"></a>pairplot</h3><blockquote><p>짝을 이뤄 그리는 그래프</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">sns.pairplot(tips)  <span class="comment"># tips Dataframe의 attribute로 내장하고 있지 않다</span></span><br><span class="line">sns.pairplot(tips, hue=<span class="string">'sex'</span>)</span><br></pre></td></tr></table></figure><h3 id="heatmap"><a href="#heatmap" class="headerlink" title="heatmap"></a>heatmap</h3><blockquote><p>상관 분석시 그리는 그래프</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">sns.heatmap(tips.corr())</span><br><span class="line">sns.heatmap(tips.corr(), cbar = <span class="literal">False</span>, annot = <span class="literal">True</span>) <span class="comment"># 오른쪽 사이드바 제거, 평면에 상관계수 표시</span></span><br></pre></td></tr></table></figure><h2 id="Dataframe은-Iterator-Generator-처럼-next연산을-할-수-있다"><a href="#Dataframe은-Iterator-Generator-처럼-next연산을-할-수-있다" class="headerlink" title="Dataframe은 Iterator/Generator 처럼 next연산을 할 수 있다"></a>Dataframe은 Iterator/Generator 처럼 next연산을 할 수 있다</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">x = tips.items() <span class="comment"># or x = tips.iteritems()</span></span><br><span class="line">y = tips.iterrows()</span><br><span class="line">type(x)</span><br><span class="line">type(y)</span><br><span class="line">next(x)</span><br><span class="line">next(y)</span><br><span class="line">: generator</span><br><span class="line">  generator</span><br><span class="line">  (<span class="string">'total_bill'</span>,</span><br><span class="line">   <span class="number">0</span>      <span class="number">16.99</span></span><br><span class="line">   <span class="number">1</span>      <span class="number">10.34</span></span><br><span class="line">   <span class="number">2</span>      <span class="number">21.01</span></span><br><span class="line">   <span class="number">3</span>      <span class="number">23.68</span></span><br><span class="line">   <span class="number">4</span>      <span class="number">24.59</span></span><br><span class="line">   <span class="number">5</span>      <span class="number">25.29</span></span><br><span class="line">   (<span class="number">0</span>, total_bill     <span class="number">16.99</span></span><br><span class="line">   tip             <span class="number">1.01</span></span><br><span class="line">   sex           Female</span><br><span class="line">   smoker            No</span><br><span class="line">   day              Sun</span><br><span class="line">   time          Dinner</span><br><span class="line">   size               <span class="number">2</span></span><br><span class="line">   Name: <span class="number">0</span>, dtype: object)</span><br></pre></td></tr></table></figure><h2 id="Pandas-data-type-종류"><a href="#Pandas-data-type-종류" class="headerlink" title="Pandas data type 종류"></a>Pandas data type 종류</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 숫자      &#x3D;&gt; int64, float64</span><br><span class="line">2. 문자      &#x3D;&gt; object, category</span><br><span class="line">3. 시간&#x2F;날짜</span><br></pre></td></tr></table></figure><p><strong>Dask</strong>는 메모리의 제한으로 dataframe을 만들 수 없는 경우 도움을 줄 수 있는 패키지 이다. 파이썬으로 작성한 작업을 병렬화 할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">!dir</span><br><span class="line"></span><br><span class="line">: <span class="number">2019</span><span class="number">-05</span><span class="number">-25</span>  오후 <span class="number">10</span>:<span class="number">01</span>             <span class="number">4</span>,<span class="number">173</span> pandas.ipynb</span><br><span class="line">  <span class="number">2019</span><span class="number">-05</span><span class="number">-25</span>  오후 <span class="number">08</span>:<span class="number">49</span>           <span class="number">139</span>,<span class="number">785</span> pandas2.ipynb</span><br><span class="line">  <span class="number">2019</span><span class="number">-05</span><span class="number">-26</span>  오후 <span class="number">02</span>:<span class="number">51</span>           <span class="number">220</span>,<span class="number">247</span> pandas3.ipynb</span><br><span class="line">  <span class="number">2019</span><span class="number">-05</span><span class="number">-27</span>  오후 <span class="number">09</span>:<span class="number">18</span>           <span class="number">749</span>,<span class="number">763</span> pandas4.ipynb</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="comment"># 오늘 받은 패키지</span></span><br><span class="line"></span><br><span class="line">!pip install vincent</span><br><span class="line">!pip install -q pdvega <span class="comment"># -q 옵션은 설치시 나오는 메시지 생략</span></span><br><span class="line">                       <span class="comment"># -U 옵션은 최신 버전이 아닐 경우 업데이트</span></span><br></pre></td></tr></table></figure><p><strong>Jupyter Tip1</strong> jupyter에서 !(느낌표) 뒤에 cmd에서 작동하는 명령어를 치면 작동한다</p><br><p><strong>pdvega</strong> <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdvega</span><br><span class="line"></span><br><span class="line">s = tips.groupby(<span class="string">'smoker'</span>)</span><br><span class="line">s.vgplot.bar()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58626155-11545b80-830f-11e9-8744-da3eb42a2161.JPG" alt="vgplot"></p><h2 id="Aggregation-analysis-집합-분석"><a href="#Aggregation-analysis-집합-분석" class="headerlink" title="Aggregation analysis (집합 분석)"></a>Aggregation analysis (집합 분석)</h2><h3 id="Groupby의-내부적-구현-순서"><a href="#Groupby의-내부적-구현-순서" class="headerlink" title="Groupby의 내부적 구현 순서"></a>Groupby의 내부적 구현 순서</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. iterrow 순회</span><br><span class="line">2. split        &#x3D;&gt; groupby</span><br><span class="line">3. apply        &#x3D;&gt; mean, max ... (통계적으로 대표할 수 있는 값 설정)</span><br><span class="line">4. combine      &#x3D;&gt; 결과 묶기</span><br></pre></td></tr></table></figure><h2 id="Group-3총사"><a href="#Group-3총사" class="headerlink" title="Group 3총사"></a>Group 3총사</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. groupby</span><br><span class="line">2. pivot table</span><br><span class="line">3. crosstab (pd로 접근)</span><br></pre></td></tr></table></figure><h3 id="2-pivot-table"><a href="#2-pivot-table" class="headerlink" title="2. pivot table"></a>2. pivot table</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">tips.pivot_table(index=<span class="string">'smoker'</span>, columns = <span class="string">'sex'</span>, aggfunc = np.sum, margins = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># margin은 부분합을 보여줌</span></span><br><span class="line"></span><br><span class="line">:  size                tip                total_bill</span><br><span class="line">sexMaleFemaleAllMaleFemaleAllMaleFemaleAll</span><br><span class="line">smoker</span><br><span class="line">Yes<span class="number">150</span><span class="number">74</span><span class="number">224</span><span class="number">183.07</span><span class="number">96.74</span><span class="number">279.81</span><span class="number">1337.07</span><span class="number">593.27</span><span class="number">1930.34</span></span><br><span class="line">No<span class="number">263</span><span class="number">140</span><span class="number">403</span><span class="number">302.00</span><span class="number">149.77</span><span class="number">451.77</span><span class="number">1919.75</span><span class="number">977.68</span><span class="number">2897.43</span></span><br><span class="line">All<span class="number">413</span><span class="number">214</span><span class="number">627</span><span class="number">485.07</span><span class="number">246.51</span><span class="number">731.58</span><span class="number">3256.82</span><span class="number">1570.95</span><span class="number">4827.77</span></span><br></pre></td></tr></table></figure><h3 id="3-crosstab"><a href="#3-crosstab" class="headerlink" title="3. crosstab"></a>3. crosstab</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">a = pd.crosstab(tips.smoker, tips.sex, tips.tip, aggfunc = np.max)</span><br><span class="line">a.index</span><br><span class="line"></span><br><span class="line"><span class="comment"># smoker가 index, sex가 column, tip이 value, aggfunc는 value의 대푯값</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">sexMaleFemale</span><br><span class="line">smoker</span><br><span class="line">Yes<span class="number">10.0</span><span class="number">6.5</span></span><br><span class="line">No<span class="number">9.0</span><span class="number">5.2</span></span><br><span class="line"></span><br><span class="line">CategoricalIndex([<span class="string">'Yes'</span>, <span class="string">'No'</span>], categories=[<span class="string">'Yes'</span>, <span class="string">'No'</span>], ordered=<span class="literal">False</span>, name=<span class="string">'smoker'</span>, dtype=<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line">b = pd.crosstab(tips.smoker,[tips.sex,tips.time],tips.tip,aggfunc=np.max)</span><br><span class="line">b.index</span><br><span class="line"><span class="comment"># multi columns</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">sexMale        Female</span><br><span class="line">timeLunchDinnerLunchDinner</span><br><span class="line">smoker</span><br><span class="line">Yes<span class="number">5.0</span><span class="number">10.0</span><span class="number">5.00</span><span class="number">6.5</span></span><br><span class="line">No<span class="number">6.7</span><span class="number">9.0</span><span class="number">5.17</span><span class="number">5.2</span></span><br><span class="line"></span><br><span class="line">CategoricalIndex([<span class="string">'Yes'</span>, <span class="string">'No'</span>], categories=[<span class="string">'Yes'</span>, <span class="string">'No'</span>], ordered=<span class="literal">False</span>, name=<span class="string">'smoker'</span>, dtype=<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line">c = pd.crosstab([tips.smoker,tips.sex],tips.time,tips.tip,aggfunc=np.max)</span><br><span class="line">c.index</span><br><span class="line"></span><br><span class="line">: multi index</span><br><span class="line">        timeLunchDinner</span><br><span class="line">smokersex</span><br><span class="line">YesMale<span class="number">5.00</span><span class="number">10.0</span></span><br><span class="line">        Female<span class="number">5.00</span><span class="number">6.5</span></span><br><span class="line">NoMale<span class="number">6.70</span><span class="number">9.0</span></span><br><span class="line">        Female<span class="number">5.17</span><span class="number">5.2</span></span><br><span class="line"></span><br><span class="line">MultiIndex(levels=[[<span class="string">'Yes'</span>, <span class="string">'No'</span>], [<span class="string">'Male'</span>, <span class="string">'Female'</span>]],</span><br><span class="line">           codes=[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]],</span><br><span class="line">           names=[<span class="string">'smoker'</span>, <span class="string">'sex'</span>])</span><br><span class="line"></span><br><span class="line">d = pd.crosstab([tips.smoker,tips.sex],tips.time,tips.tip,aggfunc=np.max).index</span><br><span class="line">d.labels <span class="comment"># or d.codes</span></span><br><span class="line"></span><br><span class="line">: FrozenList([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sequnce 방식</span></span><br><span class="line">x.codes</span><br><span class="line">: FrozenList([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">x.labels[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># attribute 방식</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">n = namedtuple(<span class="string">'Jung'</span>, [<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">a = n(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">a</span><br><span class="line">: Jung(x=<span class="number">1</span>, y=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">a.x</span><br><span class="line">a.y</span><br><span class="line">: <span class="number">1</span></span><br><span class="line">  <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>Pandas Tip1</strong> 데이터 형태가 []를 포함하면 sequence 방식 , xx = yy 가 있으면 attribute 방식</p><h2 id="reindex-amp-resetindex"><a href="#reindex-amp-resetindex" class="headerlink" title="reindex &amp; resetindex"></a>reindex &amp; resetindex</h2><blockquote><p>reindex는 수동으로 index변경, resetindex는 0부터 자동으로 index 변경</p></blockquote><h3 id="resetindex"><a href="#resetindex" class="headerlink" title="resetindex"></a>resetindex</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line">n = tips[tips.sex == <span class="string">'Male'</span>].loc[:<span class="number">15</span>] <span class="comment"># 맨처음 index부터 15 index까지 행 뽑기</span></span><br><span class="line">n.reset_index(drop=<span class="literal">True</span>)  <span class="comment"># 기존 index 버리고 0부터 새로 생성</span></span><br><span class="line"></span><br><span class="line">: total_billtipsexsmokerdaytimesize</span><br><span class="line"><span class="number">0</span>  <span class="number">10.34</span>        <span class="number">1.66</span>MaleNoSunDinner  <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">21.01</span>        <span class="number">3.50</span>MaleNoSunDinner  <span class="number">3</span></span><br><span class="line"><span class="number">2</span>  <span class="number">23.68</span>        <span class="number">3.31</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">25.29</span>        <span class="number">4.71</span>MaleNoSunDinner  <span class="number">4</span></span><br><span class="line"><span class="number">4</span>  <span class="number">8.77</span>        <span class="number">2.00</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">5</span>  <span class="number">26.88</span>        <span class="number">3.12</span>MaleNoSunDinner  <span class="number">4</span></span><br><span class="line"><span class="number">6</span>  <span class="number">15.04</span>        <span class="number">1.96</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">7</span>  <span class="number">14.78</span>        <span class="number">3.23</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">8</span>  <span class="number">10.27</span>        <span class="number">1.71</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">9</span>  <span class="number">15.42</span>        <span class="number">1.57</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">10</span>  <span class="number">18.43</span>        <span class="number">3.00</span>MaleNoSunDinner  <span class="number">4</span></span><br><span class="line"><span class="number">11</span>  <span class="number">21.58</span>        <span class="number">3.92</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">n.reset_index() <span class="comment"># 기존의 index 삭제 X</span></span><br><span class="line"></span><br><span class="line">:     indextotal_billtipsexsmokerdaytimesize</span><br><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">10.34</span>        <span class="number">1.66</span>MaleNoSunDinner  <span class="number">3</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">21.01</span>        <span class="number">3.50</span>MaleNoSunDinner  <span class="number">3</span></span><br><span class="line"><span class="number">2</span><span class="number">3</span><span class="number">23.68</span>        <span class="number">3.31</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">3</span><span class="number">5</span><span class="number">25.29</span>        <span class="number">4.71</span>MaleNoSunDinner  <span class="number">4</span></span><br><span class="line"><span class="number">4</span><span class="number">6</span><span class="number">8.77</span>        <span class="number">2.00</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">5</span><span class="number">7</span><span class="number">26.88</span>        <span class="number">3.12</span>MaleNoSunDinner  <span class="number">4</span></span><br><span class="line"><span class="number">6</span><span class="number">8</span><span class="number">15.04</span>        <span class="number">1.96</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">7</span><span class="number">9</span><span class="number">14.78</span>        <span class="number">3.23</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">8</span><span class="number">10</span><span class="number">10.27</span>        <span class="number">1.71</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">9</span><span class="number">12</span><span class="number">15.42</span>        <span class="number">1.57</span>MaleNoSunDinner  <span class="number">2</span></span><br><span class="line"><span class="number">10</span><span class="number">13</span><span class="number">18.43</span>        <span class="number">3.00</span>MaleNoSunDinner  <span class="number">4</span></span><br><span class="line"><span class="number">11</span><span class="number">15</span><span class="number">21.58</span>        <span class="number">3.92</span>MaleNoSunDinner  <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="행-열-위치-변환하기"><a href="#행-열-위치-변환하기" class="headerlink" title="행, 열 위치 변환하기"></a>행, 열 위치 변환하기</h2><h3 id="기준-데이터"><a href="#기준-데이터" class="headerlink" title="기준 데이터"></a>기준 데이터</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'sex'</span>,<span class="string">'smoker'</span>]).mean()[[<span class="string">'tip'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tip</span><br><span class="line">sexsmoker</span><br><span class="line">MaleYes<span class="number">3.051167</span></span><br><span class="line">        No<span class="number">3.113402</span></span><br><span class="line">FemaleYes<span class="number">2.931515</span></span><br><span class="line">        No<span class="number">2.773519</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'sex'</span>,<span class="string">'smoker'</span>]).mean()[[<span class="string">'tip'</span>]].stack()</span><br><span class="line"></span><br><span class="line">sex     smoker     </span><br><span class="line">Male    Yes     tip    <span class="number">3.051167</span></span><br><span class="line">        No      tip    <span class="number">3.113402</span></span><br><span class="line">Female  Yes     tip    <span class="number">2.931515</span></span><br><span class="line">        No      tip    <span class="number">2.773519</span></span><br><span class="line"></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="comment"># 1차원으로 바뀜</span></span><br></pre></td></tr></table></figure><h3 id="unstack"><a href="#unstack" class="headerlink" title="unstack"></a>unstack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'sex'</span>,<span class="string">'smoker'</span>]).mean()[[<span class="string">'tip'</span>]].unstack()</span><br><span class="line"></span><br><span class="line">tip</span><br><span class="line">smokerYes        No</span><br><span class="line">sex</span><br><span class="line">Male<span class="number">3.051167</span><span class="number">3.113402</span></span><br><span class="line">Female<span class="number">2.931515</span><span class="number">2.773519</span></span><br></pre></td></tr></table></figure><h3 id="Column이-2개-이상일-때-그래프"><a href="#Column이-2개-이상일-때-그래프" class="headerlink" title="Column이 2개 이상일 때 그래프"></a>Column이 2개 이상일 때 그래프</h3><h4 id="Stacked-True-Column값을-쌓는다"><a href="#Stacked-True-Column값을-쌓는다" class="headerlink" title="Stacked = True (Column값을 쌓는다)"></a>Stacked = True (Column값을 쌓는다)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()[[<span class="string">'tip'</span>]].unstack().plot.bar(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58628687-5f6c5d80-8315-11e9-9c14-5bc64e11af28.JPG" alt="stacked_True"></p><h4 id="unstack-0-index와-열의-조합"><a href="#unstack-0-index와-열의-조합" class="headerlink" title="unstack(0) (index와 열의 조합)"></a>unstack(0) (index와 열의 조합)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()[[<span class="string">'tip'</span>,<span class="string">'total_bill'</span>]].unstack(<span class="number">0</span>).plot.bar(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58629825-79f40600-8318-11e9-9a54-a760d7049719.JPG" alt="zero"></p><h4 id="Stacked-False-Column값을-쌓지-않는다"><a href="#Stacked-False-Column값을-쌓지-않는다" class="headerlink" title="Stacked = False (Column값을 쌓지 않는다)"></a>Stacked = False (Column값을 쌓지 않는다)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()[[<span class="string">'tip'</span>]].unstack().plot.bar(stacked=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58628716-714e0080-8315-11e9-812d-006a2a4efea9.JPG" alt="stacked_False"></p><h4 id="unstack-1-header와-열의-조합"><a href="#unstack-1-header와-열의-조합" class="headerlink" title="unstack(1) (header와 열의 조합)"></a>unstack(1) (header와 열의 조합)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()[[<span class="string">'tip'</span>,<span class="string">'total_bill'</span>]].unstack(<span class="number">1</span>).plot.bar(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58629826-79f40600-8318-11e9-81a2-e408173faa35.JPG" alt="one"></p><p><strong>sci</strong> Stack은 Column을 Index로 바꿔주고, Unstack은 Index를 Column으로 바꿔준다</p><p><strong>복습시간</strong> 18시 13분 ~ 20시 21분/ 총 2시간 8분</p><p><a id = '19th'></a></p><h1 id="2019년-5월-30일-금요일-19th"><a href="#2019년-5월-30일-금요일-19th" class="headerlink" title="2019년 5월 30일 금요일 19th"></a>2019년 5월 30일 금요일 19th</h1><h2 id="Data-Visualization"><a href="#Data-Visualization" class="headerlink" title="Data Visualization"></a>Data Visualization</h2><blockquote><p>문자나, 숫자 보다 그림으로 혹은 그래프로 시각적인 정보가 사람에게는 더 명확하고 효율적으로 전달 되기 때문에 데이터 분석 결과를 시각화 할 수 있어야 한다</p></blockquote><h3 id="시각화-라이브러리"><a href="#시각화-라이브러리" class="headerlink" title="시각화 라이브러리"></a>시각화 라이브러리</h3><p><img src="https://user-images.githubusercontent.com/33630505/58707963-5ea8f980-83f1-11e9-8a8e-33d77621fc9d.JPG" alt="lib"></p><h3 id="Python-시각화-라이브러리-분류"><a href="#Python-시각화-라이브러리-분류" class="headerlink" title="Python 시각화 라이브러리 분류"></a>Python 시각화 라이브러리 분류</h3><p><img src="https://user-images.githubusercontent.com/33630505/58707964-6072bd00-83f1-11e9-99ab-3f366ebac47e.JPG" alt="pylib"></p><blockquote><p>Costumize하려면 Matplotlib을 사용해야 한다</p></blockquote><p><strong>matplotlib, seaborn</strong> matplotlib는 python, numpy format으로 데이터를 처리하고 seaborn은 pandas format으로 데이터를 처리한다. .value는 pandas 데이터 형태를 numpy format으로 바꿔준다</p><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><ol><li>pyplot</li><li>pylab</li></ol><blockquote><p>이제 pylab은 쓰지 않는다</p></blockquote><h3 id="구성요소"><a href="#구성요소" class="headerlink" title="구성요소"></a>구성요소</h3><p><img src="https://user-images.githubusercontent.com/33630505/58708062-ab8cd000-83f1-11e9-842e-c69ea2654837.JPG" alt="structure"></p><p><img src="https://user-images.githubusercontent.com/33630505/58708348-8187dd80-83f2-11e9-96df-29952d1ff993.JPG" alt="graph"></p><h3 id="그래프-커스터마이징-하기"><a href="#그래프-커스터마이징-하기" class="headerlink" title="그래프 커스터마이징 하기"></a>그래프 커스터마이징 하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas, figure, axes는 생략하면 자동으로 생성해서 그래프를 그려준다</span></span><br><span class="line"><span class="comment"># 단 생략하지 않으면 커스텀 할 수 있다</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>), facecolor=<span class="string">'yellow'</span>)    </span><br><span class="line">plt.axes(xlim=(<span class="number">0</span>,<span class="number">10</span>),ylim=(<span class="number">0</span>,<span class="number">10</span>))  <span class="comment"># xlim,ylim은 최대 범위를 지정</span></span><br><span class="line">plt.title(<span class="string">'Title'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Time'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Rate'</span>)</span><br><span class="line">plt.grid(axis=<span class="string">'y'</span>)</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>], color=<span class="string">'black'</span>, marker=<span class="string">'o'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58708975-117a5700-83f4-11e9-9978-19420df353c3.JPG" alt="plotgraph"></p><h3 id="matplotlib에서-제공해주는-스타일"><a href="#matplotlib에서-제공해주는-스타일" class="headerlink" title="matplotlib에서 제공해주는 스타일"></a>matplotlib에서 제공해주는 스타일</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">plt.style.available</span><br><span class="line"></span><br><span class="line">[<span class="string">'bmh'</span>,</span><br><span class="line"> <span class="string">'classic'</span>,</span><br><span class="line"> <span class="string">'dark_background'</span>,</span><br><span class="line"> <span class="string">'fast'</span>,</span><br><span class="line"> <span class="string">'fivethirtyeight'</span>,</span><br><span class="line"> <span class="string">'ggplot'</span>,</span><br><span class="line"> <span class="string">'grayscale'</span>,</span><br><span class="line"> <span class="string">'seaborn-bright'</span>,</span><br><span class="line"> <span class="string">'seaborn-colorblind'</span>,</span><br><span class="line"> <span class="string">'seaborn-dark-palette'</span>,</span><br><span class="line"> <span class="string">'seaborn-dark'</span>,</span><br><span class="line"> <span class="string">'seaborn-darkgrid'</span>,</span><br><span class="line"> <span class="string">'seaborn-deep'</span>,</span><br><span class="line"> <span class="string">'seaborn-muted'</span>,</span><br><span class="line"> <span class="string">'seaborn-notebook'</span>,</span><br><span class="line"> <span class="string">'seaborn-paper'</span>,</span><br><span class="line"> <span class="string">'seaborn-pastel'</span>,</span><br><span class="line"> <span class="string">'seaborn-poster'</span>,</span><br><span class="line"> <span class="string">'seaborn-talk'</span>,</span><br><span class="line"> <span class="string">'seaborn-ticks'</span>,</span><br><span class="line"> <span class="string">'seaborn-white'</span>,</span><br><span class="line"> <span class="string">'seaborn-whitegrid'</span>,</span><br><span class="line"> <span class="string">'seaborn'</span>,</span><br><span class="line"> <span class="string">'Solarize_Light2'</span>,</span><br><span class="line"> <span class="string">'tableau-colorblind10'</span>,</span><br><span class="line"> <span class="string">'_classic_test'</span>]</span><br></pre></td></tr></table></figure><p><strong>예시</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line">plt.style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">sns.pairplot(iris, hue=<span class="string">'species'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58709958-366fc980-83f6-11e9-8d80-2c457a90c1fb.JPG" alt="ggplot"></p><p><strong>복습시간</strong> 22시 ~ 22시 40분 / 총 40분</p><p><a id = '20th'></a></p><h1 id="2019년-6월-3일-월요일-20th"><a href="#2019년-6월-3일-월요일-20th" class="headerlink" title="2019년 6월 3일 월요일 20th"></a>2019년 6월 3일 월요일 20th</h1><h2 id="Folium"><a href="#Folium" class="headerlink" title="Folium"></a>Folium</h2><blockquote><p>지도 그리는 python 패키지 또는 라이브러리. 분석에 필요한 단계구분도를 하기 위해서 사용한다.<br>Google map에서 갖고옴.</p></blockquote><h3 id="Folium-설치"><a href="#Folium-설치" class="headerlink" title="Folium 설치"></a>Folium 설치</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install folium</span><br></pre></td></tr></table></figure><h3 id="Folium-Map"><a href="#Folium-Map" class="headerlink" title="Folium Map"></a>Folium Map</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"></span><br><span class="line">mymap = folium.Map(location=[<span class="number">37.332268</span>, <span class="number">127.180961</span>], zoom_start = <span class="number">11</span>, tiles=<span class="string">'Stamen Toner'</span>)</span><br><span class="line">folium.Marker([<span class="number">37.332268</span>, <span class="number">127.180961</span>], popup=<span class="string">'&lt;i&gt;Ji hyeok home&lt;/i&gt;'</span>,</span><br><span class="line">icon=folium.Icon(icon=<span class="string">'cloud'</span>)).add_to(mymap)</span><br><span class="line">folium.Marker([<span class="number">37.543148</span>,<span class="number">126.949866</span>], popup=<span class="string">'&lt;b&gt;My location&lt;/b&gt;'</span>).add_to(mymap)</span><br><span class="line"></span><br><span class="line">folium.CircleMarker(</span><br><span class="line">location=[<span class="number">37.332268</span>, <span class="number">127.180961</span>],</span><br><span class="line">radius=<span class="number">80</span>,</span><br><span class="line">popup=<span class="string">'My area'</span>,</span><br><span class="line">color=<span class="string">'#3186cc'</span>,</span><br><span class="line">fill=<span class="literal">True</span>,</span><br><span class="line">fill_color=<span class="string">'#3186cc'</span>   </span><br><span class="line">).add_to(mymap)</span><br><span class="line"></span><br><span class="line">mymap.add_child(folium.LatLngPopup()) <span class="comment"># 지도위 클릭시 위도, 경도 보여줌</span></span><br><span class="line">mymap.add_child(folium.ClickForMarker(popup=<span class="string">"ClickPoint"</span>)) <span class="comment"># 지도위 클릭시 클릭위치에 표시됨</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58799253-cce2fb80-863f-11e9-8f2a-fac434b50f71.JPG" alt="map"></p><h2 id="file-불러오기"><a href="#file-불러오기" class="headerlink" title="file 불러오기"></a>file 불러오기</h2><p>보통 pandas로 파일을 불러오지만<br><br>파일 구성이 복잡하여 불러오지 못하는 파일은 open으로 불러와야 한다<br><br>open으로 불러온 데이터는 text(객체의 의미를 갖지 못함)형태로 불러오고 <br><br>이 text를 csv나 json형태로 불러와 의미 부여해줘야 한다 (csv, json만 가능) <br><br>나머지는 pickle로?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'seoul_municipalities_geo_simple.json'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    x = json.load(f)</span><br><span class="line"></span><br><span class="line">pprint(x)</span><br><span class="line">len(x)</span><br><span class="line">len(x[<span class="string">'features'</span>])</span><br><span class="line">x[<span class="string">'features'</span>][<span class="number">0</span>][<span class="string">'properties'</span>][<span class="string">'name'</span>]</span><br><span class="line">x[<span class="string">'features'</span>][<span class="number">0</span>][<span class="string">'geometry'</span>][<span class="string">'type'</span>]</span><br><span class="line">: &#123;<span class="string">'features'</span>: [&#123;<span class="string">'geometry'</span>: &#123;<span class="string">'coordinates'</span>: [[[<span class="number">127.11519584981606</span>,</span><br><span class="line">                                              <span class="number">37.557533180704915</span>],</span><br><span class="line">                                             [<span class="number">127.11879551821994</span>,</span><br><span class="line">                                              <span class="number">37.557222485451305</span>],</span><br><span class="line">                                             [<span class="number">127.12146867175024</span>,</span><br><span class="line">                                              <span class="number">37.55986003393365</span>],</span><br><span class="line">                                             [<span class="number">127.12435254630417</span>,</span><br><span class="line">                                              <span class="number">37.56144246249796</span>]</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  <span class="number">25</span></span><br><span class="line">  <span class="string">'강동구'</span></span><br><span class="line">  <span class="string">'Polygon'</span></span><br></pre></td></tr></table></figure><h2 id="단계구분도"><a href="#단계구분도" class="headerlink" title="단계구분도"></a>단계구분도</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json, folium</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">seoul_geo_json = open(<span class="string">'seoul_municipalities_geo_simple.json'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">seoul_geo_json = json.load(seoul_geo_json)</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame.from_dict(seoul_geo_json[<span class="string">'features'</span>]).properties</span><br><span class="line"></span><br><span class="line">keys = data[<span class="number">0</span>].keys()</span><br><span class="line"></span><br><span class="line">data_list = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">    temp_list = []</span><br><span class="line">    <span class="keyword">for</span> inst <span class="keyword">in</span> data:</span><br><span class="line">        temp_list.append(inst[key])</span><br><span class="line">    data_list[key] = temp_list</span><br><span class="line"></span><br><span class="line">seoul_df = pd.DataFrame.from_dict(data_list)    </span><br><span class="line">seoul_df.to_csv(<span class="string">'seoul_map.csv'</span>)</span><br><span class="line"></span><br><span class="line">seoul = folium.Map(location=[<span class="number">37.5665</span>, <span class="number">126.9780</span>], tiles=<span class="string">'Mapbox Bright'</span>)</span><br><span class="line">seoul_geo_df = pd.read_csv(<span class="string">'seoul_map.csv'</span>)</span><br><span class="line">seoul.choropleth(</span><br><span class="line">    geo_data=seoul_geo_json, <span class="comment"># json</span></span><br><span class="line">    name=<span class="string">'choropleth'</span>,</span><br><span class="line">    data=seoul_geo_df,  <span class="comment"># pandas</span></span><br><span class="line">    columns=[<span class="string">'name'</span>, <span class="string">'code'</span>],</span><br><span class="line">    key_on=<span class="string">'feature.properties.name'</span>, <span class="comment"># geo data와 pandas data 맞춰준다?</span></span><br><span class="line">    fill_color=<span class="string">'YlGn'</span>,</span><br><span class="line">    fill_opacity=<span class="number">0.7</span>,</span><br><span class="line">    line_opacity=<span class="number">0.2</span>,</span><br><span class="line">    legend_name=<span class="string">'population'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">seoul</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/58800748-9f984c80-8643-11e9-80aa-83ede9c45b0b.JPG" alt="seoul"></p><h2 id="map-사용하여-특정-열-값-뽑아내기"><a href="#map-사용하여-특정-열-값-뽑아내기" class="headerlink" title="map 사용하여 특정 열 값 뽑아내기"></a>map 사용하여 특정 열 값 뽑아내기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">seoul_geo_json = open(<span class="string">'seoul_municipalities_geo_simple.json'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">seoul_geo_json = json.load(seoul_geo_json)</span><br><span class="line"></span><br><span class="line">data=pd.DataFrame.from_dict(seoul_geo_json[<span class="string">'features'</span>])</span><br><span class="line">t=pd.DataFrame.from_dict(data.properties)</span><br><span class="line"></span><br><span class="line">t</span><br><span class="line"></span><br><span class="line">:                                          properties</span><br><span class="line"><span class="number">0</span>&#123;<span class="string">'code'</span>: <span class="string">'11250'</span>, <span class="string">'name'</span>: <span class="string">'강동구'</span>, <span class="string">'name_eng'</span>: <span class="string">'...</span></span><br><span class="line"><span class="string">1&#123;'</span>code<span class="string">': '</span><span class="number">11240</span><span class="string">', '</span>name<span class="string">': '</span>송파구<span class="string">', '</span>name_eng<span class="string">': '</span>...</span><br><span class="line"><span class="number">2</span>&#123;<span class="string">'code'</span>: <span class="string">'11230'</span>, <span class="string">'name'</span>: <span class="string">'강남구'</span>, <span class="string">'name_eng'</span>: <span class="string">'...</span></span><br><span class="line"><span class="string">3&#123;'</span>code<span class="string">': '</span><span class="number">11220</span><span class="string">', '</span>name<span class="string">': '</span>서초구<span class="string">', '</span>name_eng<span class="string">': '</span>...</span><br><span class="line"><span class="number">4</span>&#123;<span class="string">'code'</span>: <span class="string">'11210'</span>, <span class="string">'name'</span>: <span class="string">'관악구'</span>, <span class="string">'name_eng'</span>: <span class="string">'...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">t.properties.map(lambda x:x['</span>name<span class="string">'])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:</span></span><br><span class="line"><span class="string">0      강동구</span></span><br><span class="line"><span class="string">1      송파구</span></span><br><span class="line"><span class="string">2      강남구</span></span><br><span class="line"><span class="string">3      서초구</span></span><br><span class="line"><span class="string">4      관악구</span></span><br></pre></td></tr></table></figure><h2 id="pandas-format으로-불러들이는-방법-3가지"><a href="#pandas-format으로-불러들이는-방법-3가지" class="headerlink" title="pandas format으로 불러들이는 방법 3가지"></a>pandas format으로 불러들이는 방법 3가지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. pd.read_csv</span><br><span class="line">2. pd.DataFrame</span><br><span class="line">3. pd.DataFrame.from_dict</span><br></pre></td></tr></table></figure><p><span style='coloc:red'>※ 보충 필요 </span></p><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><h2 id="기계학습시-거치는-단계"><a href="#기계학습시-거치는-단계" class="headerlink" title="기계학습시 거치는 단계"></a>기계학습시 거치는 단계</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 방법 (알고리즘)</span><br><span class="line">2. 하이퍼 파라미터</span><br><span class="line"></span><br><span class="line">컴퓨터에게 방법(알고리즘)을 알려주고 스스로 학습을 하고</span><br><span class="line">학습한 데이터를 기반으로 예측을 할때 비슷한걸 찾는다</span><br><span class="line">이때 기계학습에는 전부 숫자데이터로 하기 때문에 근처 숫자 값을</span><br><span class="line">찾아 예측하게 된다 (KNN 알고리즘)</span><br><span class="line"></span><br><span class="line">하이퍼 파라미터는 근처 값 몇개를 찾아보고 예측을 할지 정해주는 것이다</span><br><span class="line">하이퍼 파라미터를 몇개로 줘야 하는지는 성능이 좋은 것에 따라 지정해주면 된다</span><br><span class="line"></span><br><span class="line">그리고 알고리즘, 하이퍼 파라미터 둘다 컴퓨터가 알아서 성능 좋은걸로 선택하게 할 수도 있다</span><br></pre></td></tr></table></figure><p><strong>KNN</strong> K-Nearest Neighbor 최근접 이웃 알고리즘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">data = load_iris()</span><br><span class="line">print(data.DESCR) <span class="comment"># 데이터 이해를 위해 보는 것</span></span><br><span class="line"></span><br><span class="line">data_pd = pd.DataFrame(data.data, columns=data.feature_names) <span class="comment"># 인스턴스 방식</span></span><br><span class="line">data_target = pd.DataFrame(data.target, columns=[<span class="string">'target'</span>])</span><br><span class="line">iris = pd.concat([data_pd, data_target], axis = <span class="number">1</span>) <span class="comment"># data_pd + data_target 결합</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassfier(<span class="number">3</span>) <span class="comment"># 근처 3개를 확인해라</span></span><br><span class="line">knn.fit(iris.iloc[:,:<span class="number">-1</span>], iris.iloc[:,<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">: KNeighborsClassifier(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">           metric_params=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, n_neighbors=<span class="number">3</span>, p=<span class="number">2</span>,</span><br><span class="line">           weights=<span class="string">'uniform'</span>)</span><br><span class="line"></span><br><span class="line">data.target_names</span><br><span class="line">knn.predict([[<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]])</span><br><span class="line">knn.predict_proba([[<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">: array([<span class="string">'setosa'</span>, <span class="string">'versicolor'</span>, <span class="string">'virginica'</span>], dtype=<span class="string">'&lt;U10'</span>)</span><br><span class="line">  array([<span class="number">1</span>])  <span class="comment"># versicolor로 예측</span></span><br><span class="line">  array([[<span class="number">0.</span>        , <span class="number">0.66666667</span>, <span class="number">0.33333333</span>]])  <span class="comment"># 가까운 값이 versicolor 2개, virginica 1개가 있었음</span></span><br><span class="line"></span><br><span class="line">※ Bunch</span><br><span class="line"><span class="comment"># dictionary + attribute</span></span><br><span class="line"></span><br><span class="line">type(data)</span><br><span class="line">: sklearn.utils.Bunch</span><br><span class="line"></span><br><span class="line">data.data</span><br><span class="line">data[<span class="string">'data'</span>]</span><br><span class="line"><span class="comment"># 둘다 접근 가능한 데이터 타입</span></span><br><span class="line"></span><br><span class="line">dir(data)</span><br><span class="line">: [<span class="string">'DESCR'</span>, <span class="string">'data'</span>, <span class="string">'feature_names'</span>, <span class="string">'filename'</span>, <span class="string">'target'</span>, <span class="string">'target_names'</span>]</span><br></pre></td></tr></table></figure><p>Folium 활용 : <a href="https://pythonhow.com/web-mapping-with-python-and-folium/" target="_blank" rel="noopener">pythonhow</a></p><p><strong>복습시간</strong>   18시 30분 ~ 21시 / 2시간 30분</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Lecture </tag>
            
            <tag> Pandas </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI 이노베이션 스퀘어 수업(기본반) - python</title>
      <link href="/2019/04/29/AILecture_python/"/>
      <url>/2019/04/29/AILecture_python/</url>
      
        <content type="html"><![CDATA[<h1 id="수업-목차"><a href="#수업-목차" class="headerlink" title="수업 목차"></a>수업 목차</h1><hr><kbd>Python</kbd> <br>[1일차](#1st) &nbsp; [Type(2일차)](#2nd)  &nbsp; [3일차](#3rd)  &nbsp; [4일차](#4th)  &nbsp; [Function(5일차)](#5th) <br>[6일차](#6th) &nbsp; [Decorator(7일차)](#7th)  &nbsp; [Class(8일차)](#8th)  &nbsp; [9일차](#9th)  &nbsp; [Meta_Class(10일차)](#10th) <br>[11일차](#11th) &nbsp; [디버깅](#debug) <br><br><p><a id = '1st'></a></p><h1 id="2019년-4월-29일-월요일-1st"><a href="#2019년-4월-29일-월요일-1st" class="headerlink" title="2019년 4월 29일 월요일 1st"></a>2019년 4월 29일 월요일 1st</h1><p>이 수업은 기본반이라고 되어 있지만 사실상 <code>fundamental</code> 즉, 핵심적이고, 근본적인, 필수적인 것들을 다루기 때문에 어려운 내용도 포함 하고 있다.</p><br><h2 id="왜-프로그래밍-언어가-많은-걸까"><a href="#왜-프로그래밍-언어가-많은-걸까" class="headerlink" title="왜 프로그래밍 언어가 많은 걸까?? "></a>왜 프로그래밍 언어가 많은 걸까?? <br></h2><p>: 언어마다 각각의 <code>장단점</code>이 있기 때문이다 <br><br>그리고 더 구체적으로는 언어마다 <code>특화되있는 분야</code>가 있기 때문이다 <br></p><br>## 왜 AI에는 파이썬인가?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Life is short, you need!</span><br><span class="line">파이썬의 슬로건에서 보여주듯이</span><br><span class="line">파이썬은 개발 속도가 빠르기 때문에 생산성이 좋다!</span><br><span class="line"></span><br><span class="line">1. 생산성</span><br><span class="line">- Efficient  --&gt; 빠르고 체계적인 일처리가 가능하다  </span><br><span class="line">- Effective  --&gt; 원하는 결과를 가져다 준다</span><br><span class="line"></span><br><span class="line">2. 멀티 패러다임</span><br><span class="line">- 절차 지향, 객체지향, 함수지향 프로그래밍이 모두 가능하다</span><br><span class="line"></span><br><span class="line">3. 연구자 친화적 언어, 개발자 친화적 언어  </span><br><span class="line">- 언어중에서 속도가 느린 언어에 속하지만 개발속도는 빠르고 함수적 프로그래밍이 가능하다</span><br><span class="line"></span><br><span class="line">그리고 이 파이썬은 크게 3가지 분야에서 유리하다.</span><br><span class="line">첫번째 시스템 자동화 분야</span><br><span class="line">두번째 웹</span><br><span class="line">세번째 데이터 사이언스</span><br></pre></td></tr></table></figure>* ※ 이 수업은 Data Science분야를 집중해서 다뤄볼 것이다. <br><br><br><h2 id="Python의-특징"><a href="#Python의-특징" class="headerlink" title="Python의 특징"></a>Python의 특징</h2><ol><li><code>다양한 패러다임</code>을 지원한다.</li><li><code>글루</code> 언어다.</li></ol><ul><li>언어이면서 명세서이다.</li><li>CPython / De facto -&gt; 많이 쓰여서 표준이된것. (사실상 표준)</li></ul><ol start="3"><li><code>Library &amp; Tool</code> (많다)</li><li>Python: General Purpose(범용적) &lt;-&gt; R: domain specific(도메인용, 통계전문)</li><li>인터프리터 언어이다.</li><li>모바일 지원에 대해 약하다. (이는 절대 개선될 수 없다. 왜냐하면 apple과 google에서 swift, 및 자사 언어를 사용하기 때문에)</li></ol><ul><li>그러나 DS분야에서는 그나마 낫다.</li></ul><ol start="7"><li>속도가 엄청 느리다. (Dynamic language)</li></ol><br><ul><li><p>※이번 수업은 c로 만든 python으로 사용한다 <br></p></li><li><p>※python3.3 부터 유니코드로 인한 속도가 개선되었다. <br></p><br></li></ul><h2 id="Interpreter-vs-Compiler"><a href="#Interpreter-vs-Compiler" class="headerlink" title="Interpreter vs Compiler"></a>Interpreter vs Compiler</h2><p><img src="https://user-images.githubusercontent.com/33630505/56888295-93eac080-6aae-11e9-977b-2db7ce9cd580.JPG" alt="interpreter vs compiler"><br><br><br><br></p><h2 id="REPL-vs-IDE-vs-Text-Editor"><a href="#REPL-vs-IDE-vs-Text-Editor" class="headerlink" title="REPL vs IDE vs Text Editor"></a>REPL vs IDE vs Text Editor</h2><p><kbd>REPL</kbd>: &nbsp; Read-Eval-Print loop의 약자로 컴파일 과정없이 즉석으로 코드를 입력하고 실행결과를 바로 보는 대화형 환경을 말한다.<br><br><kbd>IDE</Kbd>: &nbsp; Integrated Development Environment의 약자로 개발통합환경 즉, 코딩을 위한 편집기, 컴파일, 링크, 디버그 등… 실행 모듈 개발에 필요한 기능을 한곳에 모아둔 프로그램을 말한다. <br><br><kbd>Text Editor</kbd>: &nbsp; 문서 편집기, 메모장이나 노트패드, atom 등을 text editor라고 하고 보통 코딩을 위한 text editor는 코딩을 더 편리하게 도와주는 기능이 탑재되어있다. <br><br>atom같은 경우에는 원하는 경우 설치하여 터미널창을 추가할 수도 있고 각 언어별 자동완성기능 등 여러가지 편리한 기능들을 사용할 수있도록 도와주는 프로그램이다.</p><br>## Jupyter notebook<p>Python + Markdown 지원 REPL? <br></p><p>Python의 REPL에서 여러줄의 코드를 실행하기 편하고 편집하기 유용한 버전으로 업그레이드 한 것이 IPython Notebook. <br><br>IPython의 강점은 한 파일 내에서 쉽게 코드 cell 단위로 실행할 수 있다는 것이다. <br><br>다만 IPython는 파이썬 전용이다. 그리고 한 번 실행하고 Python 버전을 바꾸려면 로컬 서버를 내렸다가 다시 올려야 하는 불편함이 있다. <br><br>이러한 불편함을 극복하고 만들어진 것이 바로 Jupyter Notebook이다. <br><br>Jupyter 이름에는 뜻이 숨어 있다. Ju는 Julia Py는 Python 그리고 R은 R 세 단어를 합친 단어이다. <br><br>Jupyter notebook은 특이한 점이 웹에서 사용한다는 것이다. <br></p><blockquote><p>앞으로 이 수업은 파이썬 공식 문서를 이용할 것이다. 왜냐하면 정확한 정보를 제공하고 공식 문서를 보는 연습을 미리 해두면<br>나중에 공부할때 필히 도움이 될 것이다. &nbsp; <a href="https://docs.python.org/3/" target="_blank" rel="noopener">공식 문서</a></p></blockquote><br><h2 id="자료형-숫자-문자"><a href="#자료형-숫자-문자" class="headerlink" title="자료형 숫자, 문자"></a>자료형 숫자, 문자</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">자료형 중 &#96;숫자&#96;는 크게 &#96;4가지&#96;가 있다.</span><br><span class="line">1. Integer</span><br><span class="line">2. Float</span><br><span class="line">3. Boolean</span><br><span class="line">4. Complex</span><br><span class="line"></span><br><span class="line">Integer는 정수형으로 숫자의 범위가 없다. 따라서 오버플로우가 없다.</span><br><span class="line">그리고 python에서 정수의 종류는 한 가지</span><br><span class="line"></span><br><span class="line">Float는 부동소수로 숫자의 범위가 있다. 따라서 오버플로우가 있다.</span><br><span class="line">※ 0.1 + 0.1 + 0.1 의 결과값은 0.3000000000000004로 나온다.</span><br><span class="line">Why? --&gt; 컴퓨터는 근사값을 계산하기 때문에 정확한 값을 출력하지 못한다.</span><br><span class="line"></span><br><span class="line">※ a &#x3D; 2e3  --&gt; 2000.0</span><br><span class="line">   b &#x3D; 2e-3 --&gt; 0.002</span><br><span class="line"></span><br><span class="line">그리고 컴퓨터가 정수와 부동소수의 저장 방식의 차이 때문에 .의 유무로 정수인지 부동소수인지 판단한다.</span><br><span class="line"></span><br><span class="line">Boolean은 True &#x2F; False</span><br><span class="line">True는 숫자 1에 대응되고 False는 숫자 0에 대응된다.</span><br><span class="line">※ True 처럼 bold채로 쓰인 것은 키워드이다.</span><br><span class="line"></span><br><span class="line">Complex는 복소수로 j로 표시한다.</span><br><span class="line">ex) i &#x3D; 1 + 3j</span><br><span class="line">   : (1+3j)</span><br><span class="line"></span><br><span class="line">&#96;문자&#96;는 크게 &#96;3가지&#96;가 있다.</span><br><span class="line">1. String</span><br><span class="line">2. Bytes</span><br><span class="line">3. Bytearray</span><br><span class="line"></span><br><span class="line">String은 python3 버전에서 unicode문자에 해당한다.</span><br><span class="line">Byte는 문자 앞에 b를 붙이면 byte문자로 인식하고 ASCII코드에 해당한다.</span><br><span class="line">ex) a &#x3D; b&#39;안녕&#39;</span><br><span class="line">    SyntaxError: bytes can only contain ASCII literal characters</span><br></pre></td></tr></table></figure><p><code>Python Tip1</code> Python에서는 변수를 식별자라고 명칭한다. 이때 식별자는 생성 규칙이 정해져 있다.<br><br></p><p><code>변수 명명규칙</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 영문으로 써야한다.</span><br><span class="line">2. 첫번째문자는 특수문자를 사용할 수 없다.</span><br><span class="line">3. 미리 정의되어있는 문자는 사용할 수 없다.</span><br></pre></td></tr></table></figure><p><code>Python Tip2</code> 파이썬은 동적타입, 즉 타입을 지정해주지 않아도 자동으로 지정해주기 때문에 정수형인지<br>부동소수점인지 문자인지 등을 명시하지 않아도 타입이 지정된다.</p><br><h3 id="Python-keword-종류"><a href="#Python-keword-종류" class="headerlink" title="Python keword 종류"></a>Python keword 종류</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br><span class="line"></span><br><span class="line">[<span class="string">'False'</span>,<span class="string">'None'</span>,<span class="string">'True'</span>,</span><br><span class="line"> <span class="string">'and'</span>,<span class="string">'as'</span>,<span class="string">'assert'</span>,</span><br><span class="line"> <span class="string">'async'</span>,<span class="string">'await'</span>,<span class="string">'break'</span>,</span><br><span class="line"> <span class="string">'class'</span>,<span class="string">'continue'</span>,<span class="string">'def'</span>,</span><br><span class="line"> <span class="string">'del'</span>,<span class="string">'elif'</span>,<span class="string">'else'</span>,</span><br><span class="line"> <span class="string">'except'</span>,<span class="string">'finally'</span>,<span class="string">'for'</span>,</span><br><span class="line"> <span class="string">'from'</span>,<span class="string">'global'</span>,<span class="string">'if'</span>,</span><br><span class="line"> <span class="string">'import'</span>,<span class="string">'in'</span>,<span class="string">'is'</span>,</span><br><span class="line"> <span class="string">'lambda'</span>,<span class="string">'nonlocal'</span>,<span class="string">'not'</span>,</span><br><span class="line"> <span class="string">'or'</span>,<span class="string">'pass'</span>,<span class="string">'raise'</span>,</span><br><span class="line"> <span class="string">'return'</span>,<span class="string">'try'</span>,<span class="string">'while'</span>,</span><br><span class="line"> <span class="string">'with'</span>,<span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><br><h3 id="Namespace-보기"><a href="#Namespace-보기" class="headerlink" title="Namespace 보기"></a>Namespace 보기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%whos     <span class="comment"># 여태까지 사용한 식별자를 보여줌</span></span><br><span class="line"></span><br><span class="line">Variable   Type       Data/Info</span><br><span class="line">-------------------------------</span><br><span class="line">a          int        <span class="number">1</span></span><br><span class="line">abc        bytes      <span class="string">b'abc'</span></span><br><span class="line">b          int        <span class="number">2</span></span><br><span class="line">c          int        <span class="number">3</span></span><br><span class="line">f          bool       <span class="literal">False</span></span><br><span class="line">i          complex    (<span class="number">1</span>+<span class="number">3j</span>)</span><br><span class="line">keyword    module     &lt;module <span class="string">'keyword'</span> <span class="keyword">from</span> <span class="string">'C&lt;...&gt;conda3\\lib\\keyword.py'</span>&gt;</span><br><span class="line">t          bool       <span class="literal">True</span></span><br><span class="line">w          str        ㅇㅇ</span><br></pre></td></tr></table></figure><br><h3 id="문자열-연산-및-예외-연산"><a href="#문자열-연산-및-예외-연산" class="headerlink" title="문자열 연산 및 예외 연산"></a>문자열 연산 및 예외 연산</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'정지혁'</span> * <span class="number">3</span></span><br><span class="line">: 정지혁정지혁정지혁</span><br><span class="line"></span><br><span class="line"><span class="string">'정'</span> + <span class="string">'정'</span></span><br><span class="line">: <span class="string">'정정'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'정'</span> + <span class="number">1</span></span><br><span class="line">: TypeError: can only concatenate str (<span class="keyword">not</span> <span class="string">"int"</span>) to str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 타입에 따라서 지원되는 연산이 다르다.</span></span><br></pre></td></tr></table></figure><br><h3 id="Markdown-문법"><a href="#Markdown-문법" class="headerlink" title="Markdown 문법"></a>Markdown 문법</h3><p><span style="background-color: #fdbb5d">아주 기본적인 마크다운 문법을 배웠고 jupyter에서 작동하는 커멘드를 배웠다.</span><br><br><kbd>ESC</kbd> : &nbsp; 명령 커멘드<br><br><kbd>H</kbd>: &nbsp; Help (도움말)<br><br><kbd>ESC + Y</kbd>: &nbsp; Code mode<br><br><kbd>ESC + M</kbd>: &nbsp; Markdown mode<br><br><kbd>ESC + A</kbd> &nbsp; 현재 라인 위에 새로 추가하기<br><br><kbd>ESC + B</kbd> &nbsp; 현재 라인 밑에 새로 추가하기<br><br><kbd>ESC + L</kbd> : &nbsp; 해당 줄에 숫자 <br><br><kbd>Ctrl + Shift + P</kbd> : &nbsp; Help (도움말)<br></p><p><code>복습 시간</code>   18시 15분 ~ 19시 30분 / 총 1시간 15분</p><hr><p><a id = '2nd'></a></p><h1 id="2019년-4월-30일-화요일-2nd"><a href="#2019년-4월-30일-화요일-2nd" class="headerlink" title="2019년 4월 30일 화요일 2nd"></a>2019년 4월 30일 화요일 2nd</h1><blockquote><p>자료형은 총 20가지가 있지만 13가지를 배울 것이다.</p></blockquote><h2 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 숫자형 [Integer, Float, Boolean, Complex]</span><br><span class="line">2. 문자형 [String, Bytes, Bytearray]</span><br><span class="line">3. List</span><br><span class="line">4. Tuple</span><br><span class="line">5. Set</span><br><span class="line">6. Frozenset</span><br><span class="line">7. Dictionary</span><br><span class="line">8. Range</span><br></pre></td></tr></table></figure><h3 id="정수형을-표현하는-4가지-방법"><a href="#정수형을-표현하는-4가지-방법" class="headerlink" title="정수형을 표현하는 4가지 방법"></a>정수형을 표현하는 4가지 방법</h3><ol><li>2진수</li></ol><ul><li>0b를 숫자 앞에 붙인다.</li></ul><ol start="2"><li>8진수</li></ol><ul><li>0o를 숫자 앞에 붙인다.</li></ul><ol start="3"><li>16진수</li></ol><ul><li>0x를 숫자 앞에 붙인다.</li></ul><ol start="4"><li>10진수</li></ol><ul><li>아무것도 안쓰면 그냥 10진수이다.</li></ul><br><h3 id="정수형-숫자-범위"><a href="#정수형-숫자-범위" class="headerlink" title="정수형 숫자 범위"></a>정수형 숫자 범위</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.maxsize</span><br><span class="line"></span><br><span class="line">결과: <span class="number">9223372036854775807</span></span><br><span class="line">정수형에서 오버플로우가 없다고 했는데..?</span><br><span class="line">실제로 메모리에 할당 가능한 최대 숫자 크기가 저 값이고</span><br><span class="line">초과되었을 때 동적으로 추가 할당이 된다.(?)</span><br><span class="line"></span><br><span class="line">sys.int_info</span><br><span class="line"></span><br><span class="line">sys.int_info(bits_per_digit=<span class="number">30</span>, sizeof_digit=<span class="number">4</span>)</span><br><span class="line">32비트 python인 경우, 정수는 최대 30비트까지 허용된다?</span><br></pre></td></tr></table></figure><br><h3 id="진법-변환-builtin"><a href="#진법-변환-builtin" class="headerlink" title="진법 변환 builtin"></a>진법 변환 builtin</h3><p>bin() =&gt; 2진법으로 변환 <br><br>oct() =&gt; 8진법으로 변환 <br><br>hex() =&gt; 16진법으로 변환 <br><br>2, 8, 16진법의 숫자를 입력하면 자동으로 10진수로 변환<br></p><ul><li>bold채가 아닌데 색이 변하는 것은 builtin함수<br><br></li></ul><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p><span style="background-color: skyblue">부동소수는 소수점이 존재하는 수</span><br><br><span style="background-color: skyblue">예외적으로 무한대와 숫자가 아닌 경우도 포함한다</span><br><br><span style="background-color: skyblue">컴퓨터의 부동소수 연산은 정확하지 않은 근사값을 보여준다</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">float(<span class="string">'inf'</span>)</span><br><span class="line">=&gt; inf (infinity)</span><br><span class="line">float(<span class="string">'nan'</span>)</span><br><span class="line">=&gt; nan (not a number)</span><br><span class="line"><span class="comment"># 무한대 개념은 딥러닝에서 미분의 개념을 꼭 알아야 하는데 이때 중요하게 작용한다.</span></span><br><span class="line">  파이썬은 이처럼 숫자 체계가 범위가 넓기 때문에 인공지능에 이용되는 장점이 있다.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 부동소수 연산   </span></span><br><span class="line">a = <span class="number">1.7976931348623157e+308</span></span><br><span class="line">a</span><br><span class="line">a + <span class="number">1</span></span><br><span class="line">a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"><span class="number">1.7976931348623157e+308</span></span><br><span class="line"><span class="number">1.7976931348623157e+308</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><br><p><strong>.(점)은 부동소수점을 결정하는 리터럴</strong><br></p><blockquote><p>리터럴은 데이터 타입을 결정하는 문자를 일컫는 말이다.</p></blockquote><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.float_info</span><br><span class="line"></span><br><span class="line">sys.float_info(max&#x3D;1.7976931348623157e+308, max_exp&#x3D;1024, max_10_exp&#x3D;308, min&#x3D;2.2250738585072014e-308, min_exp&#x3D;-1021, min_10_exp&#x3D;-307, dig&#x3D;15, mant_dig&#x3D;53, epsilon&#x3D;2.220446049250313e-16, radix&#x3D;2, rounds&#x3D;1)</span><br></pre></td></tr></table></figure><br><h3 id="float형-숫자의-연산"><a href="#float형-숫자의-연산" class="headerlink" title="float형 숫자의 연산"></a>float형 숫자의 연산</h3><p><kbd>+</kbd> , <kbd>-</kbd> ,<kbd> *</kbd> ,<kbd> /</kbd>, <kbd>//</kbd>,<kbd> %</kbd>, <kbd>**</kbd>가 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">단, 음수 나눗셈은 주의 해야 한다.</span><br><span class="line">ex)</span><br><span class="line">10 &#x2F;&#x2F; -3</span><br><span class="line">&#x3D;&gt; -4</span><br><span class="line">why? --&gt; -4 + 0.66667 이런식으로 간주하기 때문에</span><br></pre></td></tr></table></figure><h3 id="자료형을-구별하는-기준"><a href="#자료형을-구별하는-기준" class="headerlink" title="자료형을 구별하는 기준"></a>자료형을 구별하는 기준</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌─ Mutable    # 추가, 삭제가 가능한 경우 &#x2F; 특징 : 메모리 번지 안바뀜, 재할당할 필요없음</span><br><span class="line">└─ Immutable  # 추가, 삭제가 불가능한 경우 &#x2F; 특징 : 재할당으로 메모리 번지 바뀜</span><br><span class="line"></span><br><span class="line">Container ┌─ Homogeneous    # 요소들이 서로 같은 타입인 경우</span><br><span class="line">          └─ Heterogeneous  # 요소들이 서로 다른 타입이 가능한 경우</span><br><span class="line">(요소가 1개 이상인 데이터 구조)</span><br><span class="line"></span><br><span class="line">Sequence ┌─ Indexing   # 요소를 하나씩 출력</span><br><span class="line">         └─ Slicing    # 요소를 한번에 여러개 출력</span><br><span class="line">(순서가 있음)         </span><br><span class="line">Lookup  ┌─ Mapping hash    # key값과 value를 갖는 Dictinary가 갖는 특징    </span><br><span class="line">        └─ set  # 순서가 없는 고유한 원소들의 집합</span><br><span class="line">(key값으로 이루어진 데이터 구조)</span><br></pre></td></tr></table></figure><h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'정지혁'</span></span><br><span class="line">a[<span class="number">0</span>]</span><br><span class="line">: 정</span><br></pre></td></tr></table></figure><h3 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'정지혁'</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>] <span class="keyword">or</span> a[:<span class="number">3</span>]</span><br><span class="line">:<span class="string">'정지혁'</span></span><br><span class="line">a[<span class="number">-3</span>:] <span class="keyword">or</span> a[<span class="number">0</span>:]</span><br><span class="line">:<span class="string">'정지혁'</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>]  <span class="comment"># 양수일때 (맨 뒤에 오는 숫자 - 1) 을 하면 건너 뛰는 문자의 개수를 나타낸다</span></span><br><span class="line">:<span class="string">'정혁'</span></span><br><span class="line">a[::<span class="number">-1</span>]  <span class="comment"># 음수일때 |맨 뒤에 오는 숫자 + 1|을 하면 건너 뛰는 문자의 개수를 나타내고 거꾸로 출력한다.</span></span><br><span class="line">:<span class="string">'혁지정'</span></span><br><span class="line">a[:<span class="number">-3</span>:<span class="number">-1</span>]</span><br><span class="line">:<span class="string">'혁지'</span></span><br><span class="line">a[:<span class="number">70</span>] <span class="comment"># 슬라이싱은 범위가 벗어나도 에러가 나지 않는다</span></span><br><span class="line">:<span class="string">'정지혁'</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">'정지혁 천재'</span></span><br><span class="line"></span><br><span class="line">b[slice(<span class="number">0</span>,<span class="number">3</span>)]</span><br><span class="line">: <span class="string">'정지혁'</span></span><br><span class="line">b[slice(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">2</span>)]</span><br><span class="line">: <span class="string">'정혁천'</span></span><br></pre></td></tr></table></figure><h3 id="List-vs-Tuple"><a href="#List-vs-Tuple" class="headerlink" title="List vs Tuple"></a>List vs Tuple</h3><p><code>차이점</code> List는 수정, 삭제, 추가가 가능하고 인덱싱, 슬라이싱이 가능하지만, Tuple은 수정, 삭제, 추가가 불가능하고 인덱싱, 카운팅만 가능하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>]</span><br><span class="line">type(x)</span><br><span class="line">: list</span><br><span class="line">y = (<span class="number">1</span>)</span><br><span class="line">type(y)</span><br><span class="line">: int</span><br><span class="line"></span><br><span class="line"><span class="comment">#하나의 요소를 갖는 튜플을 생성하려면 콤마를 적어줘야한다.</span></span><br><span class="line">y = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p><code>Tuple Tip</code> 콤마가 뒤에 있다는 것은 튜플이라는 것을 알려주기 때문에 가독성도 높일 수 있고, 콤마를 써야만 tuple로 인식이 되는 경우가 있기 때문에 마지막에 콤마를 꼭 써주는 습관을 갖도록 하자. ex) (1,2,)</p><br><h3 id="Set-vs-Dictionary"><a href="#Set-vs-Dictionary" class="headerlink" title="Set vs Dictionary"></a>Set vs Dictionary</h3><p><code>공통점</code> 둘다 집합의 성질을 띄어 중복허용이 불가능하고, 순서가 없다.</p><p><code>차이점</code> set은 key값만 있는 반면 dictionary는 key, value쌍을 이뤄 mapping hash 타입을 이룬다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#125;</span><br><span class="line">type(s)</span><br><span class="line">:dict</span><br><span class="line"><span class="comment"># python이 처음 만들었을 때는 set이 없었기 때문에 공집합을 만들면 Dictionary로 간주한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 그렇다면 set은 공집합을 어떻게 만드나?</span></span><br><span class="line">s = set()</span><br><span class="line">type(s)</span><br><span class="line">: set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 집합은 고유의 연산자가 있다.</span></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a - &#123;<span class="number">2</span>&#125;</span><br><span class="line">: &#123;<span class="number">1</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">a ^ &#123;<span class="number">3</span>&#125;</span><br><span class="line">: &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># set의 활용</span></span><br><span class="line"><span class="comment"># set은 공통된 메소드를 확인할때도 사용한다</span></span><br><span class="line"></span><br><span class="line">set(dir(list())) &amp; set(dir(tuple()))</span><br><span class="line">:</span><br><span class="line">&#123;<span class="string">'__add__'</span>,</span><br><span class="line"> <span class="string">'__class__'</span>,</span><br><span class="line"> <span class="string">'__contains__'</span>,</span><br><span class="line"> ....</span><br><span class="line"> <span class="string">'count'</span>,</span><br><span class="line"> <span class="string">'index'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="missing-amp-defaultdict"><a href="#missing-amp-defaultdict" class="headerlink" title="__ missing__ &amp; defaultdict"></a>__ missing__ &amp; defaultdict</h3><h4 id="missing"><a href="#missing" class="headerlink" title="__ missing__"></a>__ missing__</h4><blockquote><p>보통 dictionary에 존재하지 않는 key값에 접근할 경우 KeyError가 발생한다 <br><br>그런데 missing 메소드를 재정의 해서 내가 원하는 return 값을 주면 에러가 발생하지 않는다 <br><br>즉, missing 메소드를 구현하면 KeyError가 나는 상황에서 missing 메소드를 호출하게 된다 <br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self[key] = rv = []</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">m = MyDict()</span><br><span class="line"></span><br><span class="line">type(m)</span><br><span class="line">: __main__.MyDict</span><br><span class="line"></span><br><span class="line">m.update(&#123;<span class="string">'x'</span>:<span class="number">1</span>&#125;)  <span class="comment"># 해당 키가 있으면 value를 수정하고 없으면 추가한다</span></span><br><span class="line">m</span><br><span class="line">: &#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">m[<span class="string">'y'</span>]</span><br><span class="line">: []</span><br><span class="line"></span><br><span class="line">m</span><br><span class="line">: &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: []&#125;</span><br><span class="line"></span><br><span class="line">m[<span class="string">'y'</span>].append(<span class="number">2</span>)</span><br><span class="line">: &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: [<span class="number">2</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict2</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self[key] = rv = &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">m2 = MyDict2(&#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">m2[<span class="string">'b'</span>]</span><br><span class="line">: &#123;&#125;</span><br><span class="line"></span><br><span class="line">m2.update(&#123;<span class="string">"c"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">m[<span class="string">'b'</span>].update(&#123;<span class="string">'x'</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">m</span><br><span class="line">: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;, <span class="string">'c'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure><h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h4><blockquote><p>없는 key값에 접근했을 때 에러가 나지 않고 default로 원하는 타입의 값 자동으로 할당해주는 dict type</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">m = defaultdict(list)</span><br><span class="line">type(m)</span><br><span class="line">: collections.defaultdict</span><br><span class="line"></span><br><span class="line">m</span><br><span class="line">: defaultdict(list, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">m[<span class="string">'x'</span>].append(<span class="number">1</span>)</span><br><span class="line">m</span><br><span class="line">: defaultdict(list, &#123;<span class="string">'x'</span>: [<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">m[<span class="string">'y'</span>]</span><br><span class="line">: defaultdict(list, &#123;<span class="string">'x'</span>: [<span class="number">1</span>], <span class="string">'y'</span>: []&#125;)</span><br><span class="line"></span><br><span class="line">[m[<span class="string">'y'</span>].append(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">: [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">m</span><br><span class="line">: defaultdict(list, &#123;<span class="string">'x'</span>: [<span class="number">1</span>], <span class="string">'y'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]&#125;)</span><br></pre></td></tr></table></figure><p>출처: <a href="https://greatkim91.tistory.com/189" target="_blank" rel="noopener">tistory</a><br></p><hr><p><code>Internals</code> Python은 -5부터 256까지 숫자는 재할당을 해도 메모리 번지가 바뀌지 않도록 인터널 기법을 사용한다. 많이 쓰이는 작은 정수들을 미리 할당해 놓음으로써 메모리 공간과 연산비용을 많이 아낄 수 있게된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> intern</span><br><span class="line"></span><br><span class="line">dir(intern)</span><br><span class="line">:</span><br><span class="line">[<span class="string">'__call__'</span>,</span><br><span class="line"> <span class="string">'__class__'</span>,</span><br><span class="line"> <span class="string">'__delattr__'</span>,</span><br><span class="line"> <span class="string">'__dir__'</span>,</span><br><span class="line"> <span class="string">'__doc__'</span>,</span><br><span class="line"> <span class="string">'__eq__'</span>,</span><br><span class="line"> <span class="string">'__format__'</span>,</span><br><span class="line"> <span class="string">'__ge__'</span>,</span><br><span class="line"> <span class="string">'__getattribute__'</span>,</span><br><span class="line"> <span class="string">'__gt__'</span>,</span><br><span class="line"> <span class="string">'__hash__'</span>,</span><br><span class="line"> <span class="string">'__init__'</span>,</span><br><span class="line"> <span class="string">'__init_subclass__'</span>,</span><br><span class="line"> <span class="string">'__le__'</span>,</span><br><span class="line"> <span class="string">'__lt__'</span>,</span><br><span class="line"> <span class="string">'__module__'</span>,</span><br><span class="line"> <span class="string">'__name__'</span>,</span><br><span class="line"> <span class="string">'__ne__'</span>,</span><br><span class="line"> <span class="string">'__new__'</span>,</span><br><span class="line"> <span class="string">'__qualname__'</span>,</span><br><span class="line"> <span class="string">'__reduce__'</span>,</span><br><span class="line"> <span class="string">'__reduce_ex__'</span>,</span><br><span class="line"> <span class="string">'__repr__'</span>,</span><br><span class="line"> <span class="string">'__self__'</span>,</span><br><span class="line"> <span class="string">'__setattr__'</span>,</span><br><span class="line"> <span class="string">'__sizeof__'</span>,</span><br><span class="line"> <span class="string">'__str__'</span>,</span><br><span class="line"> <span class="string">'__subclasshook__'</span>,</span><br><span class="line"> <span class="string">'__text_signature__'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">※ 주의</span><br><span class="line"><span class="comment"># interning된 값을 재할당할때는 메모리 번지가 바뀌지 않는다</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">id(a)</span><br><span class="line">:</span><br><span class="line"><span class="number">140706464961408</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">id(a)</span><br><span class="line">:</span><br><span class="line"><span class="number">140706464961408</span></span><br></pre></td></tr></table></figure><p>파이썬 내부 동작 원리 : <a href="https://mingrammer.com/translation-cpython-internals-arbitrary-precision-integer-implementation/" target="_blank" rel="noopener">mingrammer</a><br></p><p><code>Garbage Collection</code>은 메모리 관리 기법 중 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 필요 없게 된 영역을 해제하는 기능이다.</p><br><hr><h3 id="xxx-xxx"><a href="#xxx-xxx" class="headerlink" title="xxx = xxx"></a>xxx = xxx</h3><p><span style="background: orange">식별자 or 변수 = 식(Expression), statement </span><br><br><kbd>Expression</kbd>: 연산결과가 하나의 값으로 만들 수 있는 것 <br><br>ex) 3 + 1 , float(‘inf’) 등 …  </p><h3 id="Expression-vs-Statement"><a href="#Expression-vs-Statement" class="headerlink" title="Expression vs Statement"></a>Expression vs Statement</h3><p><kbd>Expression</kbd>은 값 또는 값들과 연산자를 함께 사용해서 표현해 하나의 값으로 수렴하는 것 <br><br>이때 함수, 식별자, 할당 연산자 [], 등을 포함한다. <br><br>그리고 Expression은 평가가 가능하기 때문에 하나의 값으로 수렴한다. <br></p><ul><li>여기서 평가라는 의미를 정확하게 알고 있어야 한다. 평가란 컴퓨터가 이해할 수 있는 기계 이진 코드로 값을 변환하면 리터럴의 형태가 달라도 그 평가값은 같게 되는 것을 말한다. (표현식의 값을 알아낸다.)</li></ul><p>ex)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">eval(<span class="string">'1+2+3'</span>)</span><br><span class="line">eval(<span class="string">'a+b'</span>)</span><br><span class="line">:<span class="number">6</span></span><br><span class="line">:<span class="number">9</span></span><br></pre></td></tr></table></figure><p><a href="https://shoark7.github.io/programming/knowledge/expression-vs-statement.html" target="_blank" rel="noopener">참고</a><br></p><br><kbd>Statement</kbd>는 예약어와 표현식을 결합한 패턴이다. <br>그리고 <span style="color: orange">실행가능한</span> 최소의 독립적인 코드 조각을 일컫는다. <br><span style="color: orange">Statement</span>는 총 5가지 경우가 있다. <br>1. 할당 (Assignment)2. 선언 (Declaration)3. 조건 (if)4. 반복문 (for, while)5. 예외처리<p><strong>for문으로 변수 할당하기</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># statement</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>+<span class="number">1</span>):</span><br><span class="line">   exec(<span class="string">'r'</span> + str(i) + <span class="string">'='</span> +str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># r1, r2 ...r20 까지 1,2,...20 할당</span></span><br></pre></td></tr></table></figure><p><code>결론적으로</code> 모든 Expression은 Statement지만 어떤 Statement는 expression이지 않다. retrun 3 이런 구문은 평가를 통해 3의 값이 나오는 것이 아니기 때문이다. ex) exec(‘1+2’)는 문제 없지만 eval(‘a=3’)는 오류가 난다</p><br><h3 id="기타-내장-함수"><a href="#기타-내장-함수" class="headerlink" title="기타 내장 함수"></a>기타 내장 함수</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir(obejct) : 어떠한 객체를 인자로 넣어주면 해당 객체가 어떤 변수와 메소드를 가지고 있는지 출력을 합니다.</span><br><span class="line">type(object) : 어떠한 객체를 인자로 넣어주면 해당 객체의 타입을 반환한다.</span><br><span class="line">len(object) : 어떠한 객체를 인자로 넣어주면 해당 객체의 요소 갯수를 반환한다.</span><br><span class="line">id(object) : 해당 객체가 저장되어 있는 메모리 위치를 반환한다.</span><br></pre></td></tr></table></figure><br><h3 id="id함수로-보는-메모리-할당"><a href="#id함수로-보는-메모리-할당" class="headerlink" title="id함수로 보는 메모리 할당"></a>id함수로 보는 메모리 할당</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line">hex(id(x))</span><br><span class="line">:<span class="string">'0x7ffb006b9460'</span></span><br><span class="line">hex(id(y))</span><br><span class="line">:<span class="string">'0x7ffb006b9460'</span></span><br><span class="line"><span class="comment"># -5 ~ 256사이 숫자이기 때문에 재할당을 해도 메모리 주소가 변하지 않는다.</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1000</span></span><br><span class="line">y = <span class="number">1000</span></span><br><span class="line">hex(id(x))</span><br><span class="line">: <span class="string">'0x1bc813b7650'</span></span><br><span class="line">hex(id(y))</span><br><span class="line">: <span class="string">'0x1bc813b73d0'</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">2000</span></span><br><span class="line">hex(id(x))</span><br><span class="line">: <span class="string">'0x1bc813b7db0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 새로운 식별자로 같은 값에 binding을 하거나 reassignment를 하게되면 메모리 주소값이 변경된다.</span></span><br></pre></td></tr></table></figure><p>※ 메모리 잘 쓰는 방법: &nbsp; <a href="https://wikidocs.net/21057" target="_blank" rel="noopener">wikidocs</a><br><br></p><h3 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">3</span></span><br><span class="line">: <span class="literal">False</span></span><br><span class="line"><span class="number">1</span> != <span class="number">3</span></span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">'정지혁'</span> &lt; <span class="string">'천재'</span></span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] &lt; [<span class="number">3</span>]</span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째 요소 끼리 비교후 같으면 그 다음 요소 비교</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] &lt; <span class="string">'a'</span></span><br><span class="line">: TypeError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비교할 때는 같은 타입끼리 해야 한다.</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1000</span></span><br><span class="line">b = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 같은 메모리 번지인지까지 따진다.</span></span><br><span class="line"></span><br><span class="line"><span class="string">'ㅈ'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'정지혁'</span></span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">:<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> <span class="string">'정지혁'</span></span><br><span class="line">: TypeError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 정수형과 리스트를 in 연산을 했을 때는 타입이 달라도 가능하지만</span></span><br><span class="line"><span class="comment"># 정수형과 문자형은 불가능하다</span></span><br><span class="line"><span class="comment"># 기본적으로 멤버쉽 연산자(in)는 container에서만 쓸 수 있고 문자열 일때는 문자열 끼리만 가능하다.</span></span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ol><li>NameError</li></ol><ul><li>값을 할당하지 않은 식별자를 사용했을 때 발생하는 에러</li></ul><ol start="2"><li>IndexError</li></ol><ul><li>인덱스 값에서 벗어난 인덱스를 사용했을 때 발생하는 에러</li></ul><ol start="3"><li>TypeError</li></ol><ul><li>서로 다른 타입간의 연산을 했을 경우 발생하는 에러</li></ul><ol start="4"><li>KeyError</li></ol><ul><li>dictionary에서 없는 key값으로 접근할때 발생하는 에러</li></ul><ol start="5"><li>AttributeError</li></ol><ul><li>존재하지 않는 Attribute에 접근하려고 할 때 발생하는 에러</li></ul><ol start="6"><li>UnboundLocalError</li></ol><ul><li>할당하기 전에 지역변수를 참조했을 때 발생하는 에러</li></ul><p><code>복습 시간</code>   18시 35분 ~ 20시 5분/ 총 1시간 30분  </p><p><a id = '3rd'></a></p><h1 id="2019년-5월-2일-목요일-3rd"><a href="#2019년-5월-2일-목요일-3rd" class="headerlink" title="2019년 5월 2일 목요일 3rd"></a>2019년 5월 2일 목요일 3rd</h1><h3 id="할당문의-종류-6가지"><a href="#할당문의-종류-6가지" class="headerlink" title="할당문의 종류 6가지"></a>할당문의 종류 6가지</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 기본 할당문</span><br><span class="line">- a &#x3D; 1</span><br><span class="line">2. Chain assignment</span><br><span class="line">- a &#x3D; b &#x3D; 1</span><br><span class="line">3. Augmentation</span><br><span class="line">- a +&#x3D; 1</span><br><span class="line">4. Pakcing</span><br><span class="line">5. Unpacking</span><br><span class="line">- Container 쪼개기</span><br><span class="line">6. Global , nonlocal</span><br><span class="line">- global 이용하여 전역번수 접근, 변경하기 # 추천하지 않는 기능</span><br><span class="line">- nonlocal은 함수 중첩시 함수와 함수 사이 변수</span><br></pre></td></tr></table></figure><ul><li>Unpacking 방법은 빅데이터 처리시 많이 쓰인다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Chain assignment #</span></span><br><span class="line"></span><br><span class="line">a = b = <span class="number">2</span></span><br><span class="line">a</span><br><span class="line">: <span class="number">2</span></span><br><span class="line">b</span><br><span class="line">: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a</span><br><span class="line">: <span class="number">2</span></span><br><span class="line"><span class="comment"># 변수 어느 하나 재할당 한다고 같이 바뀌지 않는다</span></span><br><span class="line"></span><br><span class="line">-- 주의 --</span><br><span class="line">x = y = [<span class="number">1000</span>,<span class="number">2000</span>]</span><br><span class="line">y.append(<span class="number">3000</span>)</span><br><span class="line">x</span><br><span class="line">: [<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">3000</span>]</span><br><span class="line">y</span><br><span class="line">: [<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">3000</span>]</span><br><span class="line"><span class="comment"># 그러나 mutable일때는 같이 변하므로 주의해야 한다!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Augmentation #</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">a += <span class="number">1</span>  <span class="comment"># (재할당)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다른 언어처럼 선증가, 후증가가 지원되지 않는다</span></span><br><span class="line">++a  (X)</span><br><span class="line">a++  (X)</span><br><span class="line"></span><br><span class="line">그러나 <span class="comment"># ++a는 에러가 나지 않는다</span></span><br><span class="line">Why?</span><br><span class="line"><span class="comment"># 앞에 있는 +를 부호연산자라고 간주하기 때문이다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Packing #</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">y = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unpacking #</span></span><br><span class="line"></span><br><span class="line">x,y = <span class="number">1</span>,<span class="number">2</span>  (O)</span><br><span class="line">x,y,*z = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> (O)</span><br><span class="line">*x, = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> (O)</span><br><span class="line">*a, = <span class="string">'정지혁'</span> (O)</span><br><span class="line">*u, = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>,<span class="string">'d'</span>:<span class="number">4</span>,<span class="string">'e'</span>:<span class="number">1</span>&#125; (O)  <span class="comment"># 단, 키 값만 리스트 형태로 반환</span></span><br><span class="line">*x, y = range(<span class="number">10</span>) (O)</span><br><span class="line"></span><br><span class="line">x, = <span class="number">1</span>,<span class="number">2</span> (X)  <span class="comment"># 왼쪽 식별자와 오른쪽 식의 갯수를 맞춰줘야 함</span></span><br><span class="line">*x, y, *z = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> (X)</span><br><span class="line">*x = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> (X)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 오른쪽에 오는 식은 Container면 모두 가능</span></span><br><span class="line"><span class="comment"># * (별표)는 나머지를 리스트로 반환, 그리고 * 두 개이상 못씀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Global  nonlocal#</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">global</span> a</span><br><span class="line">   a += <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">name()</span><br><span class="line">: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">()</span>:</span></span><br><span class="line">   a = <span class="number">1</span></span><br><span class="line">   a += <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line"><span class="comment"># 위 함수와는 같지 않음 / Why? 밑 함수에서는 a를 그냥 재할당한 것임</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(t)</span>:</span></span><br><span class="line">a = t</span><br><span class="line">print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> a</span><br><span class="line">a += <span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">return</span> name2()</span><br><span class="line"></span><br><span class="line">name(<span class="number">3</span>)</span><br><span class="line">: <span class="number">3</span></span><br><span class="line">  <span class="number">4</span></span><br></pre></td></tr></table></figure><p>Packing &amp; Unpacking: &nbsp; <a href="https://python.bakyeono.net/chapter-5-5.html" target="_blank" rel="noopener">blog</a></p><br><h3 id="조건의-형태-3가지"><a href="#조건의-형태-3가지" class="headerlink" title="조건의 형태 3가지"></a>조건의 형태 3가지</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. if, else &amp; and, or</span><br><span class="line">2. if, elif, else</span><br><span class="line">3. 중첩 if</span><br></pre></td></tr></table></figure><h3 id="if문-예시"><a href="#if문-예시" class="headerlink" title="if문 예시"></a>if문 예시</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt; a &lt; <span class="number">10</span>:</span><br><span class="line">   print(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="AND-amp-OR"><a href="#AND-amp-OR" class="headerlink" title="AND &amp; OR"></a>AND &amp; OR</h4><ol><li>A and B  </li></ol><ul><li>A가 참(Truely)이면 B 체크 =&gt; B 반환</li><li>A가 거짓(Fasly)이면 B 체크 X =&gt; A 반환</li></ul><ol start="2"><li>A or B</li></ol><ul><li>A가 참이면 B 체크 X =&gt; A 반환</li><li>A가 거짓이면 B 체크 =&gt; B 반환</li></ul><br><h3 id="반복문-2가지"><a href="#반복문-2가지" class="headerlink" title="반복문 2가지"></a>반복문 2가지</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. for</span><br><span class="line">2. while</span><br></pre></td></tr></table></figure><blockquote><p>여기서 개념 하나 추가 Iterable! Iterable은 순회, 반복 가능한 것을 말한다.<br>그래서 for문에 쓸 수 있다.<br>보통 container이면 Iterable ※ 아닌것도 있지만 아주 나중에 배운다.</p></blockquote><p><span style="color: red">container이지만 Iterable이 아닌것이 set인가?? iterable의 조건중 __ iter__랑 __ getitem__ 두가지가 있어야 되는데 set은 __ iter__ 한가지 밖에 없다 왜지? </span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for #</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;.values():</span><br><span class="line">   print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;.items():</span><br><span class="line">   print(i,j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in 뒤에 오는 것은 Container, 여러개의 요소를 갖고 있는것은 반복문이 가능하다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while #</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">   i+=<span class="number">1</span></span><br><span class="line">   print(i)</span><br><span class="line">   <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span>   <span class="comment"># 탈출문   </span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(<span class="string">"완료"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># continue는 continue 밑은 실행하지 않고 넘어간다</span></span><br></pre></td></tr></table></figure><ul><li><p>for문은 반복횟수를 알때 주로 사용하고, while문은 반복횟수가 정해지지 않았을 때, 모를때 주로 사용한다.</p></li><li><p>모든 for문은 while문으로 바꿀수 있지만, 모든 while문은 for문으로 바꾸기 어렵다.</p></li></ul><h3 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h3><blockquote><p>for문에 index가 필요할때 iterable 객체를 enumerate로 감싸면 index값이 같이 출력된다</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(a):</span><br><span class="line">    print(index, value)</span><br><span class="line">:</span><br><span class="line"><span class="number">0</span> a</span><br><span class="line"><span class="number">1</span> b</span><br><span class="line"><span class="number">2</span> c</span><br><span class="line"><span class="number">3</span> d</span><br><span class="line"><span class="number">4</span> e</span><br></pre></td></tr></table></figure><h3 id="else문-3가지-쓰임"><a href="#else문-3가지-쓰임" class="headerlink" title="else문 3가지 쓰임"></a>else문 3가지 쓰임</h3><ol><li>조건문에서     =&gt; 조건에 맞지 않는 경우  </li><li>반복문에서     =&gt; 반복문이 정상 완료 되고나서 실행</li></ol><ul><li>0번도 수행이라고 간주하기 때문에 else문이 실행될 수 있다</li></ul><ol start="3"><li>예외처리할 때  </li></ol><hr><h3 id="Dictionary-view"><a href="#Dictionary-view" class="headerlink" title="Dictionary view"></a>Dictionary view</h3><ol><li>key</li><li>values</li><li>items</li></ol><h4 id="구문-실행시-실행시간-알아보기"><a href="#구문-실행시-실행시간-알아보기" class="headerlink" title="구문 실행시 실행시간 알아보기"></a>구문 실행시 실행시간 알아보기</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        print(i,<span class="string">"*"</span>,j,<span class="string">"="</span>, i*j)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 391 µs ± 31.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span></span><br></pre></td></tr></table></figure><h4 id="Python에서-중요한-두-가지-Two-A"><a href="#Python에서-중요한-두-가지-Two-A" class="headerlink" title="Python에서 중요한 두 가지 (Two A)"></a>Python에서 중요한 두 가지 (Two A)</h4><ol><li>Abstraction</li><li>Automation</li></ol><p>python 내부 구조 확인 가능 사이트: <a href="http://pythontutor.com" target="_blank" rel="noopener">pythontutor</a></p><br>`복습 시간`   17시 45분~ 18시 43분/ 총 58분<p><a id = '4th'></a></p><h1 id="2019년-5월-3일-금요일-4th"><a href="#2019년-5월-3일-금요일-4th" class="headerlink" title="2019년 5월 3일 금요일 4th"></a>2019년 5월 3일 금요일 4th</h1><h2 id="선언문-2가지"><a href="#선언문-2가지" class="headerlink" title="선언문 2가지"></a>선언문 2가지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 함수 선언</span><br><span class="line">2. 클래스 선언</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(arg1, arg2 = <span class="number">2</span>)</span>:</span></span><br><span class="line">   <span class="keyword">pass</span>       <span class="comment"># 에러가 나지 않게 형태만 갖추기</span></span><br><span class="line"></span><br><span class="line">name(<span class="number">3</span>)       <span class="comment"># 함수 호출(콜)</span></span><br><span class="line">: (<span class="number">3</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>Argument</code>  인자로 어떤 데이터 타입도 올 수 있다. 단 튜플을 넣을 때 괄호를 꼭 써줘야 한다  </p><blockquote><p>Python의 또다른 장점 ‘return’문은 생략 가능하다</p></blockquote><br><h2 id="Parameter-vs-Argument"><a href="#Parameter-vs-Argument" class="headerlink" title="Parameter vs Argument"></a>Parameter vs Argument</h2><table><thead><tr><th>Parameter</th><th>Argument</th></tr></thead><tbody><tr><td>선언문에서 괄호 안</td><td>호출문에서 괄호안</td></tr><tr><td>키워드 방식이 온다</td><td>식이 들어갈 수 있다</td></tr></tbody></table><br><h3 id="Parameter-사용법"><a href="#Parameter-사용법" class="headerlink" title="Parameter 사용법"></a>Parameter 사용법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Positional + keyword</span><br><span class="line">2. Only Positional</span><br><span class="line">3. Only Keyword</span><br><span class="line">4. Variable Positional</span><br><span class="line">5. Variable keyword</span><br><span class="line">6. Variable Positional + Variable keyword</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Positional + Keyword #</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(a,b)</span>:</span></span><br><span class="line">   <span class="string">''' 함수 설명 '''</span>   <span class="comment"># Docs String =&gt; Shift + Tab 하면 설명이 그대로 나온다</span></span><br><span class="line">   <span class="keyword">return</span> a, b        <span class="comment">#                참고로 함수 설명에 ( / )가 있을 경우 Positional 방식이라는 뜻</span></span><br><span class="line">name(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">:(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">name(<span class="number">3</span>, b = <span class="number">4</span>)</span><br><span class="line">:(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">name(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line">:(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only Keyword #</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(*,a,b)</span>:</span>   </span><br><span class="line">   <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># Variable Positional#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(*a)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> a[<span class="number">0</span>],a[<span class="number">1</span>:<span class="number">3</span>],a[<span class="number">3</span>:]</span><br><span class="line">name()</span><br><span class="line">:()</span><br><span class="line">name([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>),&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">:([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], ((<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;), ())</span><br><span class="line"></span><br><span class="line"><span class="comment"># !주의! 할당할때 *는 list를 반환하고 함수에서 *는 tuple로 반환한다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Variable Keyword #</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(**a)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">name(a = [<span class="string">'a'</span>,<span class="number">2</span>], b = &#123;<span class="string">'a'</span>:<span class="string">'a'</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;, c = range(<span class="number">3</span>),d = <span class="number">5</span>)</span><br><span class="line">:&#123;<span class="string">'a'</span>: [<span class="string">'a'</span>, <span class="number">2</span>], <span class="string">'b'</span>: &#123;<span class="string">'a'</span>: <span class="string">'a'</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, <span class="string">'c'</span>: range(<span class="number">0</span>, <span class="number">3</span>), <span class="string">'d'</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Variable Positional + Variable Keyword #</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(*b, **a)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> b, a</span><br><span class="line">name(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, a = <span class="number">9</span>, b = <span class="number">3</span>, c = [<span class="number">1</span>,<span class="number">2</span>])    <span class="comment"># !주의! keyword를 쓰기 시작하면 끝까지 keyword를 써야한다</span></span><br><span class="line">:((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>), &#123;<span class="string">'a'</span>: <span class="number">9</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</span><br></pre></td></tr></table></figure><p><code>Positional Only</code> 사용자가 직접 만드는 함수의 파라미터에는 Positional only 방식을 사용할 수 없다. 하지만 기본 내장 함수 중에 파라미터 부분에 / 표시가 되어 있는 경우는 Positional Only 방식을 사용하라는 의미 이다. (shift + tab으로 설명 볼때), (앞으로 python 3.8부터는 positional only 방식을 지원한다고 한다.)</p><p><code>positional only</code> : <a href="https://discuss.python.org/t/pep-570-python-positional-only-parameters/1078" target="_blank" rel="noopener">python</a></p><blockquote><p>Python에서는 Parameter로 받아 올때 Type을 지정해주지 않는다.<br>Why? Python 철학중 EAFP라는 것이 있는데 이는 ‘허락보다는 용서를 구하기 쉽다’로<br>부부관계를 예시로 설명하면 이해하기 쉽다.<br>결혼하고 나면 보통 남자든 여자든 비싼 사치품을 사는 것이 쉽지 않다.<br>이때 사치품을 사려고 하는 입장의 사람은 결정해야한다.<br>사고 혼날 것인가.<br>허락을 받을 것인가.<br>전자가 더 실행하기 쉽고 빠르다는 것이 Python의 철학인 것이다.</p></blockquote><br><p><code>Python Tip1</code> 파이썬은 오버로딩이 안된다.(@연산자로 오버로딩 가능해졌다?) 즉, 같은 함수 이름을 여러개 정의하여 매개변수를 달리하여 사용하는 기법이 허용이 되지 않는다.<br>파이썬의 단점 중에 속도가 느리다는 점이 있었는데, 오버로딩을 지원하지 않음으로써 속도를 개선했다. (단, 오버라이딩은 사용 가능하다. (매소드 재정의))</p><h3 id="multipledispatch"><a href="#multipledispatch" class="headerlink" title="multipledispatch"></a>multipledispatch</h3><blockquote><p>파이썬으로 오버로딩 지원해주는 패키지</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multipledispatch <span class="keyword">import</span> dispatch</span><br><span class="line"></span><br><span class="line"><span class="meta">@dispatch(int, int)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@dispatch(object, object)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span></span></span><br><span class="line"><span class="function">    <span class="title">return</span> "%<span class="title">s</span> + %<span class="title">s</span>"%<span class="params">(x,y)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'hello'</span>)</span><br><span class="line">: <span class="string">'1 + hello'</span></span><br></pre></td></tr></table></figure><ul><li>오늘의 명언<br><span style="color: orange">자동이 많으면 제약이 많다.</span></li></ul><br><h2 id="함수의-특징-3가지"><a href="#함수의-특징-3가지" class="headerlink" title="함수의 특징 3가지"></a>함수의 특징 3가지</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. return이 반드시 있어야 한다</span><br><span class="line">- python에서는 return을 생략하면 None을 반환하도록 되어 있다</span><br><span class="line">2. 함수 안에 또 다른 함수를 선언할 수 있다</span><br><span class="line">3. Global, Local</span><br><span class="line">- 함수 안에 없는 값을 return 하게 될 경우 가까운 Global 식별자를 return</span><br><span class="line">- Global 식별자이름 하게 되면 접근, 수정이 가능하다</span><br><span class="line">- 함수 밖에서 함수 안의 식별자에 접근, 수정이 불가능하다</span><br></pre></td></tr></table></figure><br><h3 id="함수안의-함수"><a href="#함수안의-함수" class="headerlink" title="함수안의 함수"></a>함수안의 함수</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">   <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">a()</span><br><span class="line">:&lt;function __main__.a.&lt;locals&gt;.b()&gt;</span><br><span class="line">a()()</span><br><span class="line">:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">   <span class="keyword">return</span> b()</span><br><span class="line"></span><br><span class="line">a()</span><br><span class="line">:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 둘의 차이가 있다 위에것은 함수를 리턴하는 것이고 밑에꺼는 함수 안에서 함수를 호출하여 값을 리턴</span></span><br></pre></td></tr></table></figure><p><code>Python Tip2</code>  return 값이 있는지 없는지 확인하는 방법 1. type() 2. 값을 저장해서 확인하기<br><br></p><p><code>Python Tip3</code>  함수를 리스트에 넣어서 계산을 편리하게 할 수도 있다.<br><br></p><p><code>Python Tip4</code>  jupyter에서는 두 가지로 호출할 수 있는 함수인지 판단 가능 1. callable 2. 출력<br><br></p><p><code>Python Tip5</code>  Python keyword는 총 35개다.<br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> keyword.kwlist:</span><br><span class="line">   cnt += <span class="number">1</span></span><br><span class="line">print(cnt)</span><br><span class="line">:<span class="number">35</span></span><br></pre></td></tr></table></figure><h3 id="신기한-함수"><a href="#신기한-함수" class="headerlink" title="신기한 함수"></a>신기한 함수</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설명에서 plot[x] =&gt; 여기서 [] 대괄호는 리스트가 아니고 옵션이라는 뜻</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/57130958-1e486280-6dd6-11e9-9ee5-2426f4064ba1.JPG" alt="result"></p><h4 id="추가-공부"><a href="#추가-공부" class="headerlink" title="추가 공부"></a>추가 공부</h4><ol><li>동적 프로그래밍에 대해서 찾아보기</li><li>피보나치 다른 방법 공부해보기</li><li>과제란에 올려주시는거 문제 풀어보기</li><li>여태까지 공부했던건 tree형태로 가지치기 map 그려보기</li><li>Python 철학 처음부터 끝까지 정독해보기</li></ol><p><code>복습 시간</code>   17시 28분 ~ 19시/ 총 1시간 32분   </p><p><a id = '5th'></a></p><h1 id="2019년-5월-7일-화요일-5th"><a href="#2019년-5월-7일-화요일-5th" class="headerlink" title="2019년 5월 7일 화요일 5th"></a>2019년 5월 7일 화요일 5th</h1><p>&lt;First class function/Higher order function 관계 그림 수정&gt;</p><p>일급 객체: <a href="https://gyukebox.github.io/blog/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4first-class-citizen/" target="_blank" rel="noopener">git blog</a>, <a href="https://rednooby.tistory.com/113" target="_blank" rel="noopener">tistory</a><br></p><h2 id="First-class-function"><a href="#First-class-function" class="headerlink" title="First class function"></a>First class function</h2><blockquote><p>함수를 값처럼 사용할 수 있다.</p></blockquote><br><h2 id="Higher-Order-Function"><a href="#Higher-Order-Function" class="headerlink" title="Higher-Order-Function"></a>Higher-Order-Function</h2><blockquote><p>함수를 리턴값으로 쓰고, 함수를 인자로 쓰는 함수</p></blockquote><br><h2 id="함수의-인자로-함수가-들어가는-경우"><a href="#함수의-인자로-함수가-들어가는-경우" class="headerlink" title="함수의 인자로 함수가 들어가는 경우"></a>함수의 인자로 함수가 들어가는 경우</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. map</span><br><span class="line">2. filter</span><br><span class="line">3. reduce  &#x3D;&gt; 여러개 값을 하나의 값으로 축약</span><br></pre></td></tr></table></figure><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">list(map(a,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line">   temp.append(i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(temp)</span><br><span class="line">:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x &gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">list(filter(b,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line">:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># reduce</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> x,y:x+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">: <span class="number">15</span></span><br><span class="line"></span><br><span class="line">add5 = <span class="keyword">lambda</span> n: n+<span class="number">5</span></span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> l, x: l+add5(x), range(<span class="number">10</span>),<span class="number">0</span>)</span><br><span class="line">: <span class="number">95</span></span><br><span class="line"><span class="comment"># 0 + (0 + 5) =&gt; 5 / 5 + (1 + 5) =&gt; 11 / .....  </span></span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> l, x: l+add5(x), range(<span class="number">10</span>))</span><br><span class="line">: <span class="number">90</span></span><br><span class="line"><span class="comment"># 0 + (1 + 5) =&gt; 6 / 6 + (2 + 5) =&gt; 13 / .....</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기값 list (O)</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> l, x: l+[add5(x)], range(<span class="number">10</span>),[])</span><br><span class="line">: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기값 tuple (O)</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x,y : x+(y,), [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], ())</span><br><span class="line">: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기값 set (X)</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x,y : x+&#123;y&#125;, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], set())</span><br><span class="line">: TypeError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기값을 주는지 안 주는지에 따라 결과값이 달라진다</span></span><br></pre></td></tr></table></figure><blockquote><p>filter는 predicate function =&gt; True or False를 되돌려 주는 함수</p></blockquote><br><p><code>Python Tip1</code>  shift + tab 했을 때 나오는 * iterables와 iterable는 차이가 있다. 별표가 있는 것은 iterable 여러개가 오고 별표가 없는 것은 한개만 온다</p><br><h3 id="별표의-총-7가지-방법"><a href="#별표의-총-7가지-방법" class="headerlink" title="별표의 총 7가지 방법"></a>별표의 총 7가지 방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. Unpacking 방법에서 나머지</span><br><span class="line">2. Only keyword</span><br><span class="line">3. Variable Positional</span><br><span class="line">4. Variable Keyword</span><br><span class="line">5. Unpacking (벗겨내기, list 쪼개기)</span><br><span class="line">6. Unpacking (dictionary)</span><br><span class="line">7. import에서 모두</span><br></pre></td></tr></table></figure><br><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(x:int)</span> -&gt; int:</span></span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">xx.__annotations__</span><br><span class="line">&#123;<span class="string">'x'</span>: int, <span class="string">'return'</span>: int&#125;</span><br><span class="line"><span class="comment"># 타입을 표시해줌</span></span><br><span class="line"></span><br><span class="line">xx(<span class="number">3.0</span>)</span><br><span class="line">xx(<span class="string">'hi'</span>)</span><br><span class="line"><span class="comment"># 둘다 가능</span></span><br></pre></td></tr></table></figure><br><h3 id="인자에-default값-넣는-꼼수"><a href="#인자에-default값-넣는-꼼수" class="headerlink" title="인자에 default값 넣는 꼼수"></a>인자에 default값 넣는 꼼수</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> n</span><br><span class="line">a(n <span class="keyword">or</span> <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 인자에 디폴트를 사용할 수는 없지만 이렇게 흉내는 낼 수 있다</span></span><br></pre></td></tr></table></figure><br><h2 id="식의-종류"><a href="#식의-종류" class="headerlink" title="식의 종류"></a>식의 종류</h2><ol><li><code>조건식</code></li></ol><ul><li>3 if a &gt; 0 else 6</li></ul><ol start="2"><li><code>함수식</code> (lambda: 익명함수)</li></ol><ul><li>(lambda x: x + 1)(2)</li><li>(lambda x, y=1: x + y)(3)</li><li>(lambda * x: x)(4,1,2)</li><li>list(map(lambda a:a+8, [1,2,3,4,5]))</li><li>lambda 파라미터 : return 값</li></ul><ol start="3"><li><code>반복식</code></li></ol><ul><li>(x for x in range(10))</li><li>Haskell에서 가져옴</li></ul><p><img src="https://user-images.githubusercontent.com/33630505/60572427-8b657d80-9db0-11e9-82ae-5318f85e08b8.JPG" alt="haskell_comprehension"><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 조건식 + 반복식</span></span><br><span class="line"></span><br><span class="line">integer = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">44</span>,<span class="number">-34</span>,<span class="number">-42</span>,<span class="number">14</span>]</span><br><span class="line">[<span class="string">'양수'</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">else</span> (<span class="string">'음수'</span> <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> integer]</span><br><span class="line">list(map(<span class="keyword">lambda</span> i: <span class="string">'양수'</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">else</span> (<span class="string">'음수'</span> <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>), integer))</span><br><span class="line"></span><br><span class="line">: [<span class="string">'양수'</span>, <span class="string">'음수'</span>, <span class="string">'양수'</span>, <span class="number">0</span>, <span class="string">'양수'</span>, <span class="string">'음수'</span>, <span class="string">'음수'</span>, <span class="string">'양수'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 조건식 + 반복식 vs 반복식 + 조건식</span></span><br><span class="line"></span><br><span class="line">li1 = [x <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">li1</span><br><span class="line">: [<span class="number">0</span>, <span class="literal">None</span>, <span class="number">2</span>, <span class="literal">None</span>, <span class="number">4</span>, <span class="literal">None</span>, <span class="number">6</span>, <span class="literal">None</span>, <span class="number">8</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">li2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">li2</span><br><span class="line">: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 조건식이 왼쪽에 있을때 오른쪽에 있을때 사용법에 있어서 차이가 있으니 조심하자</span></span><br><span class="line"><span class="comment"># 기본적으로 파이썬은 왼쪽에서 오른쪽으로 실행!</span></span><br></pre></td></tr></table></figure><br><p><code>Python Tip2</code>  Local, Argumentation은 stack에 저장되고 Parameter는 heap영역에 들어간다<br><br></p><p><code>Python Tip3</code>  default값에 mutable값을 넣으면 값을 공유한다?, 값이 고정된다?</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.time()</span><br><span class="line"><span class="number">1557232234.682229</span> <span class="comment"># 수행할 때마다 값이 변한다</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(t=time.time<span class="params">()</span>)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> t</span><br><span class="line">a()</span><br><span class="line"><span class="number">1557232228.6397958</span> <span class="comment"># 값이 고정된다</span></span><br></pre></td></tr></table></figure><br><p><code>Python Tip4</code>  bytearray와 frozenset은 리터럴이 없다</p><br><h3 id="Return의-3가지-형태"><a href="#Return의-3가지-형태" class="headerlink" title="Return의 3가지 형태"></a>Return의 3가지 형태</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 자기는 변하지만 return이 None</span><br><span class="line">- ex) append, extend</span><br><span class="line">2. 자기 자신이 변하지 않고 return 값이 있다</span><br><span class="line">- ex) count, index</span><br><span class="line">3. 자기 자신도 변하고 return 값도 있다</span><br><span class="line">- ex) pop</span><br></pre></td></tr></table></figure><p><code>mutable</code>에 사용하는 함수중에서 return 값이 None인 경우가 종종 있다. ex) append, extend</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(y, x=[])</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x.append(y)</span><br><span class="line"><span class="comment"># 사실 엉터리 코딩 x.append(y)는 None을 리턴하고,</span></span><br><span class="line"><span class="comment"># 함수 밖에서 x 리스트에 접근도 할 수 없기 때문에 but 인자에 기본값 x list 말고</span></span><br><span class="line"><span class="comment"># 외부에 선언된 list 넣으면 list 확인 가능</span></span><br><span class="line"><span class="comment"># default값을 mutable로 사용하면 heap영역에 들어간다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1-1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list.append(<span class="number">3</span>)</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">xx(x)</span><br><span class="line">x</span><br><span class="line">: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(y, x=[])</span>:</span></span><br><span class="line">   x.append(y)</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># xx함수를 호출 할때마다 x 리스트가 계속 변한다</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(y)</span>:</span></span><br><span class="line">   x = []</span><br><span class="line">   x.append(y)</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># xx함수를 호출하면 원소가 하나인 리스트 반환</span></span><br></pre></td></tr></table></figure><br><h2 id="파이썬-변수의-유효-범위-Scope"><a href="#파이썬-변수의-유효-범위-Scope" class="headerlink" title="파이썬 변수의 유효 범위(Scope)"></a>파이썬 변수의 유효 범위(Scope)</h2><blockquote><p>유효 범위 규칙(Scope Rule)은 변수에 접근 가능한 범위, 변수가 유효한 문맥범위를 정하는 규칙</p></blockquote><h3 id="LEGB"><a href="#LEGB" class="headerlink" title="LEGB"></a>LEGB</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. Local : 함수 내 정의된 지역변수</span><br><span class="line">2. Enclosing Function Local : 함수를 내포하는 또다른 함수 영역</span><br><span class="line">- 함수 안의 함수가 있는 경우 함수와 함수 사이</span><br><span class="line">3. Global : 함수 영역에</span><br><span class="line">4. Built-in : 내장 영역</span><br><span class="line">- 함수 안의 함수가 있는 경우 함수안의 함수에서 함수 밖의 변수를 사용?</span><br><span class="line"></span><br><span class="line">우선순위 &#x3D;&gt; L &gt; E &gt; G &gt; B</span><br></pre></td></tr></table></figure><h4 id="LEGB-우선순위-확인-예제"><a href="#LEGB-우선순위-확인-예제" class="headerlink" title="LEGB 우선순위 확인 예제"></a>LEGB 우선순위 확인 예제</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'global'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#x = "local"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#nonlocal x</span></span><br><span class="line">        <span class="comment">#x = "nonlocal"</span></span><br><span class="line">        <span class="comment">#print("inner:", x)</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="comment">#print("outer:", x)</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><p><code>Python Tip5</code>  함수 중첩은 3번 이상 하지 않는 것이 좋다.</p><hr><h3 id="신기한-기능"><a href="#신기한-기능" class="headerlink" title="신기한 기능"></a>신기한 기능</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tips = sns.load_dataset(<span class="string">'tips'</span>)</span><br><span class="line"></span><br><span class="line">tips.head(<span class="number">10</span>) <span class="comment"># 앞에 10개만 보여줘</span></span><br><span class="line">tips.tail(<span class="number">10</span>) <span class="comment"># 뒤에 10개만 보여줘</span></span><br><span class="line">tips.sample(<span class="number">10</span>, replace = <span class="literal">True</span>) <span class="comment"># 랜덤으로 10개 보여줘</span></span><br></pre></td></tr></table></figure><h4 id="랜덤-10개"><a href="#랜덤-10개" class="headerlink" title="랜덤 10개"></a>랜덤 10개</h4><p><img src="https://user-images.githubusercontent.com/33630505/57372344-584ba700-71d0-11e9-86f1-21da17a4fc73.JPG" alt="python"></p><h4 id="추가공부"><a href="#추가공부" class="headerlink" title="추가공부"></a>추가공부</h4><ol><li>변수, 인자와 힙, 스택간의 관계</li></ol><p><code>복습 시간</code>  19시 10분 ~ 21시 40분 / 총 2시간 30분  </p><p><a id = '6th'></a></p><h1 id="2019년-5월-9일-목요일-6th"><a href="#2019년-5월-9일-목요일-6th" class="headerlink" title="2019년 5월 9일 목요일 6th"></a>2019년 5월 9일 목요일 6th</h1><h2 id="함수형-패러다임"><a href="#함수형-패러다임" class="headerlink" title="함수형 패러다임"></a>함수형 패러다임</h2><p>멀티 프로세싱 기법에 최적화된 패러다임 <br><br>빅데이터 처리시 효율적이다 <br></p><h3 id="함수형-프로그래밍의-특징"><a href="#함수형-프로그래밍의-특징" class="headerlink" title="함수형 프로그래밍의 특징"></a>함수형 프로그래밍의 특징</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 코드가 간결해진다</span><br><span class="line">- 내부 구조를 몰라도 input, output만 알면 사용 가능</span><br><span class="line">2. 수학적으로 증명이 가능하다</span><br><span class="line">3. for, while문을 자제하고 iter를 사용한다</span><br><span class="line">4. 수학적 증명이 필요하기 때문에 구현이 어렵다</span><br><span class="line">- 단, python에서는 multi paradiam이기 때문에 적절히 혼용 가능</span><br><span class="line">5. 디버깅, 테스트가 용이하다</span><br><span class="line">6. 모듈성, 결합성이 있다.</span><br><span class="line">7. mutable은 처리하지 않는다</span><br></pre></td></tr></table></figure><h2 id="반복을-줄이는-5가지-방법"><a href="#반복을-줄이는-5가지-방법" class="headerlink" title="반복을 줄이는 5가지 방법"></a>반복을 줄이는 5가지 방법</h2><p>(for문을 최대한 쓰지 않고)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. Iterator</span><br><span class="line">- 메모리 효율적, 속도 빠름</span><br><span class="line">- 실행시에 메모리 할당</span><br><span class="line">2. Generator</span><br><span class="line">3. Comprehension</span><br><span class="line">- for를 쓰지만 for를 쓰지 않는 기법</span><br><span class="line">4. Recursive function</span><br><span class="line">- 메모리 효율, 속도면에서 성능이 좋지않아 사용안함</span><br><span class="line">5. map, filter, reduce</span><br></pre></td></tr></table></figure><p><code>iterable</code> 1. iterator로 바꿀 수 있는 2. 순회, 반복가능 (요소 하나씩 뽑아냄) 3. for 뒤에 사용할 수 있는 container</p><br><h2 id="왜-함수형-패러다임에서-반복을-줄여야-하는가"><a href="#왜-함수형-패러다임에서-반복을-줄여야-하는가" class="headerlink" title="왜 함수형 패러다임에서 반복을 줄여야 하는가?"></a>왜 함수형 패러다임에서 반복을 줄여야 하는가?</h2><p><span style="background-color: orange">for문 처럼 대입하는 것은 함수형 패러다임에 맞지 않고 수학적 증명과는 거리가 있기 때문이다. </span></p><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p><span style="background-color:orange">데이터 스트림을 표현하는 객체, next()메소드를 사용하여 다음 요소를 가져온다</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = iter(a)</span><br><span class="line">next(b)</span><br><span class="line"></span><br><span class="line">:<span class="number">1</span></span><br><span class="line"><span class="comment"># 실행할 때마다 index 0번지 부터 하나씩 뽑아낸다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iterator를 객체화하면 iterator의 성질도 잃고 객체화 하기 전 iterator의 요소 전부를 뽑아냄으로 주의!</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = iter(a)</span><br><span class="line">next(b)</span><br><span class="line">: <span class="number">1</span></span><br><span class="line">list(b) <span class="comment"># tuple(b), set(b) 다 똑같음</span></span><br><span class="line">: [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">next(b)</span><br><span class="line">: StopIteration</span><br></pre></td></tr></table></figure><h3 id="Iterator-vs-Iterable"><a href="#Iterator-vs-Iterable" class="headerlink" title="Iterator vs Iterable"></a>Iterator vs Iterable</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"></span><br><span class="line">set(dir(Iterator))-set(dir(Iterable))</span><br><span class="line">: &#123;<span class="string">'__next__'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p><span style="background-color:orange">Iterator를 생성해주는 Function, 그리고 일반 함수와 비슷해 보이지만 Generator는 yield를 포함한다는 점에서 차이가 있다</span></p><p>두 가지 방법으로 만들 수 있다</p><ol><li>generator 표현식(tuple)</li><li>yield</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple로 만들기</span></span><br><span class="line">a = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">: &lt;generator object &lt;genexpr&gt; at <span class="number">0x000001EBD55D0DE0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># yield로 만들기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">y = x()</span><br><span class="line">next(y)</span><br><span class="line"></span><br><span class="line">:<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>주의</strong> iterator와 generator는 scope를 초과하면 StopIteration 에러가 뜬다.</p><p><strong>file</strong>을 불러오면 generator 처럼 행동한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = open(<span class="string">'file.txt'</span>)</span><br><span class="line">next(x)</span><br><span class="line">: <span class="string">'안녕\n'</span></span><br><span class="line">next(x)</span><br><span class="line">: <span class="string">'반가워\n'</span></span><br></pre></td></tr></table></figure><br><h3 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a>reversed</h3><blockquote><p>원본 데이터를 뒤집고 iterator로 만드는 함수                                              </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rev = reversed([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">type(rev)</span><br><span class="line">: list_reverseiterator</span><br><span class="line"></span><br><span class="line">next(rev)</span><br><span class="line">: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">list(rev)</span><br><span class="line">: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="Iterator-vs-Generator-amp-Generator-vs-Function"><a href="#Iterator-vs-Generator-amp-Generator-vs-Function" class="headerlink" title="Iterator vs Generator &amp; Generator vs Function"></a>Iterator vs Generator &amp; Generator vs Function</h3><p><span style="color: skyblue">Iterator vs Generator</span></p><p>Iterator는 반복가능한 객체 그리고 데이터 스트림을 표현하는 객체라고 한다. <br><br>예를 들어 list는 반복가능한 자료형 즉 iterable이지만 iterator는 아니다. <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line">   print(x)</span><br></pre></td></tr></table></figure><p>이처럼 in 다음에 iterable이 오면 반복해서 요소 하나씩 꺼낼 수 있긴 하다<br><br><span style="color:red">하지만</span> list는 iterator는 아니라고 했다<br><br>그렇다면 어떻게 list가 iterator처럼 처리되는가? <br><br><span style="color:red">그 이유는</span> in 다음에 iterable이 오면 iter없이 iterator로 변환 해주기 때문이다<br><br><br>Generator는 iterator를 생성해주는 Function <br><br>따라서 Generator와 iterator는 비슷하다 <br><br>하지만 역할이 다르기 때문에 명칭도 다른것!<br><br><br><br><span style="background-color: orange">생성 방식에서 차이가 있고 Iterator는 객체 Generator는 함수</span><br><br><span style="background-color: orange">Generator는 tuple, yield로 만들고 Iterator는 liter() 함수로 만든다</span><br><br></p><br><hr><p><span style="color: skyblue">Generator vs Function</span></p><p><strong>Generator</strong> <br></p><p>Iterator를 만들어주는 것 <br><br>반복 가능한 객체를 만들어주는 함수<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">from</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment"># Cycling 기법</span></span><br><span class="line">e = generator()</span><br><span class="line">next(e)</span><br><span class="line">:<span class="number">1</span>       <span class="comment"># 실행할 때마다 1부터 4까지 계속 반복해서 return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yield는 return과 비슷하다고 생각하면 된다</span></span><br></pre></td></tr></table></figure><p>일반적으로 <strong>함수</strong>는 사용이 종료되면 결과값을 호출한 곳에 반환해주고 함수 자체를 종료 시킨 후 메모리상에서 사라진다 <br><br>하지만 yield를 사용할 경우 그 상태로 <span style="color:red">정지</span> 되며 반환 값을 next()를 호출한 쪽으로 전달한다<br><br>함수 호출이 종료되면 메모리상의 내용이 사리지지 않고 다음 함수 호출까지 대기한다<br><br>다음 함수 호출이 발생할 경우 <span style="color:red">yield이후 구문부터 실행된다</span><br><br></p><p>여기서 generator를 사용하는 <span style="color:red">이유</span>를 알 수 있다 <br><br>generator를 사용하면 호출한 값만 메모리에 할당되므로 메모리를 효율적으로 사용할 수 있게된다<br><br><br>이러한 기법을 <span style="color: orange">Lazy Evaluation</span>이라고 한다 <br><br>Lazy Evaluation은 계산 결과 값이 필요할 때까지 계산을 늦추는 방식이다 <br><br>Lazy Evaluation은 속도가 느리다는 단점이 있지만 파이썬에서는 <span style="color:red">내부적으로 최적화</span> 되어 있어 속도가 빠르다<br></p><p>참고: <a href="https://bluese05.tistory.com/56" target="_blank" rel="noopener">tistory</a><br></p><br><h3 id="Comprehension"><a href="#Comprehension" class="headerlink" title="Comprehension"></a>Comprehension</h3><p><span style="background-color:orange">Iterable한 객체를 생성하기 위한 방법</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. List</span><br><span class="line">2. Set</span><br><span class="line">3. Dictionary</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 앞에는 식이 오면된다</span></span><br><span class="line">a = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">: [(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">2</span>),......(<span class="number">9</span>,<span class="number">19</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># set</span></span><br><span class="line">b = &#123;x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> &gt; <span class="number">5</span>&#125;</span><br><span class="line">: &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># dictionary</span></span><br><span class="line">c = &#123;x:<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x&gt;<span class="number">5</span>&#125;</span><br><span class="line">: &#123;<span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">9</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># generator 표현식 (tuple)</span></span><br><span class="line">d = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">d</span><br><span class="line">: &lt;generator object &lt;genexpr&gt; at <span class="number">0x000001EBD5645DE0</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Recursive-function"><a href="#Recursive-function" class="headerlink" title="Recursive function"></a>Recursive function</h3><p>재귀함수 <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fibB(num<span class="number">-1</span>) + fibB(num<span class="number">-2</span>)</span><br><span class="line">fib(<span class="number">10</span>)  <span class="comment"># 10번째 항   (1 1 2 3 5 8 13 21 34 55)</span></span><br><span class="line">: <span class="number">55</span></span><br></pre></td></tr></table></figure><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. cycle</span><br><span class="line">2. count</span><br><span class="line">3. islice</span><br><span class="line">4. chain</span><br></pre></td></tr></table></figure><h4 id="cycle"><a href="#cycle" class="headerlink" title="cycle"></a>cycle</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> cycle(iter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])):</span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><h4 id="islice"><a href="#islice" class="headerlink" title="islice"></a>islice</h4><h4 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h4><h3 id="all-any"><a href="#all-any" class="headerlink" title="all, any"></a>all, any</h3><blockquote><p>all은 전부다 True일때 True를 반환하고 False가 하나라도 있으면 False를 반환한다. <br><br>any는 하나라도 True이면 True를 반환하고 전부다 False이면 False를 반환한다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># all</span></span><br><span class="line">all_pred = <span class="keyword">lambda</span> item, *tests: all(p(item) <span class="keyword">for</span> p <span class="keyword">in</span> tests)</span><br><span class="line">: all_pred([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], sum, max)</span><br><span class="line">: <span class="literal">True</span></span><br><span class="line">all_pred([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], sum, min)</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># any</span></span><br><span class="line">any_pred = <span class="keyword">lambda</span> item, *tests: any(p(item) <span class="keyword">for</span> p <span class="keyword">in</span> tests)</span><br><span class="line">any_pred([<span class="number">0</span>,<span class="number">1</span>], sum, min)</span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">any_pred([<span class="number">0</span>,<span class="number">1</span>], min)</span><br><span class="line">: <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><code>복습 시간</code>  18시 ~  19시 50분/ 총 1시간 50분</p><p><a id = '7th'></a></p><h1 id="2019년-5월-10일-금요일-7th"><a href="#2019년-5월-10일-금요일-7th" class="headerlink" title="2019년 5월 10일 금요일 7th"></a>2019년 5월 10일 금요일 7th</h1><p><span style="background-color:orange">함수의 중첩으로 가능한 것들</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Closure</span><br><span class="line">2. Decorator</span><br></pre></td></tr></table></figure><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><blockquote><p>함수를 중첩시키고 함수를 리턴하는 함수. 클로저는 보통 함수를 쉽게 변형할 수 있는 기법이다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addd</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> addd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3더해주는 함수</span></span><br><span class="line">add(<span class="number">3</span>)(<span class="number">10</span>)</span><br><span class="line">: <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4더해주는 함수</span></span><br><span class="line">add(<span class="number">4</span>)(<span class="number">10</span>)</span><br><span class="line">: <span class="number">14</span></span><br></pre></td></tr></table></figure><p>Closure: <a href="https://nachwon.github.io/closure/" target="_blank" rel="noopener">github blog</a></p><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><blockquote><p>함수나 클래스를 추가, 수정해서 재사용 가능하게 해주는 것 <br><br>데코레이터를 사용하려면 함수 중첩이 있어야 하고, 함수를 파라미터로 받아야 하고, 중첩된 inner 함수를 return 해야 한다.  </p></blockquote><h3 id="예제를-통한-decorator-이해하기"><a href="#예제를-통한-decorator-이해하기" class="headerlink" title="예제를 통한 decorator 이해하기"></a>예제를 통한 decorator 이해하기</h3><h4 id="중첩-X-함수-리턴-X-일때"><a href="#중첩-X-함수-리턴-X-일때" class="headerlink" title="중첩 X, 함수 리턴 X 일때"></a>중첩 X, 함수 리턴 X 일때</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(fn)</span>:</span></span><br><span class="line">    id=input(<span class="string">'id: '</span>)</span><br><span class="line">    <span class="keyword">if</span>(id==<span class="string">'jh'</span>):</span><br><span class="line">        print(<span class="string">"jh님 안녕하세요"</span>)</span><br><span class="line">        fn()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'존재하지 않는 회원입니다'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'jh님의 home page 입니다'</span>)</span><br><span class="line"></span><br><span class="line">id: [jh                       ]  <span class="comment"># home 함수 선언시 input창이 뜬다</span></span><br><span class="line"></span><br><span class="line">: id: jh</span><br><span class="line">  jh님 안녕하세요</span><br><span class="line">  jh님의 home page 입니다</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다른 아이디를 입력했을 때</span></span><br><span class="line">id: [hj                       ]</span><br><span class="line"></span><br><span class="line">: id: hj</span><br><span class="line">  존재하지 않는 회원입니다.</span><br><span class="line"></span><br><span class="line">callable(home)</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line">callable(login_check)</span><br><span class="line">: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>결론 데코레이터 아님.</p></blockquote><h4 id="함수-return-X-문자열-return일-때"><a href="#함수-return-X-문자열-return일-때" class="headerlink" title="함수 return X, 문자열 return일 때"></a>함수 return X, 문자열 return일 때</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        id = input(<span class="string">'id: '</span>)</span><br><span class="line">        <span class="keyword">if</span>(id==<span class="string">'jh'</span>):</span><br><span class="line">            print(<span class="string">"jh님 안녕하세요"</span>)</span><br><span class="line">            fn()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"존재하지 않는 회원입니다"</span>)</span><br><span class="line">    print(<span class="string">'ㅋㅋㅋㅋ'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'jh님의 home page 입니다'</span>)</span><br><span class="line"></span><br><span class="line">: ㅋㅋㅋㅋ</span><br><span class="line"></span><br><span class="line">callable(home)</span><br><span class="line">: <span class="literal">False</span></span><br><span class="line">callable(login_check)</span><br><span class="line">: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>결론 당연한 결과지만 login_check함수 안에서 inner 함수를 return 하지 않으면 inner함수를 사용할 방법이 없다. <br><br>그리고 함수위에 ‘@login_check’을 사용하면 @밑으로 함수선언을 하게되면 @밑 함수는 ‘@login_check’의 인자로 들어가게 된다.<br><br>결국 ‘@함수이름’의 return값이 함수이름이 아니게되면 @밑에 선언된 함수는 not callable이게 된다.<br>따라서 데코레이터 아님.</p></blockquote><h4 id="함수-return-X-함수-호출-return-일때"><a href="#함수-return-X-함수-호출-return-일때" class="headerlink" title="함수 return X, 함수 호출 return 일때"></a>함수 return X, 함수 호출 return 일때</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        id = input(<span class="string">'id: '</span>)</span><br><span class="line">        <span class="keyword">if</span>(id==<span class="string">'jh'</span>):</span><br><span class="line">            print(<span class="string">"jh님 안녕하세요"</span>)</span><br><span class="line">            fn()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"존재하지 않는 회원입니다"</span>)</span><br><span class="line">    <span class="keyword">return</span> inner()</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"jh님의 home page 입니다"</span>)    </span><br><span class="line">: id: [jh                       ]    </span><br><span class="line">  id: jh</span><br><span class="line">  jh님 안녕하세요</span><br><span class="line">  jh님의 home page 입니다</span><br><span class="line"></span><br><span class="line">: id: [hj                       ]   </span><br><span class="line">  id: hj</span><br><span class="line">  존재하지 않는 회원입니다</span><br><span class="line"></span><br><span class="line">callable(home)</span><br><span class="line">: <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>함수 return X, 문자열 return일 때와 결과가 같다. 이로써 ‘@login_check’을 사용하면 밑에 선언된 함수는 <br><br>login_check함수의 인자로 들어가 login_check함수의 return 값을 반환한다는 사실이 확실해졌다.<br><br>login_check함수의 return 값은 inner함수 호출이고 inner함수의 호출값의 return은 None 이기 때문에 <br><br>home함수의 return 값은 None <br><br>따라서 데코레이터 아님.</p></blockquote><h4 id="어노테이션-X"><a href="#어노테이션-X" class="headerlink" title="어노테이션 X"></a>어노테이션 X</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        id = input(<span class="string">'id: '</span>)</span><br><span class="line">        <span class="keyword">if</span>(id==<span class="string">'jh'</span>):</span><br><span class="line">            print(<span class="string">"jh님 안녕하세요"</span>)</span><br><span class="line">            fn()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"존재하지 않는 회원입니다"</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"jh님의 home page 입니다"</span>)</span><br><span class="line"></span><br><span class="line">home()</span><br><span class="line">: jh님의 home page 입니다</span><br><span class="line"></span><br><span class="line">login_check(home)()</span><br><span class="line">:</span><br><span class="line">id: jh</span><br><span class="line">jh님 안녕하세요</span><br><span class="line">jh님의 home page 입니다</span><br><span class="line"></span><br><span class="line">login_check(home)()</span><br><span class="line">:</span><br><span class="line">id: hj</span><br><span class="line">존재하지 않는 회원입니다</span><br></pre></td></tr></table></figure><blockquote><p>결론 home함수는 따로 작동하기 때문에 기능확장이라 할 수 없어서 데코레이터가 아님.</p></blockquote><h4 id="함수-파라미터-O-함수-중첩-함수-이름-return-O"><a href="#함수-파라미터-O-함수-중첩-함수-이름-return-O" class="headerlink" title="함수 파라미터 O, 함수 중첩, 함수 이름 return O"></a>함수 파라미터 O, 함수 중첩, 함수 이름 return O</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        id = input(<span class="string">'id: '</span>)</span><br><span class="line">        <span class="keyword">if</span>(id==<span class="string">'jh'</span>):</span><br><span class="line">            print(<span class="string">"jh님 안녕하세요"</span>)</span><br><span class="line">            fn()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"존재하지 않는 회원입니다"</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"jh님의 home page 입니다"</span>)</span><br><span class="line"></span><br><span class="line">home()</span><br><span class="line">: id [jh        ]</span><br><span class="line">  id: jh</span><br><span class="line">  jh님 안녕하세요</span><br><span class="line">  jh님의 home page 입니다</span><br><span class="line">home()</span><br><span class="line">: id [hj        ]</span><br><span class="line">  id: hj</span><br><span class="line">  존재하지 않는 회원입니다</span><br></pre></td></tr></table></figure><blockquote><p>결론 데코레이터 맞음! (home함수에 login_check함수 기능 추가)</p></blockquote><h4 id="데코레이터-기능-수정하기"><a href="#데코레이터-기능-수정하기" class="headerlink" title="데코레이터 기능 수정하기"></a>데코레이터 기능 수정하기</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans_odd</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'홀수 입니다'</span>)</span><br><span class="line">result = fn(x+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@trans_odd</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (x%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"홀수 입니다"</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"홀수가 아닙니다"</span></span><br><span class="line">odd(<span class="number">4</span>)</span><br><span class="line">: <span class="string">'홀수가 아닙니다'</span></span><br><span class="line">odd(<span class="number">3</span>)</span><br><span class="line">: <span class="string">'홀수 입니다'</span></span><br></pre></td></tr></table></figure><h2 id="Closure-vs-Decorator"><a href="#Closure-vs-Decorator" class="headerlink" title="Closure  vs  Decorator"></a>Closure  vs  Decorator</h2><h2 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h2><blockquote><p>부분을 대체하여 클로저 처럼 사용하는 함수</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">add3 = partial(add,<span class="number">3</span>)  <span class="comment"># add의 두개 인자중 하나를 3으로 대체</span></span><br><span class="line">add3(<span class="number">7</span>)</span><br><span class="line">: <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>Python Tip1</strong> locals(), globals() 함수는 함수내에서 사용하면 메모리상에 올라간 local, global 변수를 각각 확인 할 수 있다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   y = <span class="number">20</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">      a = <span class="number">1</span></span><br><span class="line">      print(locals())</span><br><span class="line">      b = <span class="number">2</span></span><br><span class="line">   <span class="keyword">return</span> b()</span><br><span class="line">a()</span><br><span class="line">:&#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># b = 2는 print문 출력 이후에 있기 때문에 locals에 포함되있지 않다</span></span><br><span class="line"> 선언할 때는 모든 것이 메모리에 할당 되지만 실행할때는 순서대로 할당되기 때문이다</span><br></pre></td></tr></table></figure><h2 id="name-namespace-module-그리고-name"><a href="#name-namespace-module-그리고-name" class="headerlink" title="name, namespace, module 그리고 name"></a>name, namespace, module 그리고 <strong>name</strong></h2><p><kbd>name</kbd>은 말 그대로 이름을 붙여주는 즉, 변수명 혹은 식별자라고 생각하면 된다<br><br><kbd>module</kbd>은 파이썬 코드를 담고 있는 파일이다, 좀 더 자세하게 말하면 클래스, 함수, 변수명의 리스트가 들어 있다고 보면 된다 <br><br><kbd>namespace</kbd>는 names(변수명들)을 담을 수 있는 공간이다, 모듈은 자신의 유일한 namespace를 갖고 있으며 모듈의 namespace이름은 보통 모듈이름과 같다. 그래서 동일한 모듈내에서 동일한 이름을 가지는 클래스나 함수를 정의할 수 없다. 또한 모듈은 각각 독립적이기 때문에 동일한 이름을 갖는 모듈을 갖을 수 없다. <br></p><br>> import를 통해 namespace와 __name__에 대해서 자세히 알아보자<h3 id="import-방법은-3가지가-있다"><a href="#import-방법은-3가지가-있다" class="headerlink" title="import 방법은 3가지가 있다"></a>import 방법은 3가지가 있다</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. import &lt;module_name&gt;</span><br><span class="line">- 모듈의 name을 prefix로 사용함으로써 모듈의 namespace에 접근할 수 있다</span><br><span class="line">2. from &lt;module_name&gt; import &lt;name,&gt;</span><br><span class="line">3. from &lt;module_name&gt; import *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">import</span> &lt;module_name&gt;</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys는 모듈, path는 sys모듈의 namespace에 담겨 있는 name</span></span><br><span class="line"><span class="comment"># 모듈 prefix sys를 통해 namespace path에 접근</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">from</span> &lt;module_name&gt; <span class="keyword">import</span> &lt;name,&gt;</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> path</span><br><span class="line">path</span><br><span class="line">sys.path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모듈 prefix를 사용하거나 사용하지 않고 둘다 접근 가능하다</span></span><br><span class="line"><span class="comment"># 단, del path를 하거나 name을 재정의 하게되면 모듈의 name을 사용할 수 없게된다</span></span><br><span class="line"><span class="comment"># 몇개의 name만 필요하고 name를 명확하게 구분할 수 있는 상황에서는 써도 무관하다</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">from</span> &lt;module_name&gt; <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span>*</span><br><span class="line">sys.path</span><br><span class="line">path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2번방법과 동일, 그러나 모듈에 있는 모든 name을 직접 현재 namespace로 가져오게된다</span></span><br><span class="line"><span class="comment"># 말할 것도 없이 전체를 import하면 name을 쓰는데 제약이 많이 생긴다</span></span><br></pre></td></tr></table></figure><p>Namespace Binding: <a href="https://www.slideshare.net/dahlmoon/binding-20160229-58415344" target="_blank" rel="noopener">slideshare</a><br><br><br></p><p><strong><strong>name</strong></strong><br></p><p>import를 하면 해당 모듈의 names를 namespace에 dict타입으로 할당하는 것을 보았다<br><br>이때 import한 모듈의 <strong>name</strong>은 파일명이 된다 <br><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line">sys.__dict__  <span class="comment"># namespace 불러오기</span></span><br><span class="line"></span><br><span class="line"><span class="string">'__name__'</span>: <span class="string">'sys'</span>,</span><br><span class="line"> <span class="string">'__doc__'</span>: <span class="string">"This module..........</span></span><br></pre></td></tr></table></figure><br>이번엔 import를 하지 않고 main script(최상위 스크립트 환경)에서 직접 shell에서 실행하는 경우에 python interpreter가 최초로 파일을 읽어 실행하는 경우를 생각해보자 <br>이때는 모듈이름 해당 파일 이름이 아닌 __main__가 된다 <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__name__</span><br><span class="line"></span><br><span class="line"><span class="string">'__main__'</span></span><br></pre></td></tr></table></figure><br><blockquote><p>따라서 만약에 ‘이 파일이 interpreter에 의해 실행되는 경우라면’ 이라는 의미를 갖는다</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'This program is being run by itself'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'I am being imported from another module'</span></span><br></pre></td></tr></table></figure><p><strong>name</strong>의 의미 : <a href="https://pinocc.tistory.com/175" target="_blank" rel="noopener">tistory</a><br></p><h2 id="Python의-모든-것은-Object-객체-이다"><a href="#Python의-모든-것은-Object-객체-이다" class="headerlink" title="Python의 모든 것은 Object(객체)이다"></a>Python의 모든 것은 Object(객체)이다</h2><p><span style="background-color: orange">Object</span>는 python이 data를 추상화 한 것이다<br><br>쉽게말해 프로그래밍으로 구현될 대상, 현실에 존재하거나 상상가능한 대상을 특징지어 구현될 대상이라고 할 수 있다<br><br>그리고 python 프로그램의 모든 data는 객체나 객체간의 관계로 표현된다<br></p><blockquote><p>John von neumann’s stored program computer model을 따르고 또 그 관점에서 코드 역시 객체로 표현된다</p></blockquote><h3 id="객체를-구현하려면"><a href="#객체를-구현하려면" class="headerlink" title="객체를 구현하려면?"></a>객체를 구현하려면?</h3><p>객체를 구현하기 위한 설계도 및 틀을 <span style="color:red">Class(클래스)</span>라고한다<br><br><br><br>Class를 실제로 프로그래밍할때 사용하려면 클래스 선언, 메모리 할당, mapping 3가지 단계가 필요하다<br><br>이해를 돕기 위해 java의 경우를 예로 들겠다 <br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test.Add;                                 <span class="comment">// 1. 선언된 클래스 import (클래스 선언)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Add add = <span class="keyword">null</span>;                  <span class="comment">// 참조변수 선언</span></span><br><span class="line">add = <span class="keyword">new</span> Add();                 <span class="comment">// 참조변수에 인스턴스에 대한 참조(참조값) 할당</span></span><br><span class="line">        <span class="comment">//Add add = new Add(); 위와 동일 // 메모리에 생성되어 저장된 객체 처리 가능</span></span><br><span class="line">                                 <span class="comment">// add는 레퍼런스 변수, 인스턴스를 가리키는값</span></span><br><span class="line"> <span class="comment">// 참조변수를 사용하여 멤버변수, 메소드 접근가능</span></span><br><span class="line">System.out.print(add.sum(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 클래스 사용을 위해 클래스 선언</span><br><span class="line">2. 클래스 사용시 메모리에 생성</span><br><span class="line">3. Index table에 참조변수와 메모리 연결을 위한 주소를 매핑하는 참조값이 만들어진다</span><br><span class="line">4. 참조값은 JVM이 자동적으로 생성</span><br><span class="line">5. 참조값을 사용하게되면 참조값에 연결된 메모리 즉, 인스턴스를 사용한다는 것</span><br><span class="line"></span><br><span class="line">참조 ≒ 참조값(Hash code)</span><br></pre></td></tr></table></figure><blockquote><p>그렇다면 Python에서 객체의 의미를 살펴보자</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(type(a))</span><br><span class="line">a = <span class="number">3.2</span></span><br><span class="line">print(type(a))</span><br><span class="line">print(a)</span><br><span class="line">a.__class__</span><br><span class="line"></span><br><span class="line">: &lt;type <span class="string">'int'</span>&gt;</span><br><span class="line">  &lt;type <span class="string">'float'</span>&gt;</span><br><span class="line">  <span class="number">3.2</span></span><br><span class="line">  int</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python에서는 선언과 할당을 동시에 하면서</span></span><br><span class="line"><span class="comment"># 할당값에 의해 변수의 타입(객체의 타입)이 결정되고 naming된 변수 이름이 인스턴스가 되는 것이다</span></span><br></pre></td></tr></table></figure><p>참조와 참조변수 : <a href="https://dohe2014.tistory.com/entry/%EC%B0%B8%EC%A1%B0reference%EC%99%80-%EC%B0%B8%EC%A1%B0%EB%B3%80%EC%88%98reference-variable" target="_blank" rel="noopener">tistory</a><br></p><p><strong>None &amp; 객체</strong> 객체가 있는지 없는지 구분할때 None을 활용해 확인할 수 있다</p><h3 id="주의"><a href="#주의" class="headerlink" title="주의"></a>주의</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">None</span> == <span class="literal">False</span></span><br><span class="line">: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># False는 0이라는 값과 매칭되어 있기 때문에 즉, 0이라는 객체이기 때문에</span></span><br><span class="line"><span class="comment"># 존재론적 관점에서 None이 아니다.</span></span><br></pre></td></tr></table></figure><p><code>복습 시간</code>  18시 22분 ~ 20시 / 총 1시간 38분</p><p><a id = '8th'></a></p><h1 id="2019년-5월-13일-월요일-8th"><a href="#2019년-5월-13일-월요일-8th" class="headerlink" title="2019년 5월 13일 월요일 8th"></a>2019년 5월 13일 월요일 8th</h1><h2 id="Class-클래스"><a href="#Class-클래스" class="headerlink" title="Class (클래스)"></a>Class (클래스)</h2><ol><li>값</li><li>메소드</li></ol><p>두 가지로 이루어져있다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self, y)</span>:</span></span><br><span class="line">        self.y = y</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">A.x      <span class="comment"># 클래스로 클래스 변수 접근</span></span><br><span class="line">a = A()  <span class="comment"># 인스턴스 생성</span></span><br><span class="line">a.x      <span class="comment"># 인스턴스 a로 x(클래스 변수)접근</span></span><br><span class="line">vars(a)  <span class="comment"># 인스턴스 변수 확인</span></span><br><span class="line">a.a(<span class="number">3</span>)   <span class="comment"># 인스턴스 a로 a() (메소드) 접근</span></span><br><span class="line">vars(a)</span><br><span class="line">A.a(a,<span class="number">5</span>) <span class="comment"># 클래스로 인스턴스 a와, 5을 인자로 넘겨주고 a함수 접근</span></span><br><span class="line">vars(a)  <span class="comment"># 인스턴스 변수는 인스턴스마다 고유로 갖을 수 있는 변수 이다</span></span><br><span class="line"></span><br><span class="line">: <span class="number">1</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  &#123;&#125;</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">  &#123;<span class="string">'y'</span>:<span class="number">3</span>&#125;</span><br><span class="line">  <span class="number">5</span></span><br><span class="line">  &#123;<span class="string">'y'</span>:<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">dir(A)</span><br><span class="line">dir(a)</span><br><span class="line"></span><br><span class="line">: [<span class="string">'__class__'</span>,<span class="string">'__dict__'</span>,.......,<span class="string">'a'</span>,<span class="string">'x'</span>]</span><br><span class="line">  [<span class="string">'__class__'</span>,<span class="string">'__dict__'</span>,.......,<span class="string">'a'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'Access class'</span>)</span><br><span class="line"></span><br><span class="line">B.b()</span><br><span class="line">b = B()</span><br><span class="line">b.b()</span><br><span class="line"></span><br><span class="line">: Access <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">  <span class="title">TypeError</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Access instacne'</span>)</span><br><span class="line"></span><br><span class="line">B.b()</span><br><span class="line">b = B()</span><br><span class="line">b.b()</span><br><span class="line">B.b(b)</span><br><span class="line"></span><br><span class="line">: TypeError</span><br><span class="line">  Access instance</span><br><span class="line">  Access instance</span><br></pre></td></tr></table></figure><br><hr><h3 id="Instance-인스턴스"><a href="#Instance-인스턴스" class="headerlink" title="Instance (인스턴스)"></a>Instance (인스턴스)</h3><p>클래스를 사용하려면 인스턴스화 해야한다 <br><br>인스턴스는 클래스의 값과 메소드에 접근이 가능하다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>                   <span class="comment"># 기본적으로 class는 object라는 클래스를 상속받는다</span></span><br><span class="line">                           <span class="comment"># 명시하지 않아도 default로 상속한다</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">'init'</span>)   <span class="comment"># object는 공통적인 속성들을 모아둔 class(추상화, 상속)</span></span><br><span class="line"><span class="comment"># init은 내부적으로 인스턴스화 할때 호출함 / 생성자라고도 한다</span></span><br><span class="line"><span class="comment"># init의 추상화 내용이 마음에 들지 않는 경우 변경 가능함(다형성)  </span></span><br><span class="line"></span><br><span class="line">A()    <span class="comment"># 클래스를 호출하면 인스턴스 객체를 반환한다</span></span><br><span class="line">: init</span><br><span class="line">  &lt;__main__.A at <span class="number">0x23b6c143a90</span>&gt;</span><br><span class="line">a = A()  <span class="comment"># 클래스를 호출함으로써 인스턴스 할당</span></span><br><span class="line">         <span class="comment"># 인스턴스화를 하면 클래스에 정의되어 있는 기능 사용할 수 있다</span></span><br></pre></td></tr></table></figure><br><h3 id="클래스-변수-vs-인스턴스-변수"><a href="#클래스-변수-vs-인스턴스-변수" class="headerlink" title="클래스 변수 vs 인스턴스 변수"></a>클래스 변수 vs 인스턴스 변수</h3><blockquote><p>클래스 변수는 모든 인스턴스들이 어트리뷰트와 메서드를 공유한다. <br><br>반면 인스턴스 변수는 각 인스턴스 별로 개별적인 값을 갖는다. <br><br>인스턴스는 클래스내에 정의된 모든 것을 사용할 수 있지만, <br><br>클래스는 여러 인스턴스를 생성하기 때문에 인스턴스 변수에 접근 할 수 없다.</p></blockquote><h3 id="예제로-살펴보기"><a href="#예제로-살펴보기" class="headerlink" title="예제로 살펴보기"></a>예제로 살펴보기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">1</span>                  <span class="comment"># class variable, attribute</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, y)</span>:</span></span><br><span class="line">self.y = y     <span class="comment"># instance variable, attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 접근 예제</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        sum = x + y</span><br><span class="line">self.sum = <span class="number">20</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">aa = A()</span><br><span class="line"></span><br><span class="line">a.add(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">aa.add(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">A.add(a, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">vars(a)</span><br><span class="line">a.sum</span><br><span class="line">aa.sum = <span class="number">0</span></span><br><span class="line">vars(aa)</span><br><span class="line"></span><br><span class="line">A.sum  </span><br><span class="line"></span><br><span class="line">: <span class="number">7</span></span><br><span class="line">  <span class="number">11</span></span><br><span class="line">  <span class="number">30</span></span><br><span class="line">  &#123;<span class="string">'sum'</span>:<span class="number">20</span>&#125;</span><br><span class="line">  <span class="number">20</span></span><br><span class="line">  &#123;<span class="string">'sum'</span>: <span class="number">0</span>&#125;</span><br><span class="line">  AttributeError   <span class="comment"># 클래스로 인스턴스 변수에 접근했기 때문</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(self,x, y)</span>:</span></span><br><span class="line">        sum = x+y</span><br><span class="line">        self.sum = <span class="number">20</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.sum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">B.sum(b, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b.sum</span><br><span class="line">B.sum</span><br><span class="line">vars(b)</span><br><span class="line">vars(B)</span><br><span class="line">dir(b)</span><br><span class="line"></span><br><span class="line">: <span class="number">3</span></span><br><span class="line">  <span class="number">7</span></span><br><span class="line">  <span class="number">20</span></span><br><span class="line">  &lt;function __main__.B.sum(self,x,y)&gt;</span><br><span class="line">  &#123;<span class="string">'sum'</span>: <span class="number">20</span>&#125;</span><br><span class="line">  mappingproxy(&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>,</span><br><span class="line">              <span class="string">'x'</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">'y'</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">'sum'</span>: &lt;function __main__.B.sum(self, x, y)&gt;,</span><br><span class="line">      .....&#125;)</span><br><span class="line">  [<span class="string">'__class__'</span>, ......, <span class="string">'sum'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 클래스변수가 mutable 일때 주의</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    tricks = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line">a = C(<span class="string">'jh'</span>)</span><br><span class="line">b = C(<span class="string">'other'</span>)</span><br><span class="line"></span><br><span class="line">a.add_trick(<span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line">a.tricks</span><br><span class="line">b.tricks</span><br><span class="line"></span><br><span class="line">: [<span class="string">'first'</span>]</span><br><span class="line">  [<span class="string">'first'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 인스턴스 별로 개별 리스트 변수를 만들고 싶다면 인스턴스 변수에 리스트 할당해야함</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.tricks = []</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line">a = D(<span class="string">'jh'</span>)</span><br><span class="line">b = D(<span class="string">'other'</span>)</span><br><span class="line"></span><br><span class="line">a.add_trick(<span class="number">1</span>)</span><br><span class="line">a.add_trick(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">b.add_trick(<span class="string">'first'</span>)</span><br><span class="line">b.add_trick(<span class="string">'second'</span>)</span><br><span class="line"></span><br><span class="line">a.tricks</span><br><span class="line">b.tricks</span><br><span class="line"></span><br><span class="line">: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">  [<span class="string">'first'</span>, <span class="string">'second'</span>]</span><br></pre></td></tr></table></figure><br><p><strong>실행 순서</strong> 메소드와 변수가 이름이 같을때 변수를 먼저 접근하기 때문에 주의 해야 한다</p><p><strong>self</strong> 는 인스턴스라고 생각하면 된다. 메소드의 인자로 self가 있는건 self 자리에 인스턴스를 인자로 넘겨받아 해당 함수를 접근해서 사용 가능하게 된다는 의미로 받아들이면 된다</p><br><hr><p><strong>Type casting</strong> a = list({1,2,3}) 리스트 클래스의 괄호 안에 dict타입을 넣게 되면 리스트 타입으로 변경된다. 파이썬에서는 타입 변경이 없기 때문에 타입 변경시에는 클래스 안에 인자로 넣어 인스턴스화 하여 바꿔준다. 단, 모든것이 되는것은 아니다  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = int(<span class="string">'0'</span>)</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">: <span class="number">0</span></span><br><span class="line"><span class="comment"># 원래는 문자를 정수형으로 타입 변환이 되지 않지만</span></span><br><span class="line"><span class="comment"># 문자형으로 된 숫자를 정수형 타입으로 변환되는 경우가 몇가지 있다</span></span><br><span class="line"><span class="comment"># 이는 init으로 바꿀 수 있게 해둔 것이다 (특수한 경우이다)</span></span><br><span class="line"></span><br><span class="line">b = int(<span class="string">'b'</span>)</span><br><span class="line">: ValueError</span><br><span class="line"><span class="comment"># invalid literal for int() with base 10: 'b'</span></span><br><span class="line"><span class="comment"># 기본적으로 문자를 정수형으로 바꿀 수 없다.</span></span><br></pre></td></tr></table></figure><br><h3 id="클래스-밖에-있는-함수를-클래스의-지역-변수에-할당-할-수-있다"><a href="#클래스-밖에-있는-함수를-클래스의-지역-변수에-할당-할-수-있다" class="headerlink" title="클래스 밖에 있는 함수를 클래스의 지역 변수에 할당 할 수 있다"></a>클래스 밖에 있는 함수를 클래스의 지역 변수에 할당 할 수 있다</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    self.array.pop(x)</span><br><span class="line">    <span class="keyword">return</span> self.array</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.array = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.array.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add5</span><span class="params">(self, x)</span>:</span>   <span class="comment"># 클래스 내에 다른 함수를 호출 가능</span></span><br><span class="line">        self.add(x+<span class="number">5</span>)</span><br><span class="line"><span class="keyword">return</span> self.array</span><br><span class="line"></span><br><span class="line">    pop_method = out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array = Array()</span><br><span class="line"></span><br><span class="line">array.add(<span class="number">1</span>)</span><br><span class="line">array.add(<span class="number">2</span>)</span><br><span class="line">array.add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">vars(array)</span><br><span class="line">: &#123;<span class="string">'array'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"></span><br><span class="line">array.pop_method(<span class="number">0</span>)</span><br><span class="line">: [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">vars(array)</span><br><span class="line">: &#123;<span class="string">'array'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"></span><br><span class="line">array.array</span><br><span class="line">: [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array.add5(<span class="number">1</span>)</span><br><span class="line">: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><br><h3 id="classmethod-staticmethod"><a href="#classmethod-staticmethod" class="headerlink" title="classmethod, staticmethod"></a>classmethod, staticmethod</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,y)</span>:</span></span><br><span class="line">        self.y = y   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getxx</span><span class="params">(cls)</span>:</span>  <span class="comment"># class method</span></span><br><span class="line">        print(<span class="string">'a'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod    # 똑같이 함수 처럼 사용</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><h3 id="객체-지향의-특징"><a href="#객체-지향의-특징" class="headerlink" title="객체 지향의 특징"></a>객체 지향의 특징</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 캡슐화</span><br><span class="line">- 재활용 가능</span><br><span class="line">- 파이썬에서는 기본적으로 외부에서 클래스 접근 가능</span><br><span class="line">- descriptor로 클래스 접근을 막을 수도 있다</span><br><span class="line">2. 추상화</span><br><span class="line">- 구체적인것과 추상적인 것을 분리시킨다</span><br><span class="line">- 특징을 뽑아 객체로 구현</span><br><span class="line">3. 상속</span><br><span class="line">- 추상화의 반대</span><br><span class="line">- 추상화한 클래스를 물려받아 구체적으로 원하는 대로 바꾸어 사용 가능</span><br><span class="line">4. 다형성</span><br><span class="line">- 다양한 결과를 낼 수 있다</span><br></pre></td></tr></table></figure><p><strong>Python Tip1</strong> 유지보수를 해야 한다고 느끼면 객체지향 프로그래밍을, 멀티프로세스나 다양한 문제를 다양한 방식으로 풀고 디버깅을 편하게 해야 한다고 느끼면 함수형 프로그래밍을 하면 된다</p><p><strong>Python Tip2</strong> 동적으로 인스턴스 변수, 메소드 추가 가능 but 좋지 않은 방식</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dyn</span><span class="params">()</span>:</span></span><br><span class="line">name = <span class="string">'jh'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">'nothing'</span>)</span><br><span class="line">dy = Dyn()</span><br><span class="line">dyn.d()</span><br><span class="line">vars(dy)</span><br><span class="line">dy.name</span><br><span class="line">dy.name = <span class="string">'jane'</span></span><br><span class="line">dy.name</span><br><span class="line">vars(dy)</span><br><span class="line"></span><br><span class="line">: <span class="string">'nothing'</span></span><br><span class="line">  &#123;&#125;</span><br><span class="line">  <span class="string">'jh'</span></span><br><span class="line">  <span class="string">'jane'</span></span><br><span class="line">  &#123;<span class="string">'name'</span>: <span class="string">'jane'</span>&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Object-Type"><a href="#Object-Type" class="headerlink" title="Object, Type"></a>Object, Type</h2><p><span style="color: red; font-size: 30px;">Object</span>는 <span style="color: red; font-size: 30px;">최상위 객체</span><br><br><span style="color: red; font-size: 30px;">Type</span>는 <span style="color: red; font-size: 30px;">meta class</span><br></p><br><hr><h3 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h3><h4 id="1-camelCase-카멜-표기법"><a href="#1-camelCase-카멜-표기법" class="headerlink" title="1. camelCase(카멜 표기법)"></a>1. camelCase(카멜 표기법)</h4><p>첫 문자는 소문자로 표기하고, 그 다음 단어의 첫 시작은 대문자로 표기한다 <br><br>원래는 첫 문자는 대,소문자 구분없었지만 요즘은 소문자로 쓰는 방법이 카멜 표기법 이다<br><br>ex) helloWorld<br><br><br><strong>함수명은 이 표기법을 권장한다. 단 ,소문자 + underscore를 쓰기도 한다</strong></p><h4 id="2-PascalCase-파스칼-표기법"><a href="#2-PascalCase-파스칼-표기법" class="headerlink" title="2. PascalCase(파스칼 표기법)"></a>2. PascalCase(파스칼 표기법)</h4><p>첫 문자를 대문자로 표기하고, 그 다음 단어의 첫 시작도 대문자로 표기한다 <br><br>ex) HelloWorld<br><br><br><strong>클래스명은 이 표기법을 권장한다. 단, 이미 만들어져 있는 클래스는 소문자로 시작한다</strong></p><h4 id="3-snake-case-스네이크-표기법"><a href="#3-snake-case-스네이크-표기법" class="headerlink" title="3. snake_case(스네이크 표기법)"></a>3. snake_case(스네이크 표기법)</h4><p>한 단어마다 _ (underscore)를 붙여 이어나가는 표기법이다 <br><br>ex) hello_world<br><br><br><strong>모듈은 이 표기법을 권장한다. 내장 함수도 보통 스네이크 표기법을 따른다</strong></p><h4 id="4-전부-대문자"><a href="#4-전부-대문자" class="headerlink" title="4. 전부 대문자"></a>4. 전부 대문자</h4><p>전부 대문자를 쓸 경우 상수처럼 쓴다 (관례)<br><br>ex) NUMBER = 10</p><br><p>c.f 패키지는 소문자로 구성한다</p><p><code>복습 시간</code>  18시 30분 ~ 20시 20분 / 총 1시간 50분</p><p><a id = '9th'></a></p><h1 id="2019년-5월-14일-화요일-9th"><a href="#2019년-5월-14일-화요일-9th" class="headerlink" title="2019년 5월 14일 화요일 9th"></a>2019년 5월 14일 화요일 9th</h1><h2 id="Design-pattern"><a href="#Design-pattern" class="headerlink" title="Design pattern"></a>Design pattern</h2><p>20 ~ 30가지가 있다 <br><br>주로 사용하는 coding 방식, 웹에서 주로 이용 (MVC 패턴 같은 것들)</p><h2 id="Class-inheritance"><a href="#Class-inheritance" class="headerlink" title="Class inheritance"></a>Class inheritance</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span>:</span></span><br><span class="line">    colour = <span class="string">'brown'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, status)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line">        self.status = status</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod              </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">knock</span><span class="params">(cls)</span>:</span>       </span><br><span class="line">        print(<span class="string">"Knock!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paint</span><span class="params">(cls, colour)</span>:</span>  <span class="comment"># 클래스, 인스턴스 모두 사용 가능하고</span></span><br><span class="line">        cls.colour = colour  <span class="comment"># 클래스 변수 바꾼다</span></span><br><span class="line">                             <span class="comment"># 클래스로 접근한다 / 클래스만 값에 접근 가능</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paint2</span><span class="params">(cls, number)</span>:</span>  <span class="comment"># number는 인스턴스 변수</span></span><br><span class="line">        cls.number = number   <span class="comment"># classmethod는 클래스 변수만 바꿀 수 있다</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.status = <span class="string">'open'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.status = <span class="string">'closed'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityDoor</span><span class="params">(Door)</span>:</span>      </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Door.knock()</span><br><span class="line">door = Door(<span class="number">1</span>, <span class="string">'open'</span>)</span><br><span class="line">vars(door)</span><br><span class="line">door.knock()</span><br><span class="line">door.paint(<span class="string">'red'</span>)  <span class="comment"># 인스턴스로 클래스 변수 바꿀 수 있음 (@classmethod)</span></span><br><span class="line">door.colour</span><br><span class="line">Door.colour</span><br><span class="line">door.paint2(<span class="number">2</span>)</span><br><span class="line">door.number</span><br><span class="line">Door.paint2(<span class="number">3</span>)     <span class="comment"># 클래스만 인스턴스 변수 바꿀 수 있음 (@classmethod)</span></span><br><span class="line">door.number</span><br><span class="line">Door.number</span><br><span class="line"></span><br><span class="line">: Knock!</span><br><span class="line">  &#123;<span class="string">'number'</span>: <span class="number">1</span>, <span class="string">'status'</span>: <span class="string">'open'</span>&#125;</span><br><span class="line">  Knock!</span><br><span class="line">  <span class="string">'red'</span></span><br><span class="line">  <span class="string">'red'</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="mappingproxy"><a href="#mappingproxy" class="headerlink" title="mappingproxy"></a>mappingproxy</h3><h3 id="클래스를-상속-받으면-원래-클래스-변수를-공유한다"><a href="#클래스를-상속-받으면-원래-클래스-변수를-공유한다" class="headerlink" title="클래스를 상속 받으면 원래 클래스 변수를 공유한다"></a>클래스를 상속 받으면 원래 클래스 변수를 공유한다</h3><p><strong>※ 메모리 번지를 공유</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sdoor = SecurityDoor(<span class="number">1</span>, <span class="string">'closed'</span>)</span><br><span class="line"></span><br><span class="line">print(SecurityDoor.colour <span class="keyword">is</span> Door.colour)  </span><br><span class="line">print(sdoor.colour <span class="keyword">is</span> Door.colour)</span><br><span class="line"></span><br><span class="line">:<span class="literal">True</span></span><br><span class="line"> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Composition-합성"><a href="#Composition-합성" class="headerlink" title="Composition (합성)"></a>Composition (합성)</h2><blockquote><p>상속을 하지 않고 클래스내에 객체를 불러와 다른 클래스의 일부 기능을 사용하는 방법.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityDoor</span>:</span></span><br><span class="line">    locked = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, status)</span>:</span></span><br><span class="line">        self.door = Door(number, status) <span class="comment"># Door의 객체를 갖게 한다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.locked:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.door.open()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span>        <span class="comment"># try except와 비슷</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self.door, attr) <span class="comment"># Door의 attr를 가져와라 (상속을 비슷하게 사용)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposedDoor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number, status)</span>:</span></span><br><span class="line">        self.door = Door(number, status)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span> <span class="comment"># 없으면 가져와라</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self.door, attr) <span class="comment"># 바꾸지 않고 불러와서 사용할 때</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">hasattr(a,<span class="string">'x'</span>)</span><br><span class="line">getattr(a,<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">:<span class="literal">True</span></span><br><span class="line"> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>※ Design pattern에서는 상속대신 합성을 주로 사용한다</strong></p><p>Composition : <a href="https://www.fun-coding.org/PL&OOP1-11.html" target="_blank" rel="noopener">blog</a><br></p><h2 id="예외처리문"><a href="#예외처리문" class="headerlink" title="예외처리문"></a>예외처리문</h2><blockquote><p>Python의 철학중 양해를 구하기보다 용서를 구하기가 더 쉽다라는 것이 있다. 이처럼 Python에서 예외처리는 빠질 수 없는 부분이다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">하지만 DataScience 분야에서는 많이 사용하지는 않는다.</span><br><span class="line">웹이나 자동화 등 사용자로부터 입력을 받거나 외부 조건에 의해 오류가 많이 날 수밖에 없는 환경에서는 굉장히 중요하다</span><br><span class="line">따라서 오류가 나더라도 중단하지 않고 실행을 시켜야 하는 경우에 대비해서 예외처리문을 삽입하는 것이다</span><br></pre></td></tr></table></figure><h3 id="예외처리-구조"><a href="#예외처리-구조" class="headerlink" title="예외처리 구조"></a>예외처리 구조</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    t = a[<span class="string">'b'</span>]</span><br><span class="line"><span class="keyword">except</span>:   <span class="comment"># 에러가 나면 실행 / 에러종류에 따라 여러개 만들 수 있음</span></span><br><span class="line">    print(<span class="string">'except'</span>)</span><br><span class="line"><span class="keyword">else</span>:     <span class="comment"># 에러가 나지 않으면 실행</span></span><br><span class="line">    print(<span class="string">'else'</span>)</span><br><span class="line"><span class="keyword">finally</span>:  <span class="comment"># 에러 상관없이 실행</span></span><br><span class="line">    print(<span class="string">'finally'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># try, except가 예외처리의 필수</span></span><br></pre></td></tr></table></figure><h3 id="응용"><a href="#응용" class="headerlink" title="응용"></a>응용</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    t = a[<span class="string">'n'</span>]</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">    print(<span class="string">'all'</span>)</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    print(<span class="string">'except'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SyntaxError =&gt; except 혼자 오는 것은 마지막에 와야 한다</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    t = a[<span class="string">'n'</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> f:   <span class="comment"># 에러에 대한 상세 표시</span></span><br><span class="line">    print(f)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'except'</span>)</span><br><span class="line"></span><br><span class="line">:<span class="string">'n'</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    t = a[<span class="string">'n'</span>]</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> f:   <span class="comment"># Exception 상속(상위 에러)</span></span><br><span class="line">    print(f)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'except'</span>)</span><br></pre></td></tr></table></figure><p><strong>syntax error, runtime error</strong> syntax error는 구문오류로 실행자체가 안된다, runtime error는 실행은 되지만 값이 나오지 않는다</p><h3 id="에러를-강제로-발생시키는-방법"><a href="#에러를-강제로-발생시키는-방법" class="headerlink" title="에러를 강제로 발생시키는 방법"></a>에러를 강제로 발생시키는 방법</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span> :</span><br><span class="line"><span class="keyword">raise</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> SyntaxError</span><br><span class="line"></span><br><span class="line">x(<span class="number">3</span>)</span><br><span class="line">x(<span class="number">-3</span>)</span><br><span class="line"></span><br><span class="line">: RuntimeError</span><br><span class="line">  SyntaxError</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> a &gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line">AssertionError</span><br><span class="line"><span class="comment"># 해당 조건이 만족하지 않으면 에러 발생</span></span><br></pre></td></tr></table></figure><h2 id="다른-사람-것을-고쳐-쓰는-방법"><a href="#다른-사람-것을-고쳐-쓰는-방법" class="headerlink" title="다른 사람 것을 고쳐 쓰는 방법"></a>다른 사람 것을 고쳐 쓰는 방법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 상속후 오버라이딩</span><br><span class="line">2. 데코레이터</span><br><span class="line"></span><br><span class="line"># 오버로딩은 같은 이름의 메소드를 가지면서 매개변수 유형은 다를때 서로 다른 메소드로 간주하는 것</span><br><span class="line"># 파이썬에서는 오버로딩이 지원되지 않아 같은 이름의 메소드를 정의할경우 재할당이 된다</span><br></pre></td></tr></table></figure><p><strong>Mangling</strong> 맹글링은 소스 코드에서 선언된 함수 또는 변수의 이름을 컴파일 단계에서 컴파일러가 일정한 규칙을 가지고 변형하는 것을 말한다. 이는 보통 객체 지향에서 오버로딩시 함수의 이름이 같고 파라미터만 다를때 알아서 구별할 수 있도록 하는데 사용된다.</p><p><code>복습 시간</code>  17시 30분 ~  19시, 20시 ~ 20시 30분 / 총 2시간</p><p><a id = '10th'></a></p><h1 id="2019년-5월-16일-목요일-10th"><a href="#2019년-5월-16일-목요일-10th" class="headerlink" title="2019년 5월 16일 목요일 10th"></a>2019년 5월 16일 목요일 10th</h1><h2 id="Duck-typing"><a href="#Duck-typing" class="headerlink" title="Duck typing"></a>Duck typing</h2><p><strong>미운오리새끼 이야기에서 유래가 되어 오리가 아닌데 오리처럼 행동을 하면 오리라고 간주한다는 개념이다</strong> <br><br><strong>타입을 미리 정하지 않고 실행되었을 때 해당 Method들을 확인하여 타입을 정한다</strong><br></p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>타입에 대해 자유롭다</li><li>상속을 하지 않아도 상속을 한것처럼 클래스의 메소드 사용이 가능하다</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>원치 않는 타입이 들어 갈 경우 오류가 발생할 수 있다</li><li>오류 발생시 원인을 찾기 어려울수 있다  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Airplane flying"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whale</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Whale swimming"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lift_off</span><span class="params">(entity)</span>:</span></span><br><span class="line">    entity.fly()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lift_off2</span><span class="params">(entity)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> entity.swim():</span><br><span class="line">        entity.fly()    </span><br><span class="line"></span><br><span class="line">airplane = Airplane()</span><br><span class="line">whale = Whale()</span><br><span class="line"></span><br><span class="line">lift_off(airplane)</span><br><span class="line">lift_off2(airplane)</span><br><span class="line">lift_off(whale)</span><br><span class="line">lift_off2(whale)</span><br><span class="line">: Airplane flying</span><br><span class="line">  AttributeError</span><br><span class="line">  Whale swimming</span><br><span class="line">  AttributeError</span><br></pre></td></tr></table></figure><h2 id="Duck-typing-vs-Inheritance"><a href="#Duck-typing-vs-Inheritance" class="headerlink" title="Duck typing vs Inheritance"></a>Duck typing vs Inheritance</h2><h2 id="Polymorphism-다형성"><a href="#Polymorphism-다형성" class="headerlink" title="Polymorphism(다형성)"></a>Polymorphism(다형성)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Monkey-patch"><a href="#Monkey-patch" class="headerlink" title="Monkey patch"></a>Monkey patch</h3><p>런타임상에서 함수, 메소드, 속성을 바꾸는 패치. <br><br>런타임 실행중 메모리상의 오브젝트에 적용된다. <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">len(dir(matplotlib))</span><br><span class="line">: <span class="number">109</span></span><br><span class="line"></span><br><span class="line">mat1 = set(dir(matplotlib))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">len(dir(matplotlib))</span><br><span class="line">: <span class="number">172</span></span><br><span class="line"></span><br><span class="line">mat2 = set(dir(matplotlib))</span><br><span class="line"></span><br><span class="line">mat3 = mat2 - mat1</span><br><span class="line">len(mat3)</span><br><span class="line">: <span class="number">63</span></span><br><span class="line"></span><br><span class="line">mat3</span><br><span class="line">: &#123;<span class="string">'_cm'</span>,</span><br><span class="line">   <span class="string">'_cm_listed'</span>,</span><br><span class="line">   <span class="string">'_constrained_layout'</span>,</span><br><span class="line">   <span class="string">'_contour'</span>,</span><br><span class="line">   <span class="string">'_image'</span>,</span><br><span class="line">   <span class="string">'_layoutbox'</span>,</span><br><span class="line">   <span class="string">'_mathtext_data'</span>,</span><br><span class="line">   <span class="string">'_path'</span>,</span><br><span class="line">    ......</span><br><span class="line">   <span class="string">'texmanager'</span>,</span><br><span class="line">   <span class="string">'text'</span>,</span><br><span class="line">   <span class="string">'textpath'</span>,</span><br><span class="line">   <span class="string">'ticker'</span>,</span><br><span class="line">   <span class="string">'tight_bbox'</span>,</span><br><span class="line">   <span class="string">'tight_layout'</span>,</span><br><span class="line">   <span class="string">'transforms'</span>,</span><br><span class="line">   <span class="string">'tri'</span>,</span><br><span class="line">   <span class="string">'units'</span>,</span><br><span class="line">   <span class="string">'widgets'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><p>어떤 프로그램이 실행되는 동안의 시간 <br><br>그래서 런타임 에러는 ‘어떤 프로그램이 실행되는 동안 발생하는 에러를 말한다</p><h2 id="Meta-class"><a href="#Meta-class" class="headerlink" title="Meta class"></a>Meta class</h2><p><span style="color: bluesky; font-size: 30px;">Type</span><br><br><strong>=&gt; Class 행동을 지정할 수 있다</strong> <br><br><strong>ex) 인스턴스를 한개만 만들 수 있게 지정 (싱글톤)</strong><br><br></p><h3 id="Type의-3가지-활용"><a href="#Type의-3가지-활용" class="headerlink" title="Type의 3가지 활용"></a>Type의 3가지 활용</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 메타클래스 자체로 사용할 때</span><br><span class="line">2. 객체의 클래스 이름을 알아낼 때(함수 type())</span><br><span class="line">3. 메타클래스, 클래스를 만들어줄 때</span><br></pre></td></tr></table></figure><br><h3 id="예제로-알아보기"><a href="#예제로-알아보기" class="headerlink" title="예제로 알아보기"></a>예제로 알아보기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyType</span><span class="params">(type)</span>:</span> <span class="comment"># type을 상속받아 메타클래스를 만듦</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpecialClass</span><span class="params">(metaclass=MyType)</span>:</span> <span class="comment"># 안적어주면 type 상속</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">msp = MySpecialClass()</span><br><span class="line">print(type(msp))</span><br><span class="line">print(type(MySpecialClass))</span><br><span class="line">print(type(MyType))</span><br><span class="line"></span><br><span class="line">: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">MySpecialClass</span>'&gt;   # 인스턴스 <span class="title">msp</span>의 클래스명은 <span class="title">MySpecialClass</span></span></span><br><span class="line"><span class="class">  &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">MyType</span>'&gt;           # 클래스 <span class="title">MySpecialClass</span>의 메타클래스는 <span class="title">MyType</span></span></span><br><span class="line"><span class="class">  &lt;<span class="title">class</span> '<span class="title">type</span>'&gt;                      # 메타클래스 <span class="title">MyType</span>의 메타클래스는 <span class="title">type</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 따라서 메타클래스를 만들기 위해서 <span class="title">type</span>을 상속받아야 한다</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">lambda</span> 함수식 처럼 클래스도 선언없이 사용할 수 있다</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">A = type('Integer', (int,), &#123;&#125;)  # int클래스를 상속받아 A라는 클래스를 생성</span><br><span class="line"></span><br><span class="line">a = A(<span class="number">3</span>)</span><br><span class="line">a</span><br><span class="line">type(a)</span><br><span class="line">: <span class="number">3</span></span><br><span class="line">  __main__.Integer</span><br><span class="line"></span><br><span class="line">B = type(<span class="string">'List'</span>, (list,), &#123;&#125;)</span><br><span class="line">b = B([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b</span><br><span class="line">type(b)</span><br><span class="line">: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  __main__.List</span><br><span class="line"></span><br><span class="line">C = type(<span class="string">'multi'</span>, (A, B), &#123;&#125;)</span><br><span class="line">: TypeError</span><br><span class="line"><span class="comment"># multiple bases have instance lay-out conflict</span></span><br><span class="line"><span class="comment"># =&gt; 상속받으려는 두 클래스의 속성이 비슷하여 충돌이 일어나는 경우 다중 상속이 불가하다.</span></span><br><span class="line"><span class="comment"># =&gt; 물론 해결하는 방법은 있는 듯 하다</span></span><br></pre></td></tr></table></figure><br><h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><blockquote><p>인스턴스를 하나만 만들 수 있는 클래스 <br><br>설정파일을 만드는 객체, 임시저장소 활용할때 쓴다?? <br></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Type을 상속받는다</span><br><span class="line">2. __call__ (클래스 호출할때 사용함)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.instance:</span><br><span class="line">             cls.instance = super(Singleton, cls).__call__(*args, **kw)      </span><br><span class="line">                    <span class="comment"># super().__call__(*args, **kw) 동일</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ASingleton</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = ASingleton()</span><br><span class="line">b = ASingleton()</span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 싱글톤 인스턴스 a를 만들고 다시 b를 만들었더니</span></span><br></pre></td></tr></table></figure><br><p><strong>isinstance &amp; issubclass</strong> isinstance는 어떤 객체가 특정 클래스인치 판별하는 predicate issubclass는 어떤 클래스가 특정 클래스의 상속을 받았는지 판별하는 predicate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isinstance(<span class="number">1</span>,(str,int))  <span class="comment"># 두번째 인자는 tuple도 가능</span></span><br><span class="line">issubclass(bool,int)</span><br><span class="line"></span><br><span class="line">: <span class="literal">True</span></span><br><span class="line">  <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="getattribute-vs-getattr-vs-getattr"><a href="#getattribute-vs-getattr-vs-getattr" class="headerlink" title="getattribute vs getattr vs getattr"></a><strong>getattribute</strong> vs getattr vs <strong>getattr</strong></h2><p>instance.attribute(method) <br></p><ol><li><strong>getattribute</strong> 실행 (getattr)</li><li>attribute가 없으면 attribute error</li><li><strong>getattr</strong>가 정의 되어 있으면 실행<br>instance.attribute(variable) <br></li></ol><p>참고 : <a href="https://brownbears.tistory.com/187" target="_blank" rel="noopener">tistory</a></p><h2 id="as"><a href="#as" class="headerlink" title="as"></a>as</h2><ol><li>import할때 명명법 바꾸기</li><li>예외처리문에서 에러에 대한 상세표시(설명할 수 있는 다른 객체로 변화 시켜줌)  </li><li>with 구문 사용할때 파일 내용 할당하기</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'ㅎㅎㅎㅎㅎ'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br><span class="line"></span><br><span class="line">: ㅎㅎㅎㅎㅎ</span><br><span class="line"><span class="comment"># __enter__, __exit__가 정의 되어 있으면 with 사용가능하다</span></span><br></pre></td></tr></table></figure><p><strong><strong>all</strong></strong> import할때 포함시키고 싶은 범위를 지정해주는 special method</p><p>special method : <a href="https://www.slideshare.net/dahlmoon/specialmethod-20160403-70272494" target="_blank" rel="noopener">slideshare</a>, &nbsp; <a href="https://corikachu.github.io/articles/python/python-magic-method" target="_blank" rel="noopener">git blog</a><br></p><h2 id="7가지-활용"><a href="#7가지-활용" class="headerlink" title="_ 7가지 활용"></a>_ 7가지 활용</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1. _*</span><br><span class="line">- from module import *에 의해 포함되지 않는 변수명명법</span><br><span class="line"></span><br><span class="line">2. __*__</span><br><span class="line">- magic or special method 명명법</span><br><span class="line"></span><br><span class="line">3. __*</span><br><span class="line">- mangling</span><br><span class="line">- 클래스내에 __를 사용하여 변수명을 바꿔주는 방법</span><br><span class="line">- 이때 외부에서 해당 변수에 접근을 하지 못하는 private 기능을 하는 것처럼 눈속임을 한다</span><br><span class="line"></span><br><span class="line">4. _</span><br><span class="line">- 숫자에 쓰는 언더바</span><br><span class="line">- ex) a &#x3D; 100_000</span><br><span class="line"></span><br><span class="line">5. _ (이름이 중요하지 않지만 관례상 쓸때)</span><br><span class="line"></span><br><span class="line">for i,_,k in zip([1,2,3],[4,5,6],[7,8,9]):</span><br><span class="line">    print(i,_,k)</span><br><span class="line"></span><br><span class="line">for i,_,_ in zip([1,2,3],[4,5,6],[7,8,9]):</span><br><span class="line">    print(i,_,_)   </span><br><span class="line"># 주의, 맨 마지막에 쓴 값 출력 (할당하지 않으면)</span><br><span class="line"></span><br><span class="line">6. _method</span><br><span class="line">- private</span><br><span class="line"></span><br><span class="line">7. _  맨 마지막에 쓴 값 출력 (할당하지 않으면)</span><br><span class="line">a &#x3D; 3</span><br><span class="line">a</span><br><span class="line">-</span><br><span class="line">: 3</span><br><span class="line">  3</span><br><span class="line">(8). _() # 다른 언어지원할 때</span><br><span class="line">- 라이브러리 사용해야 해서 기본 7가지로 생각</span><br></pre></td></tr></table></figure><h5 id="추가-복습"><a href="#추가-복습" class="headerlink" title="추가 복습"></a>추가 복습</h5><ol><li>다형성</li><li>추상클래스</li><li>getattribute</li></ol><p><code>복습 시간</code>  20시 ~ 22시 30분/ 총 2시간 30분</p><p><a id = '11th'></a></p><h1 id="2019년-5월-17일-금요일-11th"><a href="#2019년-5월-17일-금요일-11th" class="headerlink" title="2019년 5월 17일 금요일 11th"></a>2019년 5월 17일 금요일 11th</h1><h2 id="Multiple-inheritance-다중-상속"><a href="#Multiple-inheritance-다중-상속" class="headerlink" title="Multiple inheritance(다중 상속)"></a>Multiple inheritance(다중 상속)</h2><p>말 그대로 상속을 2개 이상을 하는 것</p><p><strong>function 기법</strong></p><ul><li>실행 순서를 직접 정할 수 있다</li><li>그러나 같은 값을 중복해서 출력하는 경우가 생긴다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'x'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        x.__init__(self)</span><br><span class="line">        print(<span class="string">'A'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        x.__init__(self)</span><br><span class="line">        print(<span class="string">'B'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        B.__init__(self)   </span><br><span class="line">        A.__init__(self)  </span><br><span class="line">        print(<span class="string">'C'</span>)</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"></span><br><span class="line">: X</span><br><span class="line">  B</span><br><span class="line">  X</span><br><span class="line">  A</span><br><span class="line">  C</span><br></pre></td></tr></table></figure><p><strong>super</strong></p><ul><li>super는 상속을 전부 실행하지 않는다</li><li>따라서 중복의 문제를 해결할 수 있다.</li><li>하지만 super와 function을 함께 사용하면 상속을 전부 실행하지 않는다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'x'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        x.__init__(self)</span><br><span class="line">        print(<span class="string">'A'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        x.__init__(self)</span><br><span class="line">        print(<span class="string">'B'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B,A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()  <span class="comment"># super는 부모 인스턴스를 반환 / 클래스 명,self 생략 가능</span></span><br><span class="line">        print(<span class="string">'C'</span>)</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">: X</span><br><span class="line">  B</span><br><span class="line">  C</span><br></pre></td></tr></table></figure><p><strong>only super</strong></p><ul><li>super는 상속 실행 순서를 자동적으로 지정해준다</li><li>super를 사용할때 전부 super를 사용하면 중복 해결, 원하는 값 출력 가능하다</li><li>다이아 문제 해결</li></ul><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'x'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'B'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'A'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'C'</span>)</span><br><span class="line">c = C()</span><br><span class="line">: x</span><br><span class="line">  B</span><br><span class="line">  A</span><br><span class="line">  C</span><br></pre></td></tr></table></figure><blockquote><p>왜 실행 순서에 따라 출력되지 않을까?</p></blockquote><h3 id="MRO-Method-Resolution-Order"><a href="#MRO-Method-Resolution-Order" class="headerlink" title="MRO (Method Resolution Order)"></a>MRO (Method Resolution Order)</h3><blockquote><p>메소드 실행 순서를 확인하는 클래스 메소드(인스턴스로 사용 불가)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C.__mro__</span><br><span class="line">C.mro()</span><br><span class="line"></span><br><span class="line">: (__main__.C, __main__.A, __main__.B, __main__.x, object)</span><br><span class="line">  [__main__.C, __main__.A, __main__.B, __main__.x, object]</span><br><span class="line">  <span class="comment"># 반환 타입이 서로 다름</span></span><br></pre></td></tr></table></figure><p><strong>실행 순서는 C -&gt; A -&gt; B -&gt; x 인데 출력 결과는 왜 반대일까?</strong></p><p><span style="background-color: orange">그 이유는 바로 super사용시 stack에 들어가기 때문이다 </span><br></p><br>## 다중 상속시 절대 에러가 나지 않게 하는 방법<p><span style="background-color: rgb(229, 68, 91)">Mixins</span><br><strong>특수한 class를 만들어 충돌이 일어나지 않게 다중 상속을 한다</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"first mixin!!!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"second mixin!!!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span><span class="params">(FirstMixin, SecondMixin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">t = TestClass()</span><br><span class="line">t.test1</span><br><span class="line">t.test2</span><br><span class="line">: first mixin!!!</span><br><span class="line">  second mixin!!!</span><br></pre></td></tr></table></figure><p><strong>다이아 문제</strong> 다중 상속시 어느 클래스의 메소드를 상속 받아야 할 지 모호한 경우</p><br>## ABC class (Abstract base class)<p><span style="color:orange">추상적인 부분은 구현하지 않고 구체적인 부분에서 구현하도록 강제하는 기법 </span><br></p><p><strong>추상 클래스 특징</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. ABC class를 사용하면 duck typing 문제점을 보완할 수 있다</span><br><span class="line">2. 상속받는 클래스는 추상메소드를 구현하지 않아도 클래스 기능은 동작한다</span><br><span class="line">3. abc 모듈을 import 해야한다</span><br></pre></td></tr></table></figure><p>추상클래스: <a href="https://wikidocs.net/16075" target="_blank" rel="noopener">wikidocs</a><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sequence 타입의 조건 (sequence type은 iterable을 상속받아 만들어졌다)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span>           </span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        print(<span class="string">'A'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B'</span>)</span><br><span class="line">a = A()</span><br><span class="line">a[<span class="number">0</span>]</span><br><span class="line">: A</span><br></pre></td></tr></table></figure><h3 id="ABCMeta"><a href="#ABCMeta" class="headerlink" title="ABCMeta"></a>ABCMeta</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span><span class="params">(metaclass = ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Y)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"></span><br><span class="line">: TypeError</span><br></pre></td></tr></table></figure><blockquote><p>오버라이딩을 하지 않는 경우 에러가 발생하기 때문에 오버라이딩을 강제시킨다</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Y)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.a()</span><br><span class="line">:<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractclassmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span><span class="params">(metaclass = ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractclassmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Y)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.a()</span><br><span class="line">: <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="abstractmethod-vs-abstractclassmethod"><a href="#abstractmethod-vs-abstractclassmethod" class="headerlink" title="abstractmethod vs abstractclassmethod"></a>abstractmethod vs abstractclassmethod</h4><p><kbd>duck typing</kbd>+<kbd>meta class</kbd>+<kbd>abc</kbd> =&gt; <kbd>강려크하다</kbd></p><h3 id="register"><a href="#register" class="headerlink" title="register"></a>register</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyABC</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">MyABC.register(tuple)  <span class="comment"># tuple처럼 사용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> issubclass(tuple, MyABC)</span><br><span class="line"><span class="keyword">assert</span> isinstance((), MyABC)</span><br></pre></td></tr></table></figure><blockquote><p>좋지 않은 방법이기 때문에 내가 만든 클래스에서만 사용하도록 권장</p></blockquote><br><h2 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a>Descriptor</h2><blockquote><p>점(.)으로 객체의 멤버를 접근할 때, 먼저 인스턴스 변수(<strong>dict</strong>)에서 멤버를 찾는다. 없을 경우 클래스 변수에서 찾는다. 클래스에서 멤버를 찾고 객체가 descriptor 프로토콜을 구현했다면 바로 멤버를 리턴하지 않고 descriptor 메소드(<strong>get</strong>, <strong>set</strong>, <strong>delete</strong>)를 호출한다</p></blockquote><p><strong>Descriptor 구현 방법 3가지</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. get, set + composition</span><br><span class="line"></span><br><span class="line">2. Properties</span><br><span class="line"></span><br><span class="line">3. Decorator</span><br></pre></td></tr></table></figure><h4 id="1-get-set-composition"><a href="#1-get-set-composition" class="headerlink" title="1. get, set + composition"></a>1. get, set + composition</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RevealAccess</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initval = None, name=<span class="string">'var'</span>)</span>:</span></span><br><span class="line">        self.val = initval</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        print(<span class="string">'Updating'</span>,self.name)</span><br><span class="line">        self.val = val + <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        print(<span class="string">'안지워짐'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>:</span></span><br><span class="line">    x = RevealAccess()</span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">m = Myclass()</span><br><span class="line">m.x</span><br><span class="line">: get</span><br><span class="line">m.x = <span class="number">20</span></span><br><span class="line">: Updating var</span><br><span class="line">m.x</span><br><span class="line">: get</span><br><span class="line">  <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="2-Properties"><a href="#2-Properties" class="headerlink" title="2. Properties"></a>2. Properties</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span>  <span class="comment">#getx, setx, delx 이름 상관없음</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'AAA'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.__x = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__x</span><br><span class="line">    x = property(getx, setx, delx, <span class="string">"I'm the 'x' property."</span>)</span><br><span class="line"></span><br><span class="line">d = C()</span><br><span class="line">d.x</span><br><span class="line">: AAA</span><br><span class="line">  AttributeError</span><br></pre></td></tr></table></figure><h4 id="3-Decorator"><a href="#3-Decorator" class="headerlink" title="3. Decorator"></a>3. Decorator</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    __X = <span class="number">3</span>   <span class="comment"># 실제값은 __X에 저장</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__X</span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.x()</span><br><span class="line">:TypeError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="number">0</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__x</span><br><span class="line"><span class="meta">    @x.setter    #이름은 똑같지만 다른 메모리번지에 할당해주는 역할</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.__x = x</span><br></pre></td></tr></table></figure><p><span style="background-color:red">Descriptor 부분은 다시 공부하고 정리하기 </span><br></p><p>Descriptr : <a href="https://www.slideshare.net/dahlmoon/descriptor-20160403" target="_blank" rel="noopener">slideshare</a><br></p><h3 id="싱글-디스패치-멀티-디스패치"><a href="#싱글-디스패치-멀티-디스패치" class="headerlink" title="싱글 디스패치, 멀티 디스패치"></a>싱글 디스패치, 멀티 디스패치</h3><h3 id="epiphany"><a href="#epiphany" class="headerlink" title="epiphany"></a>epiphany</h3><blockquote><p>우연한 순간에 귀중한 것들과의 만남, 혹은 깨달음을 뜻하는 통찰이나 직관, 영감을 뜻하는 단어이다.<br>  python 공부도 그렇듯 계속해서 하다보면 저절로 내것이 될꺼라 믿는다.</p></blockquote><p>epiphany : <a href="https://brunch.co.kr/@altna84/216" target="_blank" rel="noopener">brunch</a><br></p><p><code>복습 시간</code> 22시 30분 ~ 1시 10분 / 총 2시간 40분  </p><p><a id = 'debug'></a></p><h1 id="디버깅"><a href="#디버깅" class="headerlink" title="디버깅"></a>디버깅</h1><h2 id="debug-package-builtin-function"><a href="#debug-package-builtin-function" class="headerlink" title="debug package, builtin_function"></a>debug package, builtin_function</h2><h3 id="pdb-package"><a href="#pdb-package" class="headerlink" title="pdb package"></a>pdb package</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> pdb; pdb.set_trace()</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"> y()</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60567725-de860300-9da5-11e9-9f85-27249b1694d3.JPG" alt="pdb"></p><h3 id="breakpoint"><a href="#breakpoint" class="headerlink" title="breakpoint"></a>breakpoint</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">()</span>:</span></span><br><span class="line">    breakpoint()</span><br><span class="line">    x = x+<span class="number">1</span></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/60567725-de860300-9da5-11e9-9f85-27249b1694d3.JPG" alt="pdb"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Lecture </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Each part summary of TOEIC</title>
      <link href="/2019/04/17/toeic/"/>
      <url>/2019/04/17/toeic/</url>
      
        <content type="html"><![CDATA[<h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><h3 id="보기중-Being이-들리면-사람이-있는지-체크"><a href="#보기중-Being이-들리면-사람이-있는지-체크" class="headerlink" title="보기중 Being이 들리면 사람이 있는지 체크"></a>보기중 Being이 들리면 사람이 있는지 체크</h3><blockquote><p>그림에 사람이 없는데 being이 들린다면 90% 오답!</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">예외)</span><br><span class="line">Display, Cast, Arrange, Block</span><br><span class="line">1. 다른 크기의 꽃병들이 진열되어 있다.</span><br><span class="line">- Vases of different sizes are being displayed</span><br><span class="line">2. 모래에 그림자가 드리워져 있다.</span><br><span class="line">- Shadows are being cast on the sand</span><br><span class="line">3. 보수작업을 위해 차선 하나가 폐쇠되어 있다.</span><br><span class="line">- A lane is being blocked for a maintenance work</span><br><span class="line">4. 진열용 선반들이 몇개 놓여있다.</span><br><span class="line">- Some shelves are being arragned for display</span><br></pre></td></tr></table></figure><hr><hr>## Part2<h3 id="when-의문문의-정답-표현"><a href="#when-의문문의-정답-표현" class="headerlink" title="when 의문문의 정답 표현"></a>when 의문문의 정답 표현</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌── in, by, not util + 시점</span><br><span class="line">│</span><br><span class="line">└── after, before, when, as soon as</span><br><span class="line">    not for another + 기간</span><br><span class="line">    &#x3D; 기간 from now (today)</span><br><span class="line">    &#x3D; 최소기간동안</span><br><span class="line">    &#x3D; 기간 이후로</span><br><span class="line"></span><br><span class="line">1. Yes&#x2F;No로 시작되는 보기는 오답</span><br><span class="line">2. 질문과 유사한 발음, 형태가 들리면 오답 &#x3D;&gt; 아닌 경우도 있기 때문에 정확히 못들었을 때만 소거!</span><br><span class="line">3. 질문에 사람, 직책명이 들리지 않았을 경우</span><br><span class="line">   보기에 인칭대명사가 들리면 오답</span><br></pre></td></tr></table></figure><hr>### where vs who 질문<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">where로 질문하고 답으로 장소가 아닌 사람으로도 나올 수 있으니 주의!</span><br><span class="line">who 역시 답으로 사람이 아닌 where로 나올 수 있으니 주의!</span><br><span class="line">ex) Q: 지혁이 어디갔어요?</span><br><span class="line">    A: 지혁이가 누구죠? or 아 사장님 말씀이신가요?</span><br><span class="line">    Q: 지혁이가 누구에요?</span><br><span class="line">    A: 편의점 앞에 있는 사람이요</span><br></pre></td></tr></table></figure><hr>### 일반의문문/부가의문문/간접의문문/부정의문문* Yes/No로 시작할 경우 정답확률 90%이상<p><span style="color:orange">※부가의문문의 억양</span></p><ol><li>자신의 의견이 옳다고 생각하여 상대의 동의를 바랄 때</li></ol><ul><li>This assignment doesn’t look easy, does it? (끝을 내려준다)</li></ul><ol start="2"><li>자신의 말이 맞는지 아닌지 상대방에게 확일할</li></ol><ul><li>These are your gloves, aren’t they? (끝을 올려준다)</li></ul><p><span style="color:orange">※부정의문문, 부가의문문의 답</span><br><br>긍정일 때: Yes<br>부정일 때: No</p><h4 id="부정의문문"><a href="#부정의문문" class="headerlink" title="부정의문문"></a>부정의문문</h4><table><thead><tr><th>한국어</th><th>영어</th></tr></thead><tbody><tr><td>한국인이 아닌가요?</td><td>Aren’t you Korean?</td></tr><tr><td>네, 한국인이 아니에요</td><td>No, i am not Korean</td></tr><tr><td>아니오, 한국인이에요</td><td>Yes, i am Korean</td></tr></tbody></table><h4 id="부가의문문"><a href="#부가의문문" class="headerlink" title="부가의문문"></a>부가의문문</h4><table><thead><tr><th>한국어</th><th>영어</th></tr></thead><tbody><tr><td>춥지? 그렇지 않아?</td><td>It’s cold, isn’t it?</td></tr><tr><td>응, 안추워</td><td>No, it’s not cold</td></tr><tr><td>아니, 추워</td><td>Yes, it’s not cold</td></tr></tbody></table><h4 id="추가-Would-you-mind"><a href="#추가-Would-you-mind" class="headerlink" title="추가 (Would you mind~?)"></a>추가 (Would you mind~?)<br></h4><p>Q. 실례지만 제가 이 책상 좀 사용해도 될까요?<br><br>Q. Would you mind if i use this table?<br><br>A1. 아뇨 사용하지마세요<br><br>A1. Yes i do <br><br>A2. 네 사용하세요<br><br>A2. No i don’t <br></p><hr><hr>## Part3<h3 id="Part3-4-듣기-포인트"><a href="#Part3-4-듣기-포인트" class="headerlink" title="Part3, 4 듣기 포인트"></a>Part3, 4 듣기 포인트</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 듣기 전 문제 분석</span><br><span class="line">2. 문제 유형 파악  </span><br><span class="line">     -&gt; 주제를 묻는구나 or 미래행동 문제구나 등등..</span><br></pre></td></tr></table></figure><hr><hr>## Part4<hr><hr>## Part5<h3 id="주어-앞에-올-수-있는-한정사"><a href="#주어-앞에-올-수-있는-한정사" class="headerlink" title="주어 앞에 올 수 있는 한정사"></a>주어 앞에 올 수 있는 한정사</h3><ol><li>a, an</li><li>the</li><li>its, my, your, his, her, their, our을 포함하는 소유격</li><li>some, any, other등… 부정형용사</li></ol><p>specific plan about the project’s reach as well as its duration will be kept under wraps until the next week’s meeting.</p><hr>### 2형식<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">주어 + 동사 + 보어 &#x3D;&#x3D;&gt; 명사 (동격)</span><br><span class="line">                  &#x3D;&#x3D;&gt; 형용사 (상태)</span><br><span class="line"></span><br><span class="line">All client&#39;s files consulted with the lawyers must remain _________</span><br><span class="line">as a matter of the federal privacy act</span><br><span class="line">1. confidential</span><br><span class="line">2. confidentially</span><br><span class="line">3. confidentiality</span><br><span class="line">4. confidence</span><br></pre></td></tr></table></figure><hr><h3 id="문두의-분사구문"><a href="#문두의-분사구문" class="headerlink" title="문두의 분사구문"></a>문두의 분사구문</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">자동사 --&gt; ing</span><br><span class="line">타동사 --&gt; 목적어 O --&gt; ing  </span><br><span class="line">      --&gt; 목적어 X --&gt; p.p</span><br><span class="line">단, 4,5 형식 동사는 목적어가 있어도 p.p 가능</span><br><span class="line"></span><br><span class="line">ex)</span><br><span class="line">Employing more than 1,000 people locally, Stratus Inc.,is the leading company in the northwest region.</span><br><span class="line"></span><br><span class="line">The high costs of implementing a drainage system can be a major problem for countires _______</span><br><span class="line">a reliable supply of clean drinking water</span><br><span class="line">1. lack</span><br><span class="line">2. lacking</span><br><span class="line">3. laked</span><br><span class="line">4. lacks</span><br></pre></td></tr></table></figure><hr>### 전치사 뒤 명사구가 올때<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">전치사 뒤에는 목적어가 와야하므로 명사, 대명사, 동명사구, 명사절이 와야 한다</span><br><span class="line">따라서 전치사 뒤에 빈칸이 있을때 빈칸뒤에 명사나 관사+명사가 있다면 빈칸 뒤 명사를 포함하는 명사구가 와야한다!</span><br><span class="line">ex)</span><br><span class="line">The high costs of ________ a drainage system ~</span><br><span class="line">1. implementing</span><br><span class="line">2. implemented</span><br></pre></td></tr></table></figure><span style="color: red">c.f</span><br><strong>명사를 수식하는 형용사의 위치</strong><br><span style="color: rgb(223,36,96)">관사 --- 형용사 --- 명사 </span><br>형용사가 명사를 수식할때 관사 앞에 오지 않는다!<br><h3 id="동명사"><a href="#동명사" class="headerlink" title="동명사"></a>동명사</h3><p><span style="color: brown">동사 + ing</span>&nbsp;&nbsp;<span style="color: skyblue">+ 전치사구</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: skyblue">+ 형용사</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: skyblue">+ 명사</span><br><br><span style="color: red">=&gt; 원래 동사 형태일때 성질 만족시켜야함</span><br></p><h4 id="문제-출제-유형"><a href="#문제-출제-유형" class="headerlink" title="문제 출제 유형"></a>문제 출제 유형</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 전치사 + ________ + 관사 + 명사</span><br><span class="line">2. ________ + 관사 + 명사 + 단수동사 ~</span><br><span class="line">3. 주어 + 동사 + ________ + 관사 + 명사</span><br></pre></td></tr></table></figure><p><span style="color: red">※ 빈칸 뒤 명사가 관사를 취하지 않는 경우 의미를 따져 봐야 함</span><br><br>ex)<br>purchasing train tickets<br><br>purchased train tickets<br></p><h4 id="동명사의-관용-표현"><a href="#동명사의-관용-표현" class="headerlink" title="동명사의 관용 표현"></a>동명사의 관용 표현</h4><ol><li>Look forward to ~ ing</li><li>be subject to ~ ing</li><li>object to ~ing</li><li>be opposed to ~ ing</li><li>spend 시간/돈 ~ing</li><li>be busy ~ing</li><li>be used to ~ing</li><li>be accustomed to ~ing</li><li>be dvoted to ~ing</li><li>be dedicated to ~ing</li><li>be committed to ~ing</li><li>have difficulty ~ing</li><li>keep ~ing</li></ol><hr><hr>## Part6<hr><hr>## Part7]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 정리 </tag>
            
            <tag> 산타 토익 </tag>
            
            <tag> 토익 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conversation in English</title>
      <link href="/2019/04/09/conversationinenglish/"/>
      <url>/2019/04/09/conversationinenglish/</url>
      
        <content type="html"><![CDATA[<h2 id="영어-회화는-일상대화에서-영어로-번역하자"><a href="#영어-회화는-일상대화에서-영어로-번역하자" class="headerlink" title="영어 회화는 일상대화에서 영어로 번역하자"></a>영어 회화는 일상대화에서 영어로 번역하자</h2><p><strong>중요!!</strong> 일상에서 자주 쓰는 표현들 위주로, 한국어 -&gt; 영어 로 바꾸고 싶은 표현이 생각날 때, 궁금할 때 영어가 더 재밌어 진다!!<br>{: .notice}</p><h3 id="동사-어휘"><a href="#동사-어휘" class="headerlink" title="동사 어휘"></a>동사 어휘</h3><ol><li>청구하다</li></ol><ul><li>charge</li></ul><ol start="2"><li>청구 되었다</li></ol><ul><li>had been charged</li></ul><ol start="3"><li>기소 되었다</li></ol><ul><li>have been charged</li><li>ex) 545명의 운전자들이 과속으로 잘못 유죄 판결을 받은 후 3명의 경찰관이 직권남용으로 기소되었다.</li><li>ex) Three cops have been charged with misconduct after 545 motorists were wrongly convicted of speeding</li></ul><ol start="4"><li>두고온다, 두고가다, 출발하다, 놓고온다, 맡기고 간다</li></ol><ul><li>leave</li><li>ex1) 나는 내 키를 두고 가지 않았어요</li><li>ex1) I didn’t leave my key</li><li>ex2) 여기 두고가시면 됩니다</li><li>ex2) You can leave it here</li></ul><ol start="5"><li>놓고 갔어요</li></ol><ul><li>left</li></ul><ol start="6"><li>~하게 해줄 것이다</li></ol><ul><li>will enable</li></ul><ol start="7"><li>이제 할 수 있어</li></ol><ul><li>be able to</li><li>ex1) 나 이젠 기타 잘 쳐</li><li>ex1) Now i’m able to play the guitar well</li><li>ex2) 어제 날씨 정말 좋았어, 그래서 우리 이제 밖에서 먹을 수 있을 거야</li><li>ex2) The weather was great yesterday, so we were able to eat outside</li></ul><ol start="8"><li>할 수 있어</li></ol><ul><li>can</li><li>ex1) 나 기타 잘 쳐 (원래부터)</li><li>ex1) I can play the guitar</li><li>ex2) 내가 5살 이었을 때 자전거를 탈 수 있었어</li><li>ex2) I could ride a bike when i was five</li></ul><ol start="9"><li>이다, 입니다, 이에요, 있다</li></ol><ul><li>be</li><li>ex1) 물입니다</li><li>ex1) Be water</li><li>ex2) 여기 있다</li><li>ex2) Be here</li><li>ex3) 여기 있었다</li><li>ex3) was here</li><li>ex4) 여기 있을 거야</li><li>ex4) will be here</li></ul><ol start="10"><li>내가 ~ 하는</li></ol><ul><li>that i ~</li><li>ex1) 내가 좋아하는</li><li>ex1) that i like</li><li>ex2) 내가 타는</li><li>ex2) that i take</li></ul><ol start="11"><li>해보다</li></ol><ul><li>try</li></ul><ol start="12"><li>이미 해봤다</li></ol><ul><li>have tried</li></ul><ol start="13"><li>끝내다</li></ol><ul><li>finish</li></ul><ul><li>has 역시 연습해야함</li></ul><ol start="14"><li>이미 끝냈다</li></ol><ul><li>have finished</li><li>have done</li></ul><ol start="15"><li>보내다</li></ol><ul><li>send</li></ul><ol start="16"><li>벌써 보냈다</li></ol><ul><li>have sent</li></ul><ol start="17"><li>계산하다</li></ol><ul><li>pay</li></ul><ol start="18"><li>벌써 계산 했어요</li></ol><ul><li>have paid</li></ul><ol start="19"><li>받는다, 구하다</li></ol><ul><li>get</li></ul><ol start="20"><li>벌써 받았어요</li></ol><ul><li>have got</li><li>ex1) 저 잔돈 받았어요</li><li>ex1) I have got the change  </li><li>ex2) 아이폰 이미 구했어요</li><li>ex2) I have got I-phone</li><li>ex3) 그는 이미 답을 알고 있어요</li><li>ex3) He has got the answer</li></ul><ol start="21"><li>모으다</li></ol><ul><li>gather</li></ul><ol start="22"><li>이미 모았어요</li></ol><ul><li>have gathered</li><li>ex) 이미 여권들을 모았어요</li><li>ex) I have gatherd the passport</li></ul><ol start="23"><li>달라고 하다</li></ol><ul><li>ask for</li></ul><ol start="24"><li>이미 달라고 했어요</li></ol><ul><li>have asked for</li><li>ex) 그가 정답을 달라고 했어요</li><li>ex) He has asked for the answer</li></ul><ol start="25"><li>산다</li></ol><ul><li>buy</li></ul><ol start="26"><li>이미 샀다</li></ol><ul><li>have bought</li></ul><ol start="27"><li>먹는다</li></ol><ul><li>eat</li></ul><ol start="28"><li>이미 먹었어요</li></ol><ul><li>have had</li><li>ex) 저 이미 먹었어요</li><li>ex) I have had</li></ul><ol start="29"><li>본다</li></ol><ul><li>see</li></ul><ol start="30"><li>이미 봤다</li></ol><ul><li>have seen</li><li>ex) 그는 이미 봤대</li><li>ex) He has seen</li></ul><ol start="31"><li>다녀온다</li></ol><ul><li>go</li></ul><ol start="32"><li>이미 갔다 왔어요</li></ol><ul><li>have been</li><li>ex1) 저 전에 거기 다녀왔어요</li><li>ex1) I have been there before</li><li>ex2) 저 일본 갔다 왔어요</li><li>ex2) I have been to Japan</li></ul><ol start="33"><li>바꾸다</li></ol><ul><li>change</li></ul><ol start="34"><li>이미 바꿨어요</li></ol><ul><li>have changed</li></ul><ol start="35"><li>내려 놓는다</li></ol><ul><li>put down</li></ul><ol start="36"><li>이미 내려 놨어요</li></ol><ul><li>have put down</li><li>ex) 저 이미 총 내려 놨어요</li><li>ex) I have put the gun down</li></ul><ol start="37"><li>꺼내 놓는다</li></ol><ul><li>take out</li></ul><ol start="38"><li>미리 꺼내 놨어요</li></ol><ul><li>have taken out</li><li>ex) 내 돈 전부다 꺼내 놨어요</li><li>ex) I have taken out all my money</li></ul><ol start="39"><li>왔다</li></ol><ul><li>come</li></ul><ol start="40"><li>이미 왔다(와서 계속 있는 상태)</li></ol><ul><li>have come</li></ul><ol start="41"><li>~이 딸려오다</li></ol><ul><li>come with</li><li>ex) 저녁 식사에 샐러드가 나오나요?</li><li>ex) Does the dinner come with a salad?</li></ul><ol start="42"><li>이미 떠났어요</li></ol><ul><li>have left</li><li>ex) 저 이미 출발 했어요</li><li>ex) I have left</li></ul><ol start="43"><li>끄다</li></ol><ul><li>turn off</li></ul><ol start="44"><li>이미 꺼두다</li></ol><ul><li>have turned off</li><li>ex) 저 핸드폰 이미 껐는데요</li><li>ex) I have turned off my cell phone</li></ul><ol start="45"><li>완화되게 하다</li></ol><ul><li>ease</li></ul><ol start="46"><li>완화 시킬 것이다</li></ol><ul><li>will ease</li><li>ex) 고속도로가 공항으로 가는 길의 교통체증을 완화 시킬 것이다</li><li>ex) The highway will ease traffic congestion on routes leading to the airport</li></ul><ol start="47"><li>변화/이동 관련 동사 (get 동사의 여러가지 의미)</li></ol><ul><li>사다</li><li>buy</li><li>얻다</li><li>obtain</li><li>받다</li><li>receive</li><li>가져오다</li><li>bring</li><li>~한 상태가 되다</li><li>become</li><li>도착하다, 이동하다</li><li>arrive/move</li><li>이해하다</li><li>understand</li></ul><ol start="48"><li>have 동사의 여러 가지 의미</li></ol><ul><li>소유</li><li>own</li><li>먹다/마시다</li><li>eat/dring</li><li>경험하다</li><li>experience</li><li>병이들다</li><li>disease</li><li>ex) 나 감기 걸렸어</li><li>ex) I’ve got a cold</li><li>생각이 들다</li><li>idea</li><li>ex1) 나도 몰라</li><li>ex1) I have no idea</li><li>ex2) 나 이번주에 계획 없어</li><li>ex2) I don’t have any plans for the week</li></ul><br>[시원스쿨 강의](https://www.youtube.com/watch?v=yMwOU7u--h8&&t=52s)<hr><h3 id="Today’s-conversation"><a href="#Today’s-conversation" class="headerlink" title="Today’s conversation"></a>Today’s conversation</h3><h4 id="4월-7일-일요일"><a href="#4월-7일-일요일" class="headerlink" title="4월 7일 일요일"></a>4월 7일 일요일</h4><ol><li><p>카드 가지고 오셨나요? <br><br><kbd>me</kbd>:&nbsp;&nbsp;Did you bring your card? <br><br><kbd>papage</kbd>:&nbsp;&nbsp;Did you bring your card?<br></p></li><li><p>이것도 좀 데워주세요 <br><br><kbd>me</kbd>:&nbsp;&nbsp;Please 데우다 this. <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Would you please 데우다 this. <br><br><kbd>papage</kbd>:&nbsp;&nbsp;Could you heat this up for me?  <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Please warm this up.   <br></p></li><li><p>네? 뭐라구요? <br><br><kbd>me</kbd>:&nbsp;&nbsp;what? come again? <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;what? pardon me? <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;what? what did you say? <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excuse me sir? <br><br><kbd>papage</kbd>:&nbsp;pardom me? <br></p></li><li><p>나 지금 나가야해 <br><br><kbd>me</kbd>:&nbsp;&nbsp;I have to go now <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I’m just going to go now <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I’m gonna go <br><br><kbd>papage</kbd>:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I have to go now <br></p></li><li><p>응 지금 버스 있어 <br><br><kbd>me</kbd>:&nbsp;&nbsp;yes, <br></p></li><li><p>저랑 근무 시간 바꿔주실 수 있나요? <br><br><kbd>me</kbd>:&nbsp;&nbsp;could you change the job schedule for me? <br></p></li><li><p>네이버도 계속 발전해서 좋은 회사지만 조금 청렴했으면 좋겠어요.. <br><br><kbd>me</kbd>:&nbsp;&nbsp;I’d like to be 청렴 for naver even good company that keep developing <br><br><kbd>papage</kbd>:&nbsp;&nbsp;Naver is a good company because it has continued to develop, but i hope Naver will be a little integrity <br></p></li><li><p>그럴시간 있으면 밖에 나가서 뛰어 노는 걸 추천한다. (속마음) <br><br><kbd>me</kbd>:&nbsp;&nbsp;I would recommand you to go out for playing a ground if you have many time. <br><br><kbd>papage</kbd>:&nbsp;&nbsp;If you have time for that, i recommend you to go out and play. <br></p></li><li><p>두 명의 학생이 왔어요. <br><br><kbd>me</kbd>:&nbsp;&nbsp;Two students came. <br><br><kbd>papage</kbd>:&nbsp;&nbsp;There are two students <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two students showed up <br></p></li></ol><hr><h4 id="4월-8일-월요일"><a href="#4월-8일-월요일" class="headerlink" title="4월 8일 월요일"></a>4월 8일 월요일</h4><ol><li><p>밥 먹으러 가? (점심) <br><br><kbd>me</kbd>:&nbsp;&nbsp; Do we go for a lunch? <br><br><kbd>papage</kbd>:&nbsp;&nbsp; Are we going to have lunch? <br></p></li><li><p>네 시간 돼요, 가능합니다. <br><br><kbd>me</kbd>:&nbsp;&nbsp; yes, i can , it’s possible <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes, i do <br></p></li><li><p>시간 끌지마! (연관 검색..)  <br><br><kbd>blog</kbd>:&nbsp;&nbsp; Don’t stall for time  <br></p></li><li><p>언제 시간 되세요? <br><br><kbd>blog</kbd>:&nbsp;&nbsp; When are you available? <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When are you free?  <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When can we meet you? <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do you have any plans for this weekend?  <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Are you free tonight? <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do you have time for that day?</p></li><li><p>언제든 괜찮습니다 x날 제외하고. <br><br><kbd>blog</kbd>:&nbsp;&nbsp;Any day will be fine except x <br></p></li><li><p>이번주는 스케줄이 꽉 차있어. <br><br><kbd>blog</kbd>:&nbsp;&nbsp;I’m all dated up this week. <br></p></li><li><p>배가 불러서 밥 생각이 없어. <br><br><kbd>me</kbd>:&nbsp;&nbsp;I’m full, so i don’t want to eat. <br><br><kbd>papage</kbd>:&nbsp;&nbsp;I’m so full that i don’t want to eat. <br></p></li><li><p>저번에 말했던 밥집에서 가족들이랑 밥 먹었거든. <br><br><kbd>me</kbd>:&nbsp;&nbsp;I have a lunch at restaurant that i told you with my family. <br><br><kbd>papage</kbd>:&nbsp;&nbsp;I ate with my family at the restaurant i told you last time <br></p></li></ol><p>4월 12일 금요일</p><ol><li><p>너 이거 해볼래? <br><br><kbd>blog</kbd>: &nbsp;&nbsp; Do you wanna try this? <br></p></li><li><p>응, 하고 싶어<br><br><kbd>blog</kbd>: &nbsp;&nbsp; I’m down with it(that)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I’m down for it</p></li><li><p>나 지금 기분 안좋아 <br><br><kbd>blog</kbd>: &nbsp;&nbsp; I’m feeling down</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 영어 </tag>
            
            <tag> 회화 </tag>
            
            <tag> 시원스쿨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘</title>
      <link href="/2019/04/04/algorithm/"/>
      <url>/2019/04/04/algorithm/</url>
      
        <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 레드 블랙 트리</span><br></pre></td></tr></table></figure><p>이진 트리의 불균형문제를 해결하여 균형있게 탐색할 수 있도록 정렬하는 알고리즘.</p><pre><code>#### 조건1. 루트노드는 항상 블랙.2. 새로 추가되는 노드는 항상 레드.3. 모든 깊이의 차수는 항상 동일해야 한다.4. 레드 노드가 연속되어서는 안된다.#### 연속된 레드 노드를 바꿔주는 방법1. 연속된 레드 노드의 부모 노드를 기준으로 양쪽에 레드 노드가 있을 때- 레드는 블랙으로 블랙은 레드로 바꾼다. 단 루트 노드는 항상 블랙2. 연속된 레드 노드의 부모 노드를 기준으로 한쪽에 블랙 노드가 있을 때- 회전시킨다- 일자일때, 자식-자식-부모 형태라고 한다면 가운데 자식 노드를 부모 노드로 올려 놓는다.- 꺾인 모양일때, 자식-자식-부모 형태라고 한다면 맨 밑 자식을 부모 노드로 올려 놓는다.정렬 알고리즘 애니메이션 =&gt; [toptal](https://www.toptal.com/developers/sorting-algorithms)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="/2019/03/25/django/"/>
      <url>/2019/03/25/django/</url>
      
        <content type="html"><![CDATA[<h1 id="Two-scoops-of-Django"><a href="#Two-scoops-of-Django" class="headerlink" title="Two scoops of Django"></a>Two scoops of Django</h1><h2 id="Django-Structure"><a href="#Django-Structure" class="headerlink" title="Django Structure"></a>Django Structure</h2><p><img src="https://user-images.githubusercontent.com/33630505/51454555-a4412000-1d88-11e9-9b8d-f1d279cdac6e.JPG" alt="django structure"></p><p><a href="https://www.stechstar.com/user/wordpress/python-django-개요-다이어그램" target="_blank" rel="noopener">출처 바로가기</a><br></p><h2 id="Django-Project-시작전-환경-세팅-최적화된-장고-환경을-꾸미자"><a href="#Django-Project-시작전-환경-세팅-최적화된-장고-환경을-꾸미자" class="headerlink" title="Django Project 시작전 환경 세팅 (최적화된 장고 환경을 꾸미자)"></a>Django Project 시작전 환경 세팅 (최적화된 장고 환경을 꾸미자)</h2><ol><li>python3 설치 (python 3.1.4v 이후 버전은 pip가 내장되어 있다)</li></ol><ul><li>pip는 python 패키지를 가져오는 도구</li><li>pip upgrade =&gt; python -m pip install –upgrade pip</li><li>python2를 사용하는 경우 easy_install을 이용하여 pip 설치</li></ul><ol start="2"><li>virtualenv 설치</li></ol><ul><li>virtualenv는 python package 의존성을 유지할 수 있게 독립된 python 환경을 제공하는 도구</li><li>pip install virtualenv</li></ul><ol start="3"><li>virtualenvwrapper 설치(virtualenv 사용을 더 편하게 해주는 도구)</li></ol><ul><li>pip install virtualenvwrapper-win</li><li>windows virtualenv-wrapper install: <a href="https://technerd.tistory.com/52" target="_blank" rel="noopener">tistory</a></li><li>node.js 개발자의 python 도전기: <a href="https://blog.outsider.ne.kr/1324" target="_blank" rel="noopener">blog</a></li></ul><ol start="4"><li>mkvirtualenv 가상환경 이름</li></ol><ul><li>ex) mkvirtualenv myvenv</li></ul><ol start="5"><li>앞으로 생성할 가상환경을 위한 환경설정</li></ol><ul><li>setx WORKON_HOME 경로</li><li>ex) setx WORKON_HOME C:\dev\project</li></ul><ol start="6"><li>개인 프로젝트를 위한 가상환경 설치</li></ol><ul><li>mkvirtualenv myvenv</li><li>ex) (myvenv) C:\dev\project\myvenv</li></ul><ol start="7"><li>가상환경 나오기</li></ol><ul><li>deactivate</li></ul><ol start="8"><li>가상환경 들어가기</li></ol><ul><li>workon 가상환경 이름</li><li>ex) workon myvenv</li><li>git bash에서 켜기: source Scripts/activate</li></ul><ol start="9"><li>python packgage 확인</li></ol><ul><li>pip list</li></ul><ol start="10"><li>Django 설치하기 (가상환경 안에서)</li></ol><ul><li>pip install django~=버전</li><li>ex) pip install django~=2.0.0</li></ul><ol start="11"><li>root directory 생성</li></ol><ul><li>mkdir root_dir_name</li><li>ex) mkdir mysite</li></ul><ol start="12"><li>requirements.txt 파일 생성</li></ol><ul><li>pip freeze &gt; requirements.txt</li></ul><ol start="13"><li>프로젝트 생성</li></ol><ul><li>django-admin.py startproject</li></ul><ol start="14"><li>쿠키커터 설치</li></ol><ul><li>pip install cookiecutter</li><li>cookiecutter <a href="https://github.com/pydanny/cookiecutter-django" target="_blank" rel="noopener">https://github.com/pydanny/cookiecutter-django</a></li><li>쿠키커터 설치 방법 =&gt; <a href="https://new93helloworld.tistory.com/327" target="_blank" rel="noopener">Tistory</a></li><li>쿠키커터 설정 =&gt; <a href="https://medium.com/@jsh901220/django%EC%99%80-cookiecutter-django-%EA%B0%84%EB%8B%A8-%EC%84%A4%EB%AA%85-898d063d38ff" target="_blank" rel="noopener">settings</a></li></ul><p><code>Cookiecutter란?</code> 유연한 확장성과 편의를 추구하기위해 만들어진 프로젝트 템플릿 ,<br>어플리케이션 사이즈가 계속해서 커지면 곤란한 상황이 올수 있는데 이를 방지할 수 있다고 한다.<br>Cookiecutter의 어떤점 때문인지는 확실하지 않기 때문에 더 찾아보자</p><p>Django와 Cookiecutter 설명: <a href="https://medium.com/@jsh901220/django%EC%99%80-cookiecutter-django-%EA%B0%84%EB%8B%A8-%EC%84%A4%EB%AA%85-898d063d38ff" target="_blank" rel="noopener">blog</a></p><hr><h2 id="Django-Application-Structure"><a href="#Django-Application-Structure" class="headerlink" title="Django Application Structure"></a>Django Application Structure</h2><blockquote><p>git bash tree command on windows <br><br>cmd //c tree</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line"></span><br><span class="line">└─── My_Awesome_Project           # [repository_root]</span><br><span class="line">     ├── .gitignore</span><br><span class="line">     ├── .gitattributes</span><br><span class="line">     ├── .pylintrc</span><br><span class="line">     ├── .coveragerc</span><br><span class="line">     ├── .editorconfig</span><br><span class="line">     ├── README.rst</span><br><span class="line">     ├── docs</span><br><span class="line">     ├── manage.py</span><br><span class="line">     ├── requirements</span><br><span class="line">     │   ├── base.txt</span><br><span class="line">     │   ├── local.txt</span><br><span class="line">     │   └── production.txt</span><br><span class="line">     ├── config                   # [configuration_root]   </span><br><span class="line">     │   ├── __init__.py</span><br><span class="line">     │   ├── urls.py</span><br><span class="line">     │   ├── wsgi.py</span><br><span class="line">     │   └── settings</span><br><span class="line">     │        ├── __init__.py</span><br><span class="line">     │        ├── base.py</span><br><span class="line">     │        ├── local.py</span><br><span class="line">     │        ├── production.py</span><br><span class="line">     │        └── test.py</span><br><span class="line">     ├── docs</span><br><span class="line">     │   ├── __init__.py</span><br><span class="line">     │   ├── conf.py</span><br><span class="line">     │   ├── index.rst</span><br><span class="line">     │   ├── Makefile</span><br><span class="line">     │   └── make.bat</span><br><span class="line">     ├── locale</span><br><span class="line">     │   └── README.rst</span><br><span class="line">     ├── utility</span><br><span class="line">     └── My_Awesome_Project_App   # [django_project_root]</span><br><span class="line">         ├── __init__.py</span><br><span class="line">         ├── conftest.py</span><br><span class="line">         ├── contrib</span><br><span class="line">         │   ├── __init__.py</span><br><span class="line">         │   ├── sites</span><br><span class="line">         │   │   ├── __init__.py</span><br><span class="line">         │   │   └── migrations</span><br><span class="line">         ├── templates</span><br><span class="line">         │   ├── account</span><br><span class="line">         │   ├── pages</span><br><span class="line">         │   ├── users</span><br><span class="line">         │   ├── base.html</span><br><span class="line">         │   ├── 404.html</span><br><span class="line">         │   └── 500.html</span><br><span class="line">         ├── static</span><br><span class="line">         │   ├── css</span><br><span class="line">         │   ├── fonts</span><br><span class="line">         │   ├── images</span><br><span class="line">         │   ├── js</span><br><span class="line">         │   └── sass</span><br><span class="line">         └── users</span><br><span class="line">             ├── __init__.py</span><br><span class="line">             ├── admin.py</span><br><span class="line">             ├── forms.py</span><br><span class="line">             ├── models.py</span><br><span class="line">             ├── urls.py</span><br><span class="line">             ├── views.py</span><br><span class="line">             ├── apps.py</span><br><span class="line">             ├── adapters.py</span><br><span class="line">             ├── migrations</span><br><span class="line">             └── tests</span><br></pre></td></tr></table></figure><hr>## Field manual of Coding style<p>Refactoring =&gt; <a href="https://codereview.tistory.com/3" target="_blank" rel="noopener">tistory</a></p><hr><h2 id="Postgresql-설치-및-사용법"><a href="#Postgresql-설치-및-사용법" class="headerlink" title="Postgresql 설치 및 사용법"></a>Postgresql 설치 및 사용법</h2><p>user 생성 및 수정, 삭제: <a href="http://www.gurubee.net/lecture/2939" target="_blank" rel="noopener">user</a><br><br>postgresql 비밀번호를 모를 때: <a href="https://stackoverflow.com/questions/10845998/i-forgot-the-password-i-entered-during-postgres-installation" target="_blank" rel="noopener">stackoverflow</a><br><br>postgresql user 삭제: <a href="https://zetawiki.com/wiki/PostgreSQL_%EA%B3%84%EC%A0%95_%EC%82%AD%EC%A0%9C" target="_blank" rel="noopener">wiki</a> <br><br>postgresql 자동로그인: <a href="https://dd00oo.tistory.com/entry/postgreSQL-%EC%9E%90%EB%8F%99-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%95%94%ED%98%B8%ED%8C%8C%EC%9D%BC" target="_blank" rel="noopener">tistory</a><br><br>Tablespace 개념: <a href="https://blogger.pe.kr/504" target="_blank" rel="noopener">blog</a><br></p><hr><h2 id="makemigrations-vs-migrate"><a href="#makemigrations-vs-migrate" class="headerlink" title="makemigrations vs migrate"></a>makemigrations vs migrate</h2><p><kbd>makemigrations</kbd>: models.py에서 적용한 변경사항이나 추가된 혹은 삭제된 사항들을 감지하여 파일로 생성 <br><br><kbd>migrate</kbd>: 적용되지 않은 migratinos(설정값)들을 적용시키는 역할 <br><br><br><br><span style="color: orange"><kbd>makemigrations</kbd>는 장고에서 제공하는 모델의 변경사항들을 감지하고 기록하는 역할을 하며 <kbd>migrate</kbd>는 그러한 기록된 파일들과 설정값들을 읽어서 그 변경사항을 db에 저장하는 역할을 한다</span></p><p><strong>참고</strong> 모델 수정후 migrations을 해주지 않고 admin page에 접속하게 되면 오류가 난다 {: .notice}  </p><h2 id="Django-개발-순서"><a href="#Django-개발-순서" class="headerlink" title="Django 개발 순서"></a>Django 개발 순서</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. Settings.py를 이용해 기본 세팅하기</span><br><span class="line">2. Models.py를 이용해 필요한 model 만들기</span><br><span class="line">3. 변경된 model migration, migrate하기</span><br><span class="line">4. Model 생성후 superuser 등록하기  &#x3D;&gt; 한번만</span><br><span class="line">5. Url.py를 이용하여 경로 설정하기</span><br><span class="line">6. Views.py를 이용하여 데이터 받고 처리하기</span><br><span class="line">7. Templates 만들기</span><br><span class="line">8. Form.py를 이용해 사용자 데이터 입력받아 저장하는 경우 만들기</span><br><span class="line">9. 서버 켜서 확인하기</span><br></pre></td></tr></table></figure><h2 id="Django-Rest-Framework"><a href="#Django-Rest-Framework" class="headerlink" title="Django Rest Framework"></a>Django Rest Framework</h2><p>Django Rest Framework란?: &nbps; <a href="https://yunhookim.tistory.com/7" target="_blank" rel="noopener">tistory</a></p><h2 id="Googling-Info"><a href="#Googling-Info" class="headerlink" title="Googling Info"></a>Googling Info</h2><p>Django structure: <a href="https://timmyomahony.com/blog/updated-django-project-structure-or-folder-layout" target="_blank" rel="noopener">blog</a><br><br>Django install: <a href="https://godrjsmgl.tistory.com/32" target="_blank" rel="noopener">tistory</a><br><br>Django Tutorial: <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01" target="_blank" rel="noopener">Djangoproject</a><br><br>Django with Machine Learning: <a href="https://www.codementor.io/jadianes/build-data-products-django-machine-learning-clustering-user-preferences-du107s5mk" target="_blank" rel="noopener">codementor</a><br><br>Django with MongoDB: <a href="https://github.com/nesdis/djongo" target="_blank" rel="noopener">Djongo github</a><br><br>NoSQL DB의 종류: <a href="https://www.incodom.kr/NoSQL_DB_의_종류" target="_blank" rel="noopener">incodom</a><br><br>Django 공부내용 정리: <a href="https://wikidocs.net/book/837" target="_blank" rel="noopener">wikiDocs</a><br><br>Postgresql 연동: <a href="https://it-tutorial.tistory.com/141?category=1011041" target="_blank" rel="noopener">tistory1</a>, &nbsp;<a href="https://seulcode.tistory.com/111" target="_blank" rel="noopener">tistory2</a><br><br>Django 참고하기 좋은 글: <a href="https://blog.hannal.com" target="_blank" rel="noopener">hannal</a><br><br>Django admin 계정 패스워드 리셋하는 방법: <a href="https://antilibrary.org/666" target="_blank" rel="noopener">blog</a><br></p><hr><h3 id="공부하다가-모르는-용어-개념-정리"><a href="#공부하다가-모르는-용어-개념-정리" class="headerlink" title="공부하다가 모르는 용어, 개념 정리"></a>공부하다가 모르는 용어, 개념 정리</h3><ol><li>하드코딩</li></ol><ul><li>복잡하고 정리되지 않은 코드??</li></ul><ol start="2"><li>개발 환경/스테이징 환경/테스트 환경/운영 환경 구체적인 차이와 실제 예시로 이해하기</li><li>쿠키커터가 템플릿 그 이상의 기능이 있는지 찾기</li><li>쿠키커터 vs 삼단 저장소 구조(root/project/conf)</li><li>virtualenv, pipenv 차이</li><li>Django + Postgresql + MongoDB 구조 가능?? 관계형 DB와 문서형 DB 동시 연동</li><li>절대적 임포트, 명시적 상대, 암묵적 상대 비교, 이해하기</li><li>환경변수 정확하게 이해하기</li><li>앱 하나에 모델이 많을 때 일어나는 일, 부작용등을 알아보자</li><li>앱 분리하는 방법 터득</li><li>모델 상속</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 정리 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IT 용어 정리</title>
      <link href="/2019/03/16/IT-Terms/"/>
      <url>/2019/03/16/IT-Terms/</url>
      
        <content type="html"><![CDATA[<h3 id="정보처리기사-실기를-위한-용어"><a href="#정보처리기사-실기를-위한-용어" class="headerlink" title="정보처리기사 실기를 위한 용어"></a>정보처리기사 실기를 위한 용어</h3><ol><li>Data warehouse</li></ol><ul><li>정보에 입각한 의사 결정을 내릴 수 있도록 분석 가능한 정보의 중앙 저장소  <a href="https://middleware.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9B%A8%EC%96%B4%ED%95%98%EC%9A%B0%EC%8A%A4Data-Warehouse-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A7%88%ED%8A%B8Data-Mart" target="_blank" rel="noopener">DW vs DM</a></li></ul><ol start="2"><li>Big data</li></ol><ul><li>의사결정에 필요한 아주 방대한 데이터들 그리고 데이터를 활용하는 기술</li><li><a href="https://www.educba.com/big-data-vs-data-warehouse" target="_blank" rel="noopener">Data warehose vs Big data</a></li></ul><ol start="3"><li>Data mining</li></ol><ul><li>Data warehouse에 저장된 데이터 집합에서 사용자의 요구에 따라 유용하고 가능성 있는<br>정보를 발견할 수 있도록 해주는 기술</li></ul><ol start="4"><li>Triger</li></ol><ul><li>입력, 갱신, 삭제 등의 이벤트가 발생할 때마다 자동적으로 수행되는 사용자 정의 프로시저</li></ul><ol start="5"><li>DSMS(Data Stream Management System)</li></ol><ul><li>무선 센서 네트워크나 인터넷 같은 통신사에서 발생하는 대량의 스트림 데이터를 처리하고 관리하는 시스템.</li></ul><ol start="6"><li>DC(Dublin Core)</li></ol><ul><li>ISO 15836으로 표준화된 메타데이터 요소 집합, 네트워크 환경에서 각종 전자 정보를 기술하는 메타데이터.</li></ul><ol start="7"><li>MDR(Meta Data Registry)</li></ol><ul><li>메타 데이터의 등록과 인증을 통해 메타 데이터를 유지, 관리하며 메타 데이터의 명세를 공유하는 레지스트리.</li></ul><ol start="8"><li>Database Tuning</li></ol><ul><li>데이터베이스 시스템을 최적화하는 방안, DB application, OS, DB 등의 조정을 통하여 DB System 성능 향상.</li></ul><ol start="9"><li>EA(Enterprise Architecture)</li></ol><ul><li>정보화를 체계적으로 추진하기 위해 조직 및 업무 활동, 정보화 종합설계도<a href="https://m.blog.naver.com/PostView.nhn?blogId=jvioonpe&logNo=220227180562&prxyRefere=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">EA</a></li></ul><ol start="10"><li>ERP(Enterprise Resource Planning)</li></ol><ul><li>인사, 재무, 생산 등 기업의 전 부문을 하나의 통합 시스템으로 재구축함으로써 생산성 극대화 기법.</li></ul><ol start="11"><li>EAI(Enterprise Application Integration)</li></ol><ul><li>DW나 ERP등 기업에서 운영하는 서로 다른 어플리케이션을 통합하여 업무의 효율성을 높이려는 시도.</li></ul><ol start="12"><li>DRM(Digital Rights Management or Digital Restrictions Managment)</li></ol><ul><li>출판자 또는 저작권자가 그들이 배포한 디지털 자료나 하드웨어의 사용을 제어하고 이를 의도한 용도로만 사용하도록 제한하는 모든 기술.</li></ul><ol start="13"><li>OLAP(Online Analytic Processing)</li></ol><ul><li>의사결정 지원 시스템. DW로 부터 정보를 추출하여 온라인으로 다차원 분석을 하는 기술 <a href="https://docs.microsoft.com/ko-kr/system-center/scsm/olap-cubes-overview?view=sc-sm-2019" target="_blank" rel="noopener">OLAP</a></li></ul><ol start="14"><li>OLTP(Online Transaction Processing)</li></ol><ul><li>주 컴퓨터와 통신 회선으로 접속되어 있는 복수의 사용자 단말에서 발생한 트랜잭션을 주 컴퓨터에서 처리하여 그 결과를 즉석에서 사용자 단말 측으로 되돌려 보내 주는 처리 형태. <a href="https://m.blog.naver.com/PostView.nhn?blogId=skygrab&logNo=30102437276&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">OLAP vs OLTP</a></li></ul><ol start="15"><li>시간복잡도(Big-O)</li></ol><ul><li>알고리즘이 수행되는 시간</li></ul><ol start="16"><li>공간복잡도</li></ol><ul><li>프로그램 실행후 종료시까지 필요로하는 자원공간의 양(메모리)</li></ul><ol start="17"><li>as-is</li></ol><ul><li>현재 업무 프로세스 분석</li></ul><ol start="18"><li>to-be</li></ol><ul><li>미래 업무 프로세스 분석</li></ul><ol start="19"><li>AR(Augmented reality)</li></ol><ul><li>증강현실, 실제 존재하는 환경에 가상의 사물이나 정보를 합성하여 마치 원래의 환경에 존재하는 사물처럼 보이도록 하는 컴퓨터 그래픽 기법 ex) 포켓몬고</li></ul><ol start="20"><li>임계영역</li></ol><ul><li>공유자원에 접근하는 프로세스의 영역</li></ul><ol start="21"><li>상호배제</li></ol><ul><li>동시에 실행되는 프로세스들이 임계영역에 동시에 들어가지 않도록 하는 것 ex) 파일이 열려 있으므로 이 작업을 완료할 수 없습니다</li></ul><ol start="22"><li>bi-modal</li></ol><ul><li>혁신을 추진하는 특별팀을 만드는 동시에 기존 핵심 시스템도 잘 유지해야 한다</li></ul><ol start="23"><li>CRM(Customer Relationship management)</li></ol><ul><li>소비자들을 자신의 고객으로 만들고, 이를 장기간 유지하고자 하는 경영 방식</li></ul><ol start="24"><li>CUI(Conversational user interfaces)</li></ol><ul><li>인공지능 대화형 인터페이스</li></ul><ol start="25"><li>스마트 캠퍼스</li></ol><ul><li>인간-기기가 상호작용하여 시스템을 통해 대학의 구성원이 더 몰일할 수 있고 자동화된 경험을 만들어낸다</li></ul><ol start="26"><li>넛지기술</li></ol><ul><li>클라우드와 모바일, 소셜, 데이터 관련 기술의 모음, 개인화된 소통을 통해 서비스 제공 ex)aws 쇼핑몰 홈페이지, 쳇봇</li></ul><ol start="27"><li>BYOD(Bring your own device)</li></ol><ul><li>컴퓨터나 모바일 기기 속 자료를 프로젝터 같은 유선 기기 연결 없이 무선 네트워크를 사용해 스크린에 보여줄 수 있다</li></ul><ol start="28"><li>HIP(Hybrid integration platform)</li></ol><ul><li>기존의 IT 환경들을 통합하여 환경 구축 ex)software ag</li></ul><ol start="29"><li>SLA(Service Level Agreement)</li></ol><ul><li>서비스를 제공함에 있어서 공급자와 사용자간에 서비스에 대하여 측정지표와 목표등에 대한 협약서</li></ul><ol start="30"><li>PaaS(Platform as a Service)</li></ol><ul><li>클라우드 컴퓨팅 서비스중 하나, 앱 개발에 필요한 인프라 대여 플랫폼 ex)aws, 공개 API, 구글의 앱 엔진</li></ul><ol start="31"><li>SaaS(Software as a Service)</li></ol><ul><li>기존의 ASP를 확장한 개념으로 소프트웨어 및 관련 데이터는 중앙에 호스팅되고 사용자는 웹 브라우저 등의 클라이언트를 통해 접속하는 형태의 소프트웨어 전달 모델 (주문형 소프트웨어) ex) CRMKorea</li></ul><ol start="32"><li>IaaS(Infrastructure as a Service)</li></ol><ul><li>서버, 스토리지, 네트워크를 가상화 환경으로 만들어, 필요에 따라 인프라 자원을 사용할 수 있게 서비스를 제공한다 ex) aws’s EC2, microsoft azure</li></ul><ol start="33"><li>ASP(Application Service Provider)</li></ol><ul><li>네트워크 인프라를 이용하여 다양한 정보화 솔루션을 사용할 수 있는 애플리케이션 임대 서비스, SaaS와 유사하지만 동적으로 컴퓨팅 자원을 할당하는 분산처리 등과 같은 기술 제공이 제한적이다는 면에서 차이가 있다</li></ul><ol start="34"><li>APaaS / DPaaS / IPaaS</li></ol><ul><li>PaaS에서 파생된 것들</li></ul><ol start="35"><li>BCI(Brain-Computer Interface)</li></ol><ul><li>컴퓨터 방식을 이용해 정보를 추출한 후 뇌에 다시 자극을 적용하는 것 및 손상된 청각, 시각 및 운동을 복원하는 것을 목표로 하는 신경기능 대체 분야에 초점을 맞추고 있다</li></ul><ol start="36"><li>Ad-hoc</li></ol><ul><li>무선 통신 및 네트워킹 능력을 갖춘 두 개 이상의 장비로 구성된 네트워크, 별도의 AP(Access point) or Infrastructure 없이 모바일 디바이스만으로 구성가능하다</li></ul><ol start="37"><li>WPAN(Wireless Personal Area Network)</li></ol><ul><li>무선 개인지역망, 블루투스 등의 개인 디바이스</li></ul><ol start="38"><li>WLAN(Wireless Local Area Network)</li></ol><ul><li>무선 근거리 통신망, 802.11 프로토콜 통신을 하며 와이파이가 이에 해당한다</li></ul><ol start="39"><li>WMAN(Wireless Metropolitan Area Network)</li></ol><ul><li>무선 도시지역망, 와이브로가 이에 해당한다, 그 지역 내부에서 어디든지 인터넷이 잘 되지만 다소 느리다는 단점이 있다</li></ul><ol start="40"><li>WWAN(Wireless Wide Area Network)</li></ol><ul><li>무선 광대역 통신망, 휴대폰이 이에 해당한다, 일부 지역을 제외하고 어디서든 통신이 가능하다는점, 2G~4G</li></ul><ol start="41"><li>스마트 카(Smart car) or 커넥티드 카(COnnected car)</li></ol><ul><li>자동차와 IT 기술을 융합하여 인터넷 접속이 가능항 자동차</li></ul><ol start="42"><li>크라우드 소싱(Crowd Sourcing)</li></ol><ul><li>인터넷을 통해 일반 대중이 기업 내부 인력을 대체하는 것을 의미</li></ul><ol start="43"><li>SAN(Storage Area Network)</li></ol><ul><li>‘광저장장치영역 네트워크’라고 불린다, 특수 목적용 고속 네트워크로서 대규모 네트워크 사용자들을 위하여 이기종 간의 데이터 저장장치를 관련 데이터 서버와 함께 연결해 별도의 네트워크를 구성해 관리한다</li></ul><ol start="44"><li>지그비(ZigBee)</li></ol><ul><li>버튼 하나의 동작으로 집안 어느 곳에서나 전등 제어 및 홈 보안 시스템을 제어 관리할 수 있고 인터넷을 통한 전화 접속으로 가정 자동화를 더욱 편리하게 달성하려는 것에서부터 출발한 기술, Ad-hoc 방식 네트워크, 낮은 수준의 전송 속도만 필요로 하면서 긴 베터리 수명과 보안성을 요구하는 분야에서 사용</li></ul><ol start="45"><li>멀웨어(Malware)</li></ol><ul><li>악성 소프트웨어, 사용자가 멀웨어를 설치하게되면 컴퓨터에 대한 액세스 권한을 얻도록 설계되어 컴퓨터에서 액세스한 내용을 추적할 수 있으며 사용자가 인식하지 못 할 수도 있는 피해를 일으킬 수도 있다(키로거, 바이러스, 웜, 스파이웨어)</li></ul><ol start="46"><li>랜섬웨어(Ransomware)</li></ol><ul><li>컴퓨터 시스템을 감염시켜 접근을 제한하고 일종의 몸값을 요구하는 악성 소프트웨어의 한 종류이다</li></ul><ol start="47"><li>MC-Finder</li></ol><ul><li>악성코드 은닉 사이트 탐지 프로그램</li></ul><ol start="48"><li>MOTP(Moblie One Time Password)</li></ol><ul><li>모바일 일회용 비밀번호</li></ul><ol start="49"><li>Network Neutrality</li></ol><ul><li>통신망 제공사업자는 모든 콘텐츠를 동등하고 차별 없이 다뤄야 한다는 원칙</li></ul><ol start="50"><li>ICP(Internet Contents Provider)</li></ol><ul><li>인터넷 콘텐츠 서비스 업체 ex) 네이버, 구글, 페이스북</li></ul><ol start="51"><li>ISP(Internet Service Provider)</li></ol><ul><li>인터넷 서비스 업체 ex) SKT, KT, LG</li></ul><ol start="52"><li>VPN(Virtual Private Network)</li></ol><ul><li>가상 사설망, 사용자의 인터넷 트래픽을 암호화하여 망 제공자로부터 안전하게 인터넷을 사용할 수 있도록 해준다</li></ul><ol start="53"><li>Smishing(SMS phishing)</li></ol><ul><li>문자메시지를 이용한 피싱, 신뢰할 수 있는 사람 또는 기업이 보낸 것처럼 가장하여 개인비밀정보를 요구하거나 휴대폰 소액 결제를 유도한다</li></ul><ol start="54"><li>Sniffing</li></ol><ul><li>패킷 가로채기 공격, 네트워크 상에 떠돌아다니는 패킷이나 데이터 등을 훔쳐보는 것, 암호화 되지 않은 패킷들을 수집하여 순서대로 재조합 후 중요한 정보를 유출하는 수동적인 형태의 공격</li></ul><ol start="55"><li>Snooping</li></ol><ul><li>네트워크 상의 정보를 염탐하여 불법적으로 얻는 것</li></ul><ol start="56"><li>Spoofing</li></ol><ul><li>네트워크 트래픽 흐름을 임의로 변경하고 시스템 권한 탈취 등의 공격, 그 대상은 MAC, IP, Port 주소가 될 수 있다</li></ul><ol start="57"><li>ICMP Sweep</li></ol><ul><li>해당 네트워크를 탐색하면서 살아있는 호스트, 포트를 찾는다, 목표 네트워크나 시스템에 ICMP Echo_Request 패킷을 순차적으로 전송한 후, 응답 패킷을 기반으로 해당 시스템의 동작 여부와 운영체제 종류 등을 파악한다</li></ul><ol start="58"><li>Scanning</li></ol><ul><li>시스템의 상태, 사용하는 서비스 등을 찾아 취약점을 찾는 사전 주비 단계</li></ul><ol start="59"><li>ICMP(Internet Control Message Protocol)</li></ol><ul><li>호스트 서버와 인터넷 게이트 웨이 사이에서 메시지를 제어 하고 에러를 알려주는 프로토콜</li></ul><ol start="60"><li>트로이 목마</li></ol><ul><li>정상적인 프로그램으로 위장한 악성코드, 트로이 목마의 99.99%는 불법 파일이나 프로그램 다운시 전파된다, 트로이 목마는 개인정보 유출, 운영체제 파괴, 속도 느려짐, 시스템 파일 삭제, 부팅 오류, 컴퓨터 하드웨어 자체를 먹통으로 만들 정도로 손상시키기도 한다, 포멧을 해도 복구가 불가능할 수도 있다</li></ul><ol start="61"><li>Tvishing</li></ol><ul><li>스마트 TV의 약점을 이용하여 몰래 악성코드를 심어 TV 기능을 악용하는 피싱 방법</li></ul><ol start="62"><li>Pharming</li></ol><ul><li>웹 브라우저에서 정확한 웹 페이지 주소를 입력해도 가짜 웹 페이지에 접속하게 하여 개인 정보를 훔치거나 금전적 피해를 입히게 하는 피싱방법</li></ul><ol start="63"><li>USIM(Universal Subscriber Identity Module)</li></ol><ul><li>휴대전화에 끼워서 쓰는 일종의 스마크카드, 3G, 4G, WiBro, 데이터 쉐어링 기기를 사용하고 있다면 기기에 하나 씩 들어 있다, 보통 개인 정보를 담고 있어 보안에 신경써야 한다</li></ul><ol start="64"><li>ISP(Information Strategy Planning)</li></ol><ul><li>정보 시스템 구축의 출발점인 계획 단계</li></ul><ol start="65"><li>SCM(Supply Chain Management)</li></ol><ul><li>공급망 관리, 고객이 사용하고자 하는 시점에 원하는 제품을, 원하는 수량만큼 공급하는 것을 목표로함</li></ul><ol start="66"><li>Balanced Scorecard(균형 성과표)</li></ol><ul><li>얼마나 돈을 벌었냐보다, 여러가지 기준을 추가해서 업무의 성과를 판단함</li></ul><ol start="67"><li>BPR(Business Process Reengineering)</li></ol><ul><li>기업 경영 내용이나, 경영 과정을 분석하여 경영 목표 달성에 가장 적합하도록 재설계하고, 그 설계에 따라 기업 형태, 사업 내용, 조직을 재구성 하는 것</li></ul><ol start="68"><li>Strategic Information System(전략적 정보 시스템)</li></ol><ul><li>이전의 정보 시스템이 업무의 합리화나 효율성에 초점을 두었던 것에 반하여, 기업이 경쟁에서 승리하여 살아남기 위한 필수적인 시스템</li></ul><ol start="69"><li>Point of Sale(판매 시점)</li></ol><ul><li>물품 거래가 완료되는 장소, 판매와 관련된 데이터를 일괄적으로 관리하고, 고객 정보를 수집하여 부가 가치를 향사시키는 시스템</li></ul><ol start="70"><li>Decision Support System(결정 지원 시스템)</li></ol><ul><li>회사의 경영층의 의사결정자의 계산 부담을 줄여주고, 정보를 도식화 하여 분석모형과 데이터를 제공함으로써 의사결정자의 의사 결정을 보다 효율적으로 도와주는 응용프로그램</li></ul><ol start="71"><li>Executive Information System(경영 정보 시스템)</li></ol><ul><li>DSS의 일종으로 최고 경영진에게 전략적인 의사 결정에 필요한 정보를 제공하는 체계를 일컫는 사업 용어</li></ul><ol start="72"><li>Product Data Management(제품 데이터 관리)</li></ol><ul><li>소프트웨어나 다른 툴을 이용하여 특정 제품과 관련된 데이터를 추적하고 관리하는 것을 지칭한다</li></ul><ol start="73"><li>Chief Knowledge Officer(지식 총괄 책임자)</li></ol><ul><li>지식의 보존을 통해 기업 가치가 최대로 되도록 하는 책임자를 일컫는다</li></ul><ol start="74"><li>Six Sigma</li></ol><ul><li>기업 내에서 전략적으로 완벽에 가까운 제품이나 서비스를 개발하고 제공하려는 목적으로 정립된 품질 관리 기법</li></ul><ol start="75"><li>5-Forces</li></ol><ul><li>기존 경쟁자 간의 경쟁 정도, 공급자들의 교섭력, 구매자들의 교섭력, 잠재적 진입자들의 위협, 대체제의 위협 이 다섯 가지 요소들의 강약에 의해 산업 내 잠재적 이윤의 수준이 결정되며 산업 분석을 이용하면 전반적 산업의 경쟁강도 파악이 가능하며 특히 산업 내 어느 부분에서 경쟁이 일어나는지 파악 할 수 있다</li></ul><ol start="76"><li>7S</li></ol><ul><li>조직 개발 측면에서 꼭 필요하다고 생각한 일곱가지 요인 Strategy, Structure, Systems, Staff, Shared Value, Skills, Style</li></ul><ol start="77"><li>Community of Practice</li></ol><ul><li>열정과 지식을 공유하는 학습 공동체</li></ul><ol start="78"><li>Work Breakdown Structure(작업 분해도)</li></ol><ul><li>프로젝트의 범위와 최종산출물을 세부 요소로 분할한 계층적 구조</li></ul><ol start="79"><li>Corporate Performance Management(기업 성과 관리)</li></ol><ul><li>경영계획-성과분석- 예측- 전략분석- 시뮬레이션 / 예측 경영을 통한 최적의 의사 결정을 내릴 수 있게 해주는 시스템</li></ul><ol start="80"><li>Groupware</li></ol><ul><li>집단으로 서의 작업을 지원하기 위해 만들어진 소프트웨어</li></ul><ol start="81"><li>Business Process Management(생애 주기)</li></ol><ul><li>프로세스 설계-시뮬레이션-구현-실행-모니터링-최적화</li></ul><ol start="82"><li>@anywhere(앳애니웨어)</li></ol><ul><li>뉴욕타임즈 같은 언론사나 야후 같은 유명 사이트와 제휴를 해서 트위터 사이트로 이동하지 않고도 해당 사이트상에서 최근의 트위터 글을 바로 확인할 수 있는 새로운 플랫폼</li></ul><ol start="83"><li>5G 네트워크 슬라이싱</li></ol><ul><li>5G의 핵심 기술인 네트워크 슬라이싱, 하나의 물리적 ‘코어 네트워크’를 독립된 다수 가상 네트워크로 분리한 뒤 고객 맞춤형 서비스를 제공한다</li></ul><ol start="84"><li>아이엠티 2020(International Mobile Telecommunications-2020,IMT-2020)</li></ol><ul><li>5G 이동통신, 이용자에게 초당 최고 20Gbps의 데이터 전송 속도를 제공할 것을 규정한다, 최고 전송속도 20Gbps, 사용자 체감 전송속도 100Mbps, 전송 지연 시간 1ms 등…</li></ul><ol start="85"><li>EMBB(enhanced Mobile BroadBand)</li></ol><ul><li>초광대역 이동 통신</li></ul><ol start="86"><li>URLLC(Ultra-Reliable and Low Latency Communications)</li></ol><ul><li>초고신뢰 저지연 통신</li></ul><ol start="87"><li>mMTC(massive Machine Type Communications)</li></ol><ul><li>대규모 사물통신</li></ul><ol start="88"><li>4C 분석</li></ol><ul><li>Customer, Competitor, Company, Channel (고객, 경쟁사, 자사, 유통)</li></ul><ol start="89"><li>ERM(Enterprise Risk Management)</li></ol><ul><li>기업이 직면하고 있는 주요 위험들을 식별하고 관리하기 위한 위험 관리 방식</li></ul><ol start="90"><li>PLM(Product Lifecycle Management)</li></ol><ul><li>기업이 제품의 원가를 낮추고 부가가치를 높일 수 있도록 기획부터 설계, 생산, 서비스, 폐기에 이르는 수명주기를 관리하는 것</li></ul><ol start="91"><li>MDM(Master Data Management)</li></ol><ul><li>기업의 내, 외부에 산재해 있는 마스터 데이터의 단일화를 통해 활용도를 높이고 오류를 줄이기 위한 모든 활동</li></ul><ol start="92"><li>VRM(Vendor Relationship Management)</li></ol><ul><li>개인이 기업에게 제공할 개인정보, 선호도, 패턴 등을 관리하는 기술로, 기업이 고객의 정보를 분석 및 통합하여 관리하는 CRM에 반대되는 개념, 개인이 기업에 제공할 정보와 선호도를 관리, 보안이 중요시됨. <a href="https://i-bada.blogspot.com/2012/05/vrmvendor-relationship-management.html" target="_blank" rel="noopener">VRM vs CRM</a></li></ul><ol start="93"><li>Escrow 서비스</li></ol><ul><li>전자상거래 시 판매자와 구매자의 거래가 문제없이 이루어질 수 있도록 제 3자가 도와주는 매매 보호 서비스</li></ul><ol start="94"><li>OPE(Order Preserving Encryption)</li></ol><ul><li>암호화된 수치 데이터들이 원본 수치 데이터와 동일한 순서로 정렬될 수 있도록 해주는 암호화 기술</li></ul><ol start="95"><li>QKD(Quantum Key Distribution)</li></ol><ul><li>양자 통신을 위해 비밀키를 분배하고 관리하는 기술</li></ul><ol start="96"><li>마이핀</li></ol><ul><li>법적 근거 없는 주민번호 수집이 금지되면서 도입된 13자리의 무작위 번호로 온라인상에서 사용되는 아이핀과 달리 오프라인 상에서 주민번호를 대신한다, 유출시 폐기 가능하며 5회까지 변경이 가능하고 유효기간은 3년이다</li></ul><ol start="97"><li>CAPTCHA(Completely Automated Public Turing test to tell Computers and Humans Apart)</li></ol><ul><li>자동 계정 생성 방지 기술은 웹 페이지에서 악의적으로 회원가입을 하거나 스팸 메시지를 보내기 위해 사용되는 프로그램인 봇을 차단하기 위해 만들어졌다.</li></ul><ol start="98"><li>독싱(dropping docs)</li></ol><ul><li>‘문서를 떨어뜨리다’에서 파생된 용어로, 특정 개인이나 조직을 해킹하여 빼낸 정보를 온라인에 공개하는 행위</li></ul><ol start="99"><li>독스웨어</li></ol><ul><li>독스와 랜섬웨어의 합성어</li></ul><ol start="100"><li>스파이웨어</li></ol><ul><li>적절한 사용자 동의 없이 사용자 정보를 수집하는 프로그램</li></ul><ol start="101"><li>웜</li></ol><ul><li>네트워크를 통해 연속적으로 자신을 복제하여 시스템의 부하를 높임으로써 결국 시스템을 다운시키는 바이러스</li></ul><ol start="102"><li>크래킹</li></ol><ul><li>어떤 목적을 가지고 타인의 시스템에 불법으로 침입하여 정보를 파괴하거나 정보의 내용을 자신의 이익에 맞게 변경하는 행위</li></ul><ol start="103"><li>혹스</li></ol><ul><li>악성코드인척하는 소프트웨어, 실제로 악성코드로 행동하지 않음</li></ul><ol start="104"><li>버퍼 오버플로 공격</li></ol><ul><li>버퍼의 크기보다 많은 데이터를 입력하여 프로그램이 비정상적으로 동작하도록 만드는 것</li></ul><ol start="105"><li>NR(New Radio)</li></ol><ul><li>5세대 이동통신의 실현을 위한 무선 접속 기술</li></ul><ol start="106"><li>Force Touch</li></ol><ul><li>애플에서 개발한 트랙패드와 터치스크린에 적용되는 기술로, 패털에 가해지는 힘의 강도를 감지한다</li></ul><ol start="107"><li>GNSS(Global Navigation Satellite System)</li></ol><ul><li>인공위성을 이용하여 위치를 파악하는 항법 시스템. ex) GPS, GLONASS, 갈릴레오, Compass</li></ul><ol start="108"><li>SBAS(Satellite-Based Augmentation System)</li></ol><ul><li>GNSS의 위치 오차를 보정한 정보를 위성을 통해 사용자에게 전달하는 광역의 위성 항법 보정 시스템.</li></ul><ol start="109"><li>SNG(Satellite News Gathering)</li></ol><ul><li>현장에서 촬영한 영상을 위성을 통해 방송사로 전송하는 방식</li></ul><ol start="110"><li>MNG(Mobile News Gathering)</li></ol><ul><li>야외에서 촬영한 영상을 3G, LTE, WiBro, Wi-Fi 등 다양한 무선망 접속 장비를 이용해 전송하는 방식</li></ul><ol start="111"><li>ENG(Electronic News Gathering)</li></ol><ul><li>카메라와 녹화부가 탑재된 일체형 카메라 시스템을 말한다.</li></ul><ol start="112"><li>Brute force attack(무작위 대입 공격)</li></ol><ul><li>특정한 암호를 풀기 위해 가능한 모든 값을 대입하는 것을 의미한다</li></ul><ol start="113"><li>DES(Data Encryption Standard)</li></ol><ul><li>56비트를 사용하는 키</li></ul><ol start="114"><li>Backdoor</li></ol><ul><li>os나 프로그램 등을 만들 때 정상적인 인증 과정을 거치지 않고 접근할 수 있도록 만든 일종의 뒷구멍 같은 개념,네트워크에 허가받지 않고도 들어갈 수 있을 만큼 허술한 부분, 의도적으로 만들어진 보안구멍, 프로그래머의 실수로 만들어진 취약점(익스플로잇)</li></ul><ol start="115"><li>RPO(Recovery Point Objective)</li></ol><ul><li>목표 복구 시점, 허용할 수 있는 데이터의 손실양과 관계가 있다</li></ul><ol start="116"><li>RTO(Recovery Time Objective)</li></ol><ul><li>목표 복구 시간, 최대 허용 다운타임</li></ul><ol start="117"><li>NAS(Network Attached Storage)</li></ol><ul><li>네트워크 결합 스토리지, LAN으로 연결하는 외장 하드디스크 ex) Github</li></ul><ol start="118"><li>DAS(Direct Attached Storage)</li></ol><ul><li>직접 연결 저장장치, ex) 하드디스크</li></ul><ol start="119"><li>HA(High Availability)</li></ol><ul><li>고가용성, 서버와 네트워크, 프로그램 등의 정보 시스템이 상당히 오랜 기간 동안 지속적으로 정상 운영이 가능한 성질, 가용성이 높다는 뜻은 오류가 거의 없고 고장이 잘 안나는 상태를 의미한다</li></ul><ol start="120"><li>ISO 20000</li></ol><ul><li>IT 서비스를 제공하는 기업들이 고객에게 IT 서비스를 제공하고 관리하기 위한 통합된 관리체계를 적용하고 고객에게 적절한 통제, 개선된 효과성 및 개선의 기회를 제공하게 하는 규격, IT 서비스의 수준을 객관적으로 평가하고 서비스 중심의 프로세스, 견고하고 통합화된 프로세스 프레임 워크를 제공하기 위해 만들어졌다</li></ul><ol start="121"><li>디지털 프로슈머</li></ol><ul><li>생산자와 소비자의 합성어, 생산자인 동시에 소비자이고 소비자이면서 생산을 하는 사람들, ex) Github블로그를 운영하면서 광고로 수익을 얻는 사람</li></ul><ol start="122"><li>ITSM(IT Service Management)</li></ol><ul><li>고객에게 제공하는 정보기술 서비스들을 계획, 설계, 전달, 운영하기 위해 단체에 의해 수행되는 활동 전반을 가리킨다</li></ul><ol start="123"><li>ITIL(IT Infrastructure Library)</li></ol><ul><li>IT 서비스 관리에 대한 프레임워크 구현을 돕기 위한 문서들의 집합</li></ul><ol start="124"><li>SYN(Synchronization)</li></ol><ul><li>연결요청플래그, 신호를 전달하는 플래그</li></ul><ol start="125"><li>SDN(Software Defined network)</li></ol><ul><li>소프트웨어 정의 네트워크, 소프트웨어 프로그래밍을 통해 네트워크 경로 설정과 제어 및 복잡한 운용관리를 편하게 처리할 수 있는 차세대 네트워킹 기술 <a href="https://bloter.net/archives/267815" target="_blank" rel="noopener">설명</a></li></ul><ol start="126"><li>QoS(Quality of Service)</li></ol><ul><li>다른 응용 프로그램, 사용자, 데이터 흐름 등에 우선 순위를 정하여, 데이터 전송에 특정 수준의 성능을 보장하기 위한 능력을 말한다, 통신 서비스 품질,</li></ul><ol start="127"><li>KMS(Knowledge Management System)</li></ol><ul><li>지식 관리 시스템, 조직 내의 지식을 관리하는 분산 하이퍼미디어 시스템, 분산되어 있는 다양한 데이터를 효과적으로 저장, 관리, 활용하여 관리자의 의사결정을 지원하는 정보시스템, OLAP, 데이터마이닝 기술을 이용한다</li></ul><ol start="128"><li>SOA(Service Oriented Architecture)</li></ol><ul><li>서비스 지향 아키텍쳐, 업무상의 일처리에 해당하는 소프트웨어 기능을 네트워크 상에 연동하여 시스템 전체를 구축해 나가는 방법론 <a href="https://bcho.tistory.com/372" target="_blank" rel="noopener">EAI &amp; SOA</a></li></ul><ol start="129"><li>Data Mart</li></ol><ul><li>DW 환경에서 정의된 접근계층으로, DW에서 데이터를 꺼내 사용자에게 제공하는 역할을 한다, 특정 사용자가 관심을 갖는 데이터들을 담은 비교적 작은 규모의 DW</li></ul><ol start="130"><li>Ontology</li></ol><ul><li>사람이 인식하고 있는 사물을 기술한 것, 컴퓨터는 온톨로지로 표현된 개념을 이해하고 지식처리를 할 수 있다, 일종의 규칙이라고 생각하면 된다, 컴퓨터는 온톨로지를 토대로 판단을 할 수가 있다.</li></ul><ol start="131"><li>Semantic Web</li></ol><ul><li>컴퓨터가 이해하는 웹, 정보와 자원 사이의 관계-의미 정보를 기계가 처리할 수 있는 온톨로지 형태로 표현하고 이를 자동화된 기계가 처리하도록 하는 프레임워크이자 기술 <a href="https://mnworld.co.kr/401" target="_blank" rel="noopener">시맨틱웹과 온톨로지</a></li></ul><ol start="132"><li>GAN(Generative Adversarial Network)</li></ol><ul><li>생성적 적대 신경망, 비지도 학습에 사용되는 인공지능 알고리즘, 제로섬 게임 틀 안에서 서로 경쟁하는 두 개의 신경 네트워크 시스템에 의해 구현된다(제로 섬 게임: 게임이나 경제이론에서 여러 사람이 서로 영향을 받는 상황에서 모든 이득의 총합이 항상 제로 또는 그 상태를 말한다)</li></ul><ol start="133"><li>Deepfake</li></ol><ul><li>인공지능 기술을 활용해 기존에 있던 인물의 얼굴이나, 특정한 부위를 영화의 CG 처럼 합성한 영상편집물</li></ul><ol start="134"><li>DeepMind</li></ol><ul><li>영국의 AI 프로그램 개발 회사, 구글이 인수하여 구글 딥마인드가 되었다, 심층 인공지능 기술인 ‘심층 큐 네트워크’를 독자적으로 개발하였다. 이 기술은 Deep Neural Network와 Q-Learning을 조합한 기술이다. 규칙을 알지 못하는 상태에서 점수와 픽셀 디스플레이 정보를 활용하여 최고점을 만들기 위해 이전 게임 세션으로부터 학습하는 능력만을 갖추었다. 알파고를 만든 회사이기도 하다</li></ul><p>TTA 정보통신용어 =&gt; <a href="https://terms.tta.or.kr/main.do" target="_blank" rel="noopener">신기술 용어</a><br><br>2018년 1차 정처기 실기 =&gt; <a href="https://bactoria.me/post/17" target="_blank" rel="noopener">blog</a><br><br>2018년 2차 정처기 실기 =&gt; <a href="https://blog.naver.com/PostView.nhn?blogId=owen989&logNo=221311141874" target="_blank" rel="noopener">blog</a><br><br>2018년 3차 정처기 실기 =&gt; <a href="https://blog.naver.com/PostView.nhn?blogId=seungp916&logNo=221372731489&categoryNo=220&parentCategoryNo=190&viewDate=&currentPage=&postListTopCurrentPage=&isAfterWrite=true" target="_blank" rel="noopener">blog</a><br><br>이동통신 =&gt; <a href="https://m.blog.naver.com/PostView.nhn?blogId=wlsthfkim&logNo=220710581614&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">1~5G</a><br><br>정처기 실기 기출 정리 블로그 =&gt; <a href="https://m.blog.naver.com/PostView.nhn?blogId=qkfldkeh&logNo=220739131448&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">blog</a><br></p>]]></content>
      
      
      <categories>
          
          <category> IT Terms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> 용어 </tag>
            
            <tag> 정리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-Flow</title>
      <link href="/2019/03/14/gitflow/"/>
      <url>/2019/03/14/gitflow/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git-Flow"></a>Git-Flow</h2><h3 id="Git-Repository-구성"><a href="#Git-Repository-구성" class="headerlink" title="Git Repository 구성"></a>Git Repository 구성</h3><p>Repository는 Upstream Remote Repository, Origin Remote Repository, Local Repository 이렇게 세가지로<br>구성됩니다. <br><br><span style="background-color: #fdbb5d" >Upstream은개발자들이 공유하는 저장소로 최신 소스코드가 저장되어 있는 원격 저장소입니다.</span><br><br><span style="background-color: #fdbb5d">Origin은 Upstream을 Fork한 원격 개인 저장소 입니다.</span><br><br><span style="background-color: #fdbb5d">Local은 내 컴퓨터에 저장되어 있는 개인 저장소입니다.</span><br></p><p><img src="https://user-images.githubusercontent.com/33630505/54355204-cde93a00-469b-11e9-9586-17f99fe88b8e.JPG" alt="gitflow"></p><p>위 그림을 보면 Local에서 각자 맡은 일을 하고 작업 브랜치를 Origin으로 push합니다. 그리고 다시 Origin에서<br>Upstream으로 merge하는 Pull Request를 생성합니다. Pull Request가 발생하면 팀원과 코드리뷰를 거친후 merge합니다. 그리고 다시 작업을 시작하기 전 <span style="background-color:#fdbb5b">Upstream을 pull</span>하여 작업을 하면 됩니다.</p><h3 id="작업할-때-지켜야할-약속"><a href="#작업할-때-지켜야할-약속" class="headerlink" title="작업할 때 지켜야할 약속"></a>작업할 때 지켜야할 약속</h3><ol><li>작업을 시작하기전 꼭 Upstream에서 pull을 한다.</li><li>reset명령어는 Local에서만 사용한다.</li><li>약속한 commit 규칙을 따른다</li><li>서로 공유하는 브랜치의 커밋 그래프는 함부로 변경하지 않는다.</li><li>자신의 Pull Request는 스스로 merge 한다.</li></ol><h3 id="Git-Flow-개발-흐름"><a href="#Git-Flow-개발-흐름" class="headerlink" title="Git-Flow 개발 흐름"></a>Git-Flow 개발 흐름</h3><p>Git-Flow를 사용했을 때 작업을 어떻게 하는지 살펴보기 전에 먼저 5가지 종류의 브랜치를 소개하겠습니다.<br><br>항상 유지되는 메인 브랜치들(master, develop)과 일정 기간동안만 유지되는 보조 브랜치들(feature, release, hotfix)이 있습니다.<br></p><ul><li>master: 제품으로 출시될 수 있는 브랜치</li><li>develop: 다음 출시 버전을 개발하는 브랜치</li><li>feature: 기능을 개발하는 브랜치</li><li>release: 이번 출시 버전을 준비하는 브랜치</li><li>hotfix: 출시 버전에서 발생한 버그를 수정하는 브랜치</li></ul><p><img src="https://user-images.githubusercontent.com/33630505/54407122-f6b31300-471f-11e9-8112-f23321771f3e.png" alt="branch"></p><h4 id="우아한-형제들’s-blog-위-글-출처"><a href="#우아한-형제들’s-blog-위-글-출처" class="headerlink" title="우아한 형제들’s blog (위 글 출처)"></a>우아한 형제들’s blog (위 글 출처)</h4><p><a href="http://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html" target="_blank" rel="noopener">출처 바로가기</a></p><h4 id="생활코딩-유튜브-강의"><a href="#생활코딩-유튜브-강의" class="headerlink" title="생활코딩 유튜브 강의"></a>생활코딩 유튜브 강의</h4><p><a href="https://www.youtube.com/watch?v=_kxjzlH34xc" target="_blank" rel="noopener">출처 바로가기</a></p><h4 id="Git을-이용한-다양한-협업-워크플로우"><a href="#Git을-이용한-다양한-협업-워크플로우" class="headerlink" title="Git을 이용한 다양한 협업 워크플로우"></a>Git을 이용한 다양한 협업 워크플로우</h4><p><a href="https://lhy.kr/git-workflow" target="_blank" rel="noopener">출처 바로가기</a></p><h4 id="SSH-Key-생성후-Gitlab에-등록하기"><a href="#SSH-Key-생성후-Gitlab에-등록하기" class="headerlink" title="SSH-Key 생성후 Gitlab에 등록하기"></a>SSH-Key 생성후 Gitlab에 등록하기</h4><p><a href="https://m.blog.naver.com/PostView.nhn?blogId=semidex37&logNo=220951282334&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">출처 </a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 협업 </tag>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> Gitlab </tag>
            
            <tag> Git-Flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 명령어 정리</title>
      <link href="/2019/03/12/git/"/>
      <url>/2019/03/12/git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git을-이용한-프로젝트-생성"><a href="#Git을-이용한-프로젝트-생성" class="headerlink" title="Git을 이용한 프로젝트 생성"></a>Git을 이용한 프로젝트 생성</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(1) 로컬에서 시작할 때</span><br><span class="line">1. 프로젝트 폴더로 이동</span><br><span class="line">2. git init  &#x3D;&gt; 앞으로 이 폴더에 있는 모든 파일들을 git 프로그램으로 추적 하겠다, 버전 관리하겠다.</span><br><span class="line">3. 작업하기 (파일 생성, 수정, 삭제 등..) &#x3D;&gt; 코딩</span><br><span class="line">4. git add &#x3D;&gt; 작업 파일이 추가되었음 알리기, source tree 같은 경우 스테이지 올리기.</span><br><span class="line">5. git commit &#x3D;&gt; add되어 있는 파일들의 버전생성, 작업 단위, 커밋은 자주 해주는 것이 좋다. (커밋 규칙을 만들어둘 것)</span><br><span class="line">6. git config --global user.name &quot; &quot; &#x3D;&gt; 버전관리시 사용할 이름.</span><br><span class="line">7. git config --global user.email &quot; &quot; &#x3D;&gt; 이메일</span><br><span class="line"># git config 명령어는 한번만 수행한다.</span><br><span class="line">8. git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Jungjihyuk&#x2F;JH_Life.git &#x3D;&gt; 원격저장소와 로컬저장소 연결(origin 뒤 주소는 본인 주소로)</span><br><span class="line">9. git push -u origin master(git push --set-upstream origin master) &#x3D;&gt; 로컬저장소의 변경내용들(커밋) 원격저장소에 업데이트 하기.</span><br><span class="line">(2) 원격저장소에서 clone하고 시작할 때</span><br><span class="line">1. git clone https:&#x2F;&#x2F;github.com&#x2F;Jungjihyuk&#x2F;JH_Life.git &#x3D;&gt; clone 뒤 주소는 클론할 주소입력</span><br><span class="line">2. 작업하기</span><br><span class="line">3. git add</span><br><span class="line">4. git commit</span><br><span class="line">5. git config --global user.name &quot; &quot;</span><br><span class="line">6. git config --global user.email &quot; &quot;</span><br><span class="line">7. git push -u origin master</span><br></pre></td></tr></table></figure><br><h2 id="기타-Git-사용시-유용한-명령어"><a href="#기타-Git-사용시-유용한-명령어" class="headerlink" title="기타 Git 사용시 유용한 명령어"></a>기타 Git 사용시 유용한 명령어</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. vim 파일명 &#x3D;&gt; vim 프로그램으로 파일 열기 및 생성</span><br><span class="line">2. rm -r .git &#x3D;&gt; git파일 삭제</span><br><span class="line">3. git remote remove origin &#x3D;&gt; 원격저장소 해제</span><br><span class="line">4. cat 파일명 &#x3D;&gt; 파일내용 보기</span><br><span class="line">5. cp file1 file2 &#x3D;&gt; file1 파일을 file2 이름의 파일로 복사</span><br><span class="line">6. git log -p &#x3D;&gt; 이전상태 상세내용 확인</span><br><span class="line">7. git log --reverse &#x3D;&gt; 맨처음 커밋부터 보기</span><br><span class="line">8. git log --decorate --graph &#x3D;&gt; 커밋 내용을 좀 더 시각적으로 보기</span><br><span class="line">9. git log --decorate --all --online &#x3D;&gt; 모든 브랜치에 대한 로그를 한줄로 자세히 보여주기</span><br><span class="line">10. git log --branches --graph --decorate --oneline &#x3D;&gt; 브랜치 정보 확인</span><br><span class="line">11. ctrl + insert &#x3D;&gt; commit 고유번호 복사할때</span><br><span class="line">12. shift + insert &#x3D;&gt; 붙여넣기 할때</span><br><span class="line">13. git diff 고유번호1..고유번호2 &#x3D;&gt; 고유번호1,2는 commit고유번호&#x2F; 1과 2 차이점 보여주기</span><br><span class="line">14. git diff &#x3D;&gt; 전에 작업한 것과 지금 작업한 것의 차이 보여주기</span><br><span class="line">15. git commit --amend &#x3D;&gt; 커밋 내용을 정정한다.</span><br><span class="line">16. git config --unset --global user.name &#x3D;&gt; 사용자 이름 삭제</span><br><span class="line">17. git config --unset --global user.email &#x3D;&gt; 사용자 이메일 삭제</span><br><span class="line">18. git config --list &#x3D;&gt; 사용자 리스트 확인</span><br><span class="line">19. git status &#x3D;&gt; 현재 상태 확인</span><br><span class="line">20. git remove -v &#x3D;&gt; 원격저장소 연결url 확인</span><br><span class="line">21. git tag -a xxx -m &quot; &quot; &#x3D;&gt; 특정 커밋 지점까지 무슨 버전인지 태그를 달아준다. (xxx는 버전 숫자를 &quot; &quot;사이에는 버전 정보)</span><br></pre></td></tr></table></figure><br><h2 id="Git-명령어"><a href="#Git-명령어" class="headerlink" title="Git 명령어"></a>Git 명령어</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. commit</span><br><span class="line">2. branch</span><br><span class="line">3. checkout</span><br><span class="line">4. merge</span><br><span class="line">5. reset</span><br><span class="line">6. revert</span><br><span class="line">7. cherry-pick</span><br><span class="line">8. rebase</span><br></pre></td></tr></table></figure><br><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p><span style="background-color: #fdbb5d">커밋은 git 저장소에 여러분의 디렉토리에 있는 모든 파일에 대한 스냅샷을 기록하는 것입니다.</span><br><br><span style="background-color: #fdbb5d">각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역을 저장합니다.</span><br><br><span style="background-color: #fdbb5d">그래서 대부분의 커밋이 그 커밋 위의 부모 커밋을 가리킵니다.</span><br><br><span style="background-color: #fdbb5d">쉽게 말해 어떠한 작업을 마치고 변경된 파일 내용을 작업 단위별로 관리하기 위해 기록하는 행위 입니다.</span><br></p><blockquote><p>커밋하기</p></blockquote><p>  (1) git commit -m “index.html 수정”<br></p><p>  [d27b]<br>  commit d27b8bb4d1f1949594592agbaskdjwkldsf<br><br>  Author: JH <a href="mailto:&#x77;&#108;&#x67;&#117;&#x72;&#x32;&#x37;&#56;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x77;&#108;&#x67;&#117;&#x72;&#x32;&#x37;&#56;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a><br><br>  Date: Sun Mar 10 11:32:17 2019 +0900<br><br>       index.html 수정<br></p><blockquote><p>(2) git commit -m “main.html 추가”<br></p></blockquote><p>  [d482]<br>  commit d4828s8c89v9b999v0990cv9d9b900ds09d<br><br>  Author: JH <a href="mailto:&#x77;&#108;&#103;&#x75;&#x72;&#50;&#55;&#x38;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#x77;&#108;&#103;&#x75;&#x72;&#50;&#55;&#x38;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a><br><br>  Date: Sun Mar 10 11:33:34 2019 +09000<br><br>      main.html 추가</p><ul><li>d482 커밋의 부모 커밋은 d27b가 된다.</li></ul><br><h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><p><span style="background-color: #fdbb5d">브랜치는 특정 커밋에 대한 참조에 지나지 않는다.</span><br><br><span style="background-color: #fdbb5d">브랜치를 많이 만들어도 메모리나 디스크 공간에 부담이 되지 않기 때문에,</span><br><br><span style="background-color: #fdbb5d">여러분의 작업을 커다란 브랜치로 만들기 보다, 작은 단위로 잘게 나누는 것이 좋습니다.</span><br><br><span style="background-color: #fdbb5d">단순히 브랜치를 ‘하나의 커밋과 그 부모 커밋들을 포함하는 작업 내역’이라고 생각하면 됩니다.</span><br></p><blockquote><p>브랜치 생성 및 삭제</p></blockquote><p>  git branch bugFix (현재 HEAD는 master)<br><br>  =&gt; 생성<br><br>  git checkout -b bugFix<br><br>  =&gt; 생성과 동시에 HEAD옮기기<br><br>  git branch –delete bugFix<br>  =&gt; 삭제<br><br>  git branch -D bugFix <br><br>  =&gt; 브랜치에 commit이 남아 있을때 강제 삭제<br><br>  git push origin :bugFix<br><br>  =&gt; 원격저장소의 브랜치 삭제<br></p><br><h3 id="bugFix-브랜치"><a href="#bugFix-브랜치" class="headerlink" title="bugFix 브랜치"></a>bugFix 브랜치</h3><p><img src="https://user-images.githubusercontent.com/33630505/54259376-df9de500-45a8-11e9-9b89-b067db379e75.JPG" alt="merge"></p><br><h3 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h3><p><span style="background-color: #fdbb5d">HEAD 이동</span></p><ul><li>HEAD는 현재 작업중인 커밋을 가리킨다.<br>일반적으로 HEAD는 브랜치의 이름을 가리키고 있지만 특정 커밋을 가르키도록 이동시킬 수 있다.</li></ul><blockquote><p>git checkout 브랜치명</p></blockquote><br><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p><span style="background-color: #fdbb5d">두 개의 브랜치를 합치는 작업을 merge라고 한다.</span></p><blockquote><p>bugFix 브랜치를 master 브랜치에 merge</p></blockquote><p>  (현재 HEAD위치 master)<br><br>  git merge bugFix<br></p><blockquote><p>master 브랜치에 bugFix를 merge</p></blockquote><p>  (현재 HEAD위치 bugFix)<br><br>  git merge master<br></p><br><h3 id="bugFix-브랜치를-master-브랜치에-merge"><a href="#bugFix-브랜치를-master-브랜치에-merge" class="headerlink" title="bugFix 브랜치를 master 브랜치에 merge"></a>bugFix 브랜치를 master 브랜치에 merge</h3><p><img src="https://user-images.githubusercontent.com/33630505/54261601-87b6ac80-45af-11e9-9a07-83371b7f05b3.JPG" alt="merge3"></p><br><h3 id="Merge-그림"><a href="#Merge-그림" class="headerlink" title="Merge 그림"></a>Merge 그림</h3><p><img src="https://user-images.githubusercontent.com/33630505/54265430-a1a8bd00-45b8-11e9-81d6-26ac10c16f75.JPG" alt="merge123"></p><br><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p><span style="background-color: #fdbb5d">브랜치 접목의 또다른 방법.</span><br><br><span style="background-color: #fdbb5d">커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것.</span><br><br><span style="background-color: #fdbb5d">커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다는 장점이 있다.</span><br><br><span style="background-color: #fdbb5d">저장소의 커밋 로그와 이력이 한결 깨끗해진다.</span><br></p><blockquote><p>bugFix 브랜치를 master 브랜치에 merge</p></blockquote><p>  (현재 HEAD 위치 bugFix)<br><br>  git rebase master<br></p><blockquote><p>master 브랜치를 bugFix 브랜치에 merge</p></blockquote><p>  (현재 HEAD 위치 master)<br><br>  git rebase bugFix<br></p><p> <img src="https://user-images.githubusercontent.com/33630505/54265059-cc464600-45b7-11e9-82e4-3095ac867f02.JPG" alt="rebase11"></p><br><h3 id="Merge-vs-Rebase"><a href="#Merge-vs-Rebase" class="headerlink" title="Merge vs Rebase"></a>Merge vs Rebase</h3><br><h3 id="Merge-1"><a href="#Merge-1" class="headerlink" title="Merge"></a>Merge</h3><p><img src="https://user-images.githubusercontent.com/33630505/54266778-66f45400-45bb-11e9-8bcf-53967155f9cf.jpg" alt="merge456"></p><br><h3 id="Rebase-1"><a href="#Rebase-1" class="headerlink" title="Rebase"></a>Rebase</h3><p><img src="https://user-images.githubusercontent.com/33630505/54265497-c8ff8a00-45b8-11e9-96ca-c2be55e1c6b7.JPG" alt="rebase123"></p><ul><li>상대 참조<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(1) 커밋의 해시를 사용하는 방법.</span><br><span class="line">    ex)</span><br><span class="line">    fed2dkakdfladsfjkl34k234lkjlksfkl23k 라는 커밋해시가 있다고 했을 때</span><br><span class="line">    fed2만 입력해도 인식한다.</span><br><span class="line">(2) ^</span><br><span class="line">    한번에 한 커밋 위로 움직인다.</span><br><span class="line">    ex)</span><br><span class="line">    git checkout master^</span><br><span class="line">(3) ~num</span><br><span class="line">    한번에 여러 커밋 위로 올라가는</span><br><span class="line">    git checkout HEAD~2</span><br><span class="line">    git branch -f master HEAD~3 &#x3D;&gt; 브랜치 강제 옮기기 (HEAD에서 세번 뒤로 옮겨짐)</span><br></pre></td></tr></table></figure></li></ul><br><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p><span style="background-color: #fdbb5d">브랜치로 하여금 예전의 커밋을 가리키도록 이동시키는 방식으로 변경 내용을 되돌립니다.</span><br><br><span style="background-color: #fdbb5d">애초에 커밋을 하지 않은 것처럼 예전 커밋으로 브랜치를 옮기는 것.</span><br><br><span style="background-color: #fdbb5d">각자의 컴퓨터에서 작업하는 로컬 브랜치의 경우 리셋을 잘 쓸 수 있다.</span><br><br><span style="background-color: #dc143c">하지만 다른 사람이 작업하는 리모트 브랜치에는 사용할 수 없다. </span><br></p><br><h3 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h3><p><span style="background-color: #fdbb5d">변경분을 되돌리고, 이 되돌린 내용을 다른 사람들과 공유하기 위해서는 revert를 사용한다.</span><br></p><br><h3 id="Cherry-pick"><a href="#Cherry-pick" class="headerlink" title="Cherry-pick"></a>Cherry-pick</h3><p><span style="background-color: #fdbb5d">합치고 싶은 커밋만 합친다.</span><br><br><span style="background-color: #fdbb5d">합치고 싶은 커밋의 해시값을 알때 유용하다.</span><br></p><blockquote><p>git cherry-pick <commit1><commit2>….</p></blockquote><br><h3 id="Interactive-rebase"><a href="#Interactive-rebase" class="headerlink" title="Interactive rebase"></a>Interactive rebase</h3><p><span style="background-color: #fdbb5d">합치고 싶은 커밋의 해시값을 모를때 유용하다.</span><br></p><blockquote><p>git rebase -i HEAD~4</p></blockquote><br><h3 id="Pull-vs-Fetch"><a href="#Pull-vs-Fetch" class="headerlink" title="Pull vs Fetch"></a>Pull vs Fetch</h3><br><h3 id="Git-사용시-여러가지-에러"><a href="#Git-사용시-여러가지-에러" class="headerlink" title="Git 사용시 여러가지 에러"></a>Git 사용시 여러가지 에러</h3><ol><li>git add 에러</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">warning: LF will be replaced by CRLF in [xxx.txt or xxx.xml 등...]</span><br><span class="line">The file will have its original line endings in your working directory.</span><br></pre></td></tr></table></figure><p>CR(Carriage-Return)과 LF(Line Feed)<br><br>=&gt; 윈도우는 CRLF<br><br>   CR=&gt; 현재라인에서 커서의 위치를 맨 앞으로 옮기는 동작<br><br>   LF =&gt; 커서의 위치는 그대로 두고 종이를 한 라인 위로 올리는 동작<br><br>=&gt; Mac과 Linux는 LF문자만 사용<br>.<br>=&gt; Git은 커밋할 때 자동으로 CRLF를 LF로 변환해주고 반대로 CheckOut할 때 LF를 CRLF로 변환해 주는 기능이 있다.<br></p><p>git config –global core.autocrlf (true/input/false) <br><br>위 명령어로 에러 해결! <br><br>자세한 내용은 밑 url 참고<br></p><p><a href="http://handam.tistory.com/127" target="_blank" rel="noopener">출처</a><br></p><hr><p>Git 이해하는데 도움되는 : <a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Git</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 명령어 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 문법 정리(자주 까먹는 것들)</title>
      <link href="/2019/01/23/python/"/>
      <url>/2019/01/23/python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><blockquote><p>Do it! 점프 투 파이썬 책에 나온 까먹기 쉬운 내용들로 구성했습니다. <br></p></blockquote><p><strong>목차</strong></p><ol><li>자료형</li><li>클래스(변수와 객체)</li><li>제어문</li></ol><h3 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 숫자</span><br><span class="line">- 문자열</span><br><span class="line">- 리스트</span><br><span class="line">- 튜플</span><br><span class="line">- 딕셔너리</span><br><span class="line">- 집합</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/51591743-31bf7400-1f31-11e9-9b71-9850268ac951.jpg" alt="1"><br><img src="https://user-images.githubusercontent.com/33630505/51591744-32580a80-1f31-11e9-9276-066bce8166ed.jpg" alt="2"><br><img src="https://user-images.githubusercontent.com/33630505/51591745-32580a80-1f31-11e9-9b81-f6c7fcb9cd3a.jpg" alt="3"><br><img src="https://user-images.githubusercontent.com/33630505/51591746-32580a80-1f31-11e9-9156-0534ecd4a94d.jpg" alt="4"><br><img src="https://user-images.githubusercontent.com/33630505/51591748-32f0a100-1f31-11e9-8f6c-ef46202eacff.jpg" alt="5"></p><h3 id="클래스-변수와-객체-그리고-함수"><a href="#클래스-변수와-객체-그리고-함수" class="headerlink" title="클래스(변수와 객체 그리고 함수)"></a>클래스(변수와 객체 그리고 함수)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">변수: 객체를 저장한 공간.</span><br><span class="line">객체: 메모리에 저장된 자료.</span><br><span class="line">클래스(class): Field(상태) + Method(행동)</span><br><span class="line">        객체를 생성하기 위한 설계도.</span><br><span class="line">인스턴스(instance): 클래스에 의해 생성된 객체</span><br><span class="line">함수: 프로그램의 동작 요소, 입출력 설계의 핵심.</span><br><span class="line">      보통 함수는 input -&gt; func -&gt; output 구조이다.(input, output은 있을수도 없을수도 있다.)</span><br></pre></td></tr></table></figure><ul><li>객체와 인스턴스 구분</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># int(정수형 클래스)</span><br><span class="line">a&#x3D;3</span><br><span class="line">b&#x3D;5</span><br><span class="line"></span><br><span class="line"># a와 b는 서로 다른 객체, 같은 클래스의  인스턴스.</span><br><span class="line">a is b &#x3D;&gt; False (a와 b가 같은 인스턴스 입니까?&#x2F;No)</span><br><span class="line">isinstance(a,int) &#x3D;&gt; True (a가 int 클래스의 인스턴스 입니까?&#x2F;Yes)</span><br><span class="line">isinstance(b,int) &#x3D;&gt; True (b가 int 클래스의 인스턴스 입니까?&#x2F;Yes)</span><br><span class="line"></span><br><span class="line">※ a&#x3D;&#x3D;b a와 b가 같은 값을 가졌습니까? &#x2F; No</span><br></pre></td></tr></table></figure><blockquote><p>프로그래밍 언어에 클래스는 왜 있는걸까?<br>c 언어 같은 경우 절차지향적 프로그래밍 언어로 클래스를 사용하지 않고도<br>프로그래밍이 가능하다. (but 구조체와 함수 포인터를 활용하여 객체지향적 프로그래밍 가능)<br>그렇다면 왜 굳이 객체지향적 프로그래밍을 위한 클래스가 필요한 것인가?</p></blockquote><ul><li>우선 절차지향과 객체 지향 프로그래밍부터 알아보자.<h4 id="절차지향"><a href="#절차지향" class="headerlink" title="절차지향"></a>절차지향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">컴퓨터의 작업 처리 방식과 유사하게 순차적인 프로그래밍을 말합니다.</span><br><span class="line">프로그램 전체가 유기적으로 연결되어 있어 객체지향 언어에 비해</span><br><span class="line">처리 속도가 빠르다는 장점이 있지만 여러가지 불편한 점들이 있습니다.</span><br></pre></td></tr></table></figure></li></ul><h4 id="객체지향"><a href="#객체지향" class="headerlink" title="객체지향"></a>객체지향</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">실제 세계와 유사한 3차원적 개념을 표현해내기 위해 만들어진</span><br><span class="line">프로그래밍 방법으로 마치 로봇의 부품들을 따로 개발하여</span><br><span class="line">하나의 로봇을 만드는 것과 같은 원리의 프로그래밍 방식입니다.</span><br><span class="line">객체 지향 프로그래밍으로 인해 코드의 재사용성 및 이식성이 높아졌고</span><br><span class="line">유지 보수에 용이하며 데이터의 보호, 코드의 중복 제거의 긍정적인 효과를 가져왔습니다.</span><br></pre></td></tr></table></figure><ul><li>언어의 발전<br><br><strong>기계어(0,1) -&gt; 어셈블리어(최소한의 알파벳으로 치환한 언어) -&gt; 구조적 언어-&gt; 객체지향적 언어</strong></li></ul><h4 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">객체지향적 프로그래밍과 클래스가 연관되어 있다는 느낌이 오는가?</span><br><span class="line">그래도 클래스는 도저히 감이 안온다.</span><br><span class="line">위에서 클래스를 객체를 생성하기 위한 설계도라고 했었다.</span><br><span class="line">예를 들어 로봇을 만든다고 가정했을 때</span><br><span class="line">로봇의 팔, 몸통, 다리, 머리 가 있다고 한다면</span><br><span class="line">팔 클래스, 몸통 클래스, 다리 클래스, 머리 클래스를 나누어</span><br><span class="line">팔 클래스에서는 팔만 찍어내고 몸통 클래스에서는 몸통만 찍어내는</span><br><span class="line">기계라고 생각하면 쉽게 이해할 수 있을 것이다.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python에서 class 형태</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 클래스명 <span class="params">(self, 인수<span class="number">1</span>, 인수<span class="number">2.</span>..)</span>:</span></span><br><span class="line">self.인수<span class="number">1</span>=인수<span class="number">1</span></span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>:</span>        <span class="comment"># init함수는 인스턴스 생성시 항상 실행되는 함수.</span></span><br><span class="line">xxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 함수명 :</span></span><br><span class="line">xxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 클래스명<span class="params">(상속)</span> :</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 호출</span></span><br><span class="line">xxx = 클래스명(xxx)</span><br><span class="line">xxx.함수명(xxx)</span><br><span class="line"></span><br><span class="line">클래스명.함수명(xxx,xxxx,...)</span><br></pre></td></tr></table></figure><blockquote><p>self를 사용하는 이유. <br><br>  self는 python만의 독특한 특징이다.<br><br>  왜 괜히 헷갈리게 self를 사용하는 것일까?<br><br>  진짜 이유는 python을 만든사람만 알겠지만<br><br>  python에서 self를 사용할 수 밖에 없는 이유는<br><br>  self를 써 줘야만 해당 함수를 <strong>인스턴스의 함수<strong>로 사용할 수 있기 때문이다.<br><br>  그리고 self를 간단히 말하면 함수를 부르는 객체가<br>  해당 클래스의 인스턴스인지 확인헤 주기 위한 장치입니다.<br><br>  또한 self를 이용하면 객체 내의 정보를 저장하거나 불러올 수 있습니다.<br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 예시</span></span><br></pre></td></tr></table></figure><h4 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h4><h3 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- if</span><br><span class="line">- for</span><br><span class="line">- while</span><br></pre></td></tr></table></figure><ul><li>제어문은 코드로 알아보자.</li></ul><h3 id="if-문"><a href="#if-문" class="headerlink" title="if 문"></a>if 문</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pocket = &#123;<span class="string">'money'</span>:<span class="number">3000</span>,<span class="string">'cellPhone'</span>:<span class="number">01090618472</span>&#125;</span><br><span class="line">bag = &#123;<span class="string">'note'</span>:<span class="string">'notebook'</span>,<span class="string">'laptop'</span>:<span class="string">'samsung'</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">'money'</span> <span class="keyword">not</span> <span class="keyword">in</span> pocket <span class="keyword">and</span> bag:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"버스를 탄다"</span>)</span><br></pre></td></tr></table></figure><h3 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 순회할 리스트가 있는 경우</span></span><br><span class="line"></span><br><span class="line">scores= [<span class="number">90</span>, <span class="number">25</span>, <span class="number">67</span>, <span class="number">45</span>, <span class="number">80</span>]</span><br><span class="line">number=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> scores:</span><br><span class="line">number+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> score&lt;<span class="number">60</span>: <span class="keyword">continue</span></span><br><span class="line">print(<span class="string">"%d번 학생 축하합니다."</span>%number)</span><br><span class="line">print(<span class="string">"&#123;&#125;점으로 합격입니다."</span>.format(score))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 순회 횟수가 정해져 있는 경우</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11172</span>):</span><br><span class="line">print(chr(<span class="number">44032</span>+i), end=<span class="string">""</span>)</span><br><span class="line"><span class="comment"># 가 부터 힣까지 11172자 한글출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">print(i*j, end=<span class="string">" "</span>)</span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line"><span class="comment"># 구구단 2~9단 출력</span></span><br></pre></td></tr></table></figure><h3 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">coffee = <span class="number">10</span></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> coffee != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"남은 커피량 &#123;&#125;개"</span>.format(coffee))</span><br><span class="line">    <span class="keyword">if</span> coffee==<span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"커피를 채워주세요."</span>)</span><br><span class="line">        coffee=int(input(<span class="string">"채울 커피량을 입력해주세요."</span>))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    money = int(input(<span class="string">"동전을 넣어주세요\n"</span>))</span><br><span class="line">    <span class="keyword">if</span> (money == <span class="number">300</span>):</span><br><span class="line">        print(<span class="string">"커피가 나왔습니다."</span>)</span><br><span class="line">        coffee -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> (money &gt; <span class="number">300</span>):</span><br><span class="line">        print(<span class="string">"거스름돈:&#123;&#125;, 커피나왔습니다."</span>.format(money<span class="number">-300</span>))</span><br><span class="line">        coffee -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125;원이 반환됩니다, 300원을 넣어주세요."</span>.format(money))</span><br></pre></td></tr></table></figure><p>txt file read error =&gt; <a href="https://blog.naver.com/PostView.nhn?blogId=yejoon3117&logNo=221058408177&beginTime=0&jumpingVid=&from=search&redirect=Log&widgetTypeCall=true" target="_blank" rel="noopener">blog</a><br><br>python input vs raw_input =&gt; <a href="https://aceatom.tistory.com/13" target="_blank" rel="noopener">tistory</a><br><br>atom editor 단축키 모음 =&gt; <a href="https://ondesk.tistory.com/178" target="_blank" rel="noopener">tistory</a><br><br>python 문자열 관련 함수 =&gt; <a href="http://itbaby.egloos.com/4243381" target="_blank" rel="noopener">itbaby</a><br></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 한눈에 정리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 알고리즘 문제 풀이</title>
      <link href="/2019/01/13/baekjoon-algorithm/"/>
      <url>/2019/01/13/baekjoon-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="2439번-정답"><a href="#2439번-정답" class="headerlink" title="2439번(정답)"></a>2439번(정답)</h2><h3 id="별찍기-2"><a href="#별찍기-2" class="headerlink" title="별찍기-2"></a>별찍기-2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(x, n):</span><br><span class="line">print(<span class="string">" "</span>, end=<span class="string">""</span>)</span><br><span class="line">print(<span class="string">"*"</span>*x)</span><br></pre></td></tr></table></figure><h2 id="2441번-정답"><a href="#2441번-정답" class="headerlink" title="2441번(정답)"></a>2441번(정답)</h2><h3 id="별찍기-4"><a href="#별찍기-4" class="headerlink" title="별찍기-4"></a>별찍기-4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(x, n+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">"*"</span>, end=<span class="string">""</span>)</span><br><span class="line">print(<span class="string">" "</span>)</span><br><span class="line">print(<span class="string">" "</span>*x, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h2 id="7489번-오답"><a href="#7489번-오답" class="headerlink" title="7489번(오답)"></a>7489번(오답)</h2><h3 id="팩토리얼"><a href="#팩토리얼" class="headerlink" title="팩토리얼"></a>팩토리얼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> range(int(input())):</span><br><span class="line">num = int(input())</span><br><span class="line">facto = <span class="number">1</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">array = []</span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num+<span class="number">1</span>):</span><br><span class="line">facto = facto * i</span><br><span class="line">result = str(facto)</span><br><span class="line">array = list(result)</span><br><span class="line">array.reverse()</span><br><span class="line">length = len(array)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line"><span class="keyword">if</span> array[j] == <span class="string">'0'</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> array[j] != <span class="string">'0'</span>:</span><br><span class="line">print(array[j])</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>테스트 갯수 입력후 숫자 n 입력하면 factorial 결과에서 0이 아닌 가장 마지막 숫자 출력.<br><br>이를 테스트 갯수만큼 실행. (실행은 되지만 백준online에서 오답이라고 표시함)<br><br>왜 틀렸을까..?</li></ul><h2 id="10828번-정답"><a href="#10828번-정답" class="headerlink" title="10828번(정답)"></a>10828번(정답)</h2><h3 id="스택"><a href="#스택" class="headerlink" title="스택"></a>스택</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">stack = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">order = input().split()</span><br><span class="line"><span class="keyword">if</span> order[<span class="number">0</span>] == <span class="string">'push'</span>:</span><br><span class="line">stack.append(int(order[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">elif</span> order[<span class="number">0</span>] == <span class="string">'pop'</span>:</span><br><span class="line"><span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(stack[<span class="number">-1</span>])</span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">elif</span> order[<span class="number">0</span>] == <span class="string">'empty'</span>:</span><br><span class="line"><span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span> order[<span class="number">0</span>] == <span class="string">'top'</span>:</span><br><span class="line"><span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(stack[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 백준 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>영문법 정리</title>
      <link href="/2018/11/04/grammer/"/>
      <url>/2018/11/04/grammer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Samsung Note 프로그램으로 필기했던 내용들을 사진으로 업로드 하였습니다.<br>사진으로 첨부했기 때문에 폰트 크기가 작아 웹 브라우저 크기를 최대로 해서 보길 권장 드립니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 의사소통을 위한 3가지 원칙</span><br><span class="line">- 원칙 3 가지</span><br><span class="line">- 그 외 의사소통에 도움되는 팁</span><br><span class="line">2. 명사</span><br><span class="line">- 명사의 종류</span><br><span class="line">- 한정사</span><br><span class="line">- 명사를 꾸며주는 품사들</span><br><span class="line">3. 동사</span><br><span class="line">- 동사의 위치</span><br><span class="line">- 일반동사 그리고 be 동사</span><br><span class="line">- 시제</span><br><span class="line">- 자동사와 타동사</span><br><span class="line">- 사역동사</span><br><span class="line">- 동사의 변산(to 부정사, 분사, 동명사)</span><br><span class="line">- 태</span><br><span class="line">- 조동사 그리고 가정문</span><br><span class="line">4. 전치사</span><br><span class="line">- 전치사가 갖고 있는 여러가지 이미지</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/33630505/51234340-d846ca80-19af-11e9-87d1-8bfe8ce14cce.JPG" alt="1-1"><br><img src="https://user-images.githubusercontent.com/33630505/51234341-d846ca80-19af-11e9-8c2a-ad6d3d9e8452.JPG" alt="1-2"><br><img src="https://user-images.githubusercontent.com/33630505/51234342-d846ca80-19af-11e9-97a8-baeca23b2af6.JPG" alt="1-3"><br><img src="https://user-images.githubusercontent.com/33630505/51234343-d8df6100-19af-11e9-8b5f-fcbf3ab57977.JPG" alt="2-1"><br><img src="https://user-images.githubusercontent.com/33630505/51234344-d8df6100-19af-11e9-898c-931ed0d75268.JPG" alt="3-1"><br><img src="https://user-images.githubusercontent.com/33630505/51234345-d8df6100-19af-11e9-8035-d471097340df.JPG" alt="3-2"><br><img src="https://user-images.githubusercontent.com/33630505/51234348-d977f780-19af-11e9-9a72-d6dcae44548a.JPG" alt="3-3"><br><img src="https://user-images.githubusercontent.com/33630505/51234349-d977f780-19af-11e9-8c68-d290ccac513e.JPG" alt="3-4"><br><img src="https://user-images.githubusercontent.com/33630505/51234350-d977f780-19af-11e9-8061-758b44a09bb2.JPG" alt="3-5"><br><img src="https://user-images.githubusercontent.com/33630505/51234351-da108e00-19af-11e9-99db-164ed4563fe5.JPG" alt="3-6"><br><img src="https://user-images.githubusercontent.com/33630505/51234352-da108e00-19af-11e9-848e-7bb5249aaafd.JPG" alt="3-7"><br><img src="https://user-images.githubusercontent.com/33630505/51234353-da108e00-19af-11e9-8228-da6ceefb218f.JPG" alt="3-8"><br><img src="https://user-images.githubusercontent.com/33630505/51234354-daa92480-19af-11e9-94cc-81c86dcf0697.JPG" alt="3-9"><br><img src="https://user-images.githubusercontent.com/33630505/51234355-daa92480-19af-11e9-88e4-146e02a7b5c2.JPG" alt="3-10"><br><img src="https://user-images.githubusercontent.com/33630505/51234356-daa92480-19af-11e9-96b4-6673610dfc41.JPG" alt="3-11"><br><img src="https://user-images.githubusercontent.com/33630505/51234357-db41bb00-19af-11e9-9030-c813eecfb8b7.JPG" alt="4-1"><br><img src="https://user-images.githubusercontent.com/33630505/51234358-db41bb00-19af-11e9-9ce0-5db751b9bb36.JPG" alt="4-2"><br><img src="https://user-images.githubusercontent.com/33630505/51234359-db41bb00-19af-11e9-911d-3d0ecb8aae64.JPG" alt="4-3"><br><img src="https://user-images.githubusercontent.com/33630505/51234360-db41bb00-19af-11e9-8049-f7d296a0055d.JPG" alt="4-4"><br><img src="https://user-images.githubusercontent.com/33630505/51234362-dbda5180-19af-11e9-89d3-8175bf70e952.JPG" alt="4-5"><br><img src="https://user-images.githubusercontent.com/33630505/51234364-dbda5180-19af-11e9-8661-1ac21b80539b.JPG" alt="4-6"><br><img src="https://user-images.githubusercontent.com/33630505/51234365-dbda5180-19af-11e9-9e4b-4b9ee87c7ebb.JPG" alt="4-7"><br><img src="https://user-images.githubusercontent.com/33630505/51234366-dc72e800-19af-11e9-831b-3546902e97e6.JPG" alt="4-8"><br><img src="https://user-images.githubusercontent.com/33630505/51234367-dc72e800-19af-11e9-9603-176018d1add2.JPG" alt="4-9"><br><img src="https://user-images.githubusercontent.com/33630505/51234368-dc72e800-19af-11e9-8cf0-431d756a8506.JPG" alt="4-10"></p><p>위 그림에 대한 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6370408" target="_blank" rel="noopener">책 출처</a><br></p><ul><li>영문법 공부에 도움이 될만한 사이트.<br><br>Hakmalyoung tistory: <a href="https://hakmalyoung.tistory.com" target="_blank" rel="noopener">https://hakmalyoung.tistory.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 영어 </tag>
            
            <tag> 문법 </tag>
            
            <tag> 한눈에 보기 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsp &amp; Servlet</title>
      <link href="/2018/07/28/jspandservlet/"/>
      <url>/2018/07/28/jspandservlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Jsp-amp-Servlet"><a href="#Jsp-amp-Servlet" class="headerlink" title="Jsp &amp; Servlet"></a>Jsp &amp; Servlet</h1><blockquote><p>책을 바탕으로 이해하기 쉽게 재구성 하였습니다. <br><br><strong>목차</strong> <br></p></blockquote><ol><li>Jsp와 Servlet 이란?</li><li>Jsp 구성 요소</li></ol><ul><li>디렉티브</li><li>스크립트</li><li>표현언어(EL)</li><li>내장객체</li><li>정적 데이터</li><li>액션태그</li><li>커스텀 태그와 표준 태그 라이브러리</li></ul><ol start="3"><li>Model 1 &amp; Model 2</li><li>내장객체 &amp; 메소드</li></ol><ul><li>요청과 응답</li><li>출력</li><li>pageContext</li><li>application</li><li>쿠키</li><li>세션</li></ul><ol start="5"><li>EL(Expression Language)</li><li>JSTL(Java Standard Tag Library)</li><li>JDBC(Java Database Connectivity)</li></ol><hr><h1 id="Jsp와-Servlet"><a href="#Jsp와-Servlet" class="headerlink" title="Jsp와 Servlet"></a>Jsp와 Servlet</h1><h2 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jsp(Java Server Page)는 자바로 서버 페이지를 작성하기 위한 언어 및 파일.</span><br><span class="line">동적 데이터를 처리할 수 있는 HTML + Java 페이지 또는 언어라고 볼 수도 있다.</span><br><span class="line">Jsp는 웹 어플리케이션의 관점에서 봤을 때 View의 역할을 한다.</span><br><span class="line">물론! JSP도 Controller 역할을 할 수 있다.</span><br></pre></td></tr></table></figure><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Servlet(Server + Applet)은 Applet의 단점을 극복하여 만들어진 java기반 서버 프로그램.</span><br><span class="line">Servlet을 사용하면 클라이언트가 웹 브라우저를 통해 요청을 하면 서버에서 실행한 후 결과값만 전송합니다.</span><br><span class="line">쉽게말해 동적 데이터 처리를 담당하여 결과값만 전송해주는 역할을 한다.</span><br><span class="line">Servlet은 웹 어플리케이션의 관점에서 봤을 때 Controller의 역할을 한다.</span><br></pre></td></tr></table></figure><p><code>잠깐!!</code> JSP도 controller 역할을 할 수 있는데 굳이 Servlet을 이용해서 MVC 패턴을 구성하는가? (MVC 패턴이 익숙하지 않다면 model1 &amp; model2 파트를 읽어보세요!)</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">좋은 프로그래밍이란 무엇일까?</span><br><span class="line">먼저 객체 지향 프로그래밍에 있어서 코드의 재사용성, 가독성, 효율성은 굉장히 중요한 문제이다.</span><br><span class="line">정상적으로 프로그램이 동작하더라도 코드를 실행이 되는것에만</span><br><span class="line">집중하여 만든다면 나중에 분명 후회하게 될것이다.</span><br><span class="line">만약 누군가와 같이 협업을 하거나 비슷한 로직을 다시 구현해야 할 때가 오면</span><br><span class="line">코드가 복잡해서 유지보수 하기 힘들거나 개발 시간이 늘어나기 마련이다.</span><br><span class="line"></span><br><span class="line">그래서!!</span><br><span class="line">가독성, 재사용성, 효율성을 극대화 하기 위해서는 프로세스 단위를 적절하게 분리해 두는 것이 중요하다.</span><br><span class="line">따라서 대부분의 로직들을 Servlet으로 만들고 보여지는 부분을 JSP로 구현하면 코드의 가독성도 높아지고</span><br><span class="line">재사용성, 효율성이 높아진다.</span><br><span class="line"></span><br><span class="line">결과적으로 Servlet과 JSP의 분리로 프론트 엔드 개발자, 디자이너와 백엔드 개발자 작업환경이 쾌적해지는 것은 덤이다.</span><br></pre></td></tr></table></figure><h2 id="JSP-구성-요소"><a href="#JSP-구성-요소" class="headerlink" title="JSP 구성 요소"></a>JSP 구성 요소</h2><ol><li><kbd><strong>디렉티브</strong></kbd> <br></li></ol><ul><li>page : jsp 페이지에 대한 정보를 지정한다. (문서 타입, 출력버퍼의 크기, 에러 페이지 등)</li><li>taglib: jsp 페이지에서 사용할 태그 라이브러리 지정 (코어태그)</li><li>include: jsp 페이지의 특정 영역에 다른 문서를 포함시킨다.</li></ul><ol start="2"><li><kdb><strong>스크립트</strong></kdb> <br><br>스크립트 기반 태그들은 <strong>&lt;%로 시작해서 %&gt;</strong>로 끝나는 것이 특징입니다.</li></ol><ul><li>주석문(comment) <br><br>jsp 주석문 &lt;%- -%&gt; <br><br>html 주석문 &lt;!- -&gt;</li><li>지시자(directive) <br><br>page: jsp 페이지에 종속적인 설정 정보를 알려준다. <br><br>contentType: 웹 브라우저에 전송되는 문서의 타입과 문자코드를 지정한다. <br><br>import: 내장 패키지를 사용할 때 해당 패키지를 사용할 수 있게 불러온다. <br><br>errorPage, is ErrorPage: jsp 페이지에서 오류가 발생했을 때 오류를 처리하기 위한 속성. <br><br>pageEncoding: jsp 소스 저장시 사용할 문자코드를 지정한다. <br><br>session: 해당 jsp 페이지의 세션 관리 처리 여부를 지정할 때 사용된다. <br><br>include: 다른 jsp 파일을 삽입한다. <br><br>language: 페이지에서 사용되는 스크립트 언어를 지정한다.<br></li><li>스크립트릿(scriptlet) <br><br>&lt;% %&gt; <br><br>jsp 페이지 내에서 자바코드를 실행 하고 싶을 때 사용한다.</li><li>표현식(expression) <br><br>&lt;%= %&gt; <br><br>동적 데이터를 응답 결과에 포함 시키기 위해 사용한다.</li><li>선언문(declaration) <br><br>&lt;%! %&gt; <br><br>jsp 페이지 내에서 사용할 멤버 변수를 선언하고 메소드를 정의하고자 할 때 사용된다.</li></ul><h2 id="Model-1-amp-Model-2"><a href="#Model-1-amp-Model-2" class="headerlink" title="Model 1 &amp; Model 2"></a>Model 1 &amp; Model 2</h2><p>JSP로 구성된 웹 어플리케이션을 개발하다 보면 빠질 수 없는 개념이 있다. <br><br>바로 Model 1, Model 2 그리고 MVC 패턴. <br><br>Model1, 2은 웹 어플리케이션의 아키텍쳐이다. <br><br>브라우저와 서버, 그리고 데이터베이스 간의 소통을 어떤 패턴으로 하는지에 대한 정형화된 방식이라고 생각하면 된다.<br><br>이해가 가지 않는다면 Model1과 2는 각각의 프로그래밍하는 방식이라고만 생각해도 된다.<br><br><br><br>MVC 패턴은 Model, View, Controller의 약자로 Model 1과 2방식에서 사용되는 패턴이다.<br><br>브라우저에서 url로 특정 어플리케이션을 요청하면 Controller가 어떤 행위인지 판단하고, 처리를 담당하는데 처리에 필요한 데이터를 <br><br>Model에서 꺼내와 다시 Controller가 처리를 마치면 View를 통해 결과를 보여준다.<br><br><br></p><p>그렇다면 MVC패턴이 적용된 Model 1과 2는 정확히 무엇일까? <br></p><h4 id="Model-1"><a href="#Model-1" class="headerlink" title="Model 1"></a>Model 1</h4><p><img src="https://user-images.githubusercontent.com/33630505/56863468-84597200-69f1-11e9-84e7-45fcfd0d04d3.JPG" alt="model1"></p><h4 id="Model-2"><a href="#Model-2" class="headerlink" title="Model 2"></a>Model 2</h4><p><img src="https://user-images.githubusercontent.com/33630505/56863469-86233580-69f1-11e9-84a4-de7c0952a9bd.JPG" alt="model2"></p><p>위 그림을 보면 Model 1방식은 JSP가 View와 Controller의 역할을 하고 JavaBean이 Model역할을 한다. <br><br>그리고 Model 2방식은 Servlet이 Controller역할을, JSP가 View 역할을 하고 JavaBean이 Model역할을 한다.<br><br><br><br>여기서 Database를 공부해 본사람이라면 의문이 들수 있다. <br><br>Model에서 데이터를 갖고 온다면 Database가 Model인거 아닐까? 라고 생각할 수 있다. <br><br>그런데 Database에서 매번 데이터를 직접 꺼내오게되면 문제가 생긴다. <br><br>보안상의 문제가 될수 있고, 처리 속도측면에서 저하될 가능성이 있다. (확인되지 않은 추측이므로 이부분은 그냥 넘어가도 좋다. 확실히 하고 싶다면 추가적으로 공부하도록 하자!) <br><br>따라서 Model은 Database에서 필요한 데이터만 미리 저장해두고 이용하는 부분이라고 생각하면 된다.<br></p><h2 id="내장객체-amp-메소드"><a href="#내장객체-amp-메소드" class="headerlink" title="내장객체 &amp; 메소드"></a>내장객체 &amp; 메소드</h2><h2 id="EL-Expression-Language"><a href="#EL-Expression-Language" class="headerlink" title="EL(Expression Language)"></a>EL(Expression Language)</h2><h2 id="JSTL-Java-Standard-Tag-Library"><a href="#JSTL-Java-Standard-Tag-Library" class="headerlink" title="JSTL(Java Standard Tag Library)"></a>JSTL(Java Standard Tag Library)</h2><h2 id="JDBC-Java-Database-Connectivity"><a href="#JDBC-Java-Database-Connectivity" class="headerlink" title="JDBC(Java Database Connectivity)"></a>JDBC(Java Database Connectivity)</h2><hr><h2 id="SAMSUNG-NOTE에-필기했던-내용"><a href="#SAMSUNG-NOTE에-필기했던-내용" class="headerlink" title="SAMSUNG NOTE에 필기했던 내용"></a>SAMSUNG NOTE에 필기했던 내용</h2><p><img src="https://user-images.githubusercontent.com/33630505/57175044-45f50480-6e82-11e9-964e-f389813bba62.JPG" alt="jsp1"><br><img src="https://user-images.githubusercontent.com/33630505/57175045-4a212200-6e82-11e9-9131-88069ca324bb.JPG" alt="jsp2"><br><img src="https://user-images.githubusercontent.com/33630505/57175051-50af9980-6e82-11e9-8554-d769099ebcd7.JPG" alt="jsp3"><br><img src="https://user-images.githubusercontent.com/33630505/57175052-50af9980-6e82-11e9-815f-bb4f9279867e.JPG" alt="jsp4"><br><img src="https://user-images.githubusercontent.com/33630505/57175054-51483000-6e82-11e9-96bb-55dd648c4f9b.JPG" alt="jsp5"><br><img src="https://user-images.githubusercontent.com/33630505/57175055-51483000-6e82-11e9-9c28-784e860ab86e.JPG" alt="jsp6"><br><img src="https://user-images.githubusercontent.com/33630505/57175060-61600f80-6e82-11e9-9fbf-daea33ac62b9.JPG" alt="jsp7"><br><img src="https://user-images.githubusercontent.com/33630505/57175062-61600f80-6e82-11e9-9669-1d0359c08a43.JPG" alt="jsp8"><br><img src="https://user-images.githubusercontent.com/33630505/57175063-61600f80-6e82-11e9-9a8b-e64f2c030c7f.JPG" alt="jsp9"><br><img src="https://user-images.githubusercontent.com/33630505/57175064-61600f80-6e82-11e9-94ea-a04d40061843.JPG" alt="jsp10"><br><img src="https://user-images.githubusercontent.com/33630505/57175133-214d5c80-6e83-11e9-900d-c2672bfa8adf.JPG" alt="jsp11"><br><img src="https://user-images.githubusercontent.com/33630505/57175066-61f8a600-6e82-11e9-9565-46c862493e29.JPG" alt="jsp12"><br><img src="https://user-images.githubusercontent.com/33630505/57175067-61f8a600-6e82-11e9-99a8-9fc40d8c7003.JPG" alt="jsp13"><br><img src="https://user-images.githubusercontent.com/33630505/57175068-62913c80-6e82-11e9-86ea-a3ab50294a84.JPG" alt="jsp14"><br><img src="https://user-images.githubusercontent.com/33630505/57175069-62913c80-6e82-11e9-9277-9e421b0c229d.JPG" alt="jsp15"><br><img src="https://user-images.githubusercontent.com/33630505/57175070-62913c80-6e82-11e9-8ea6-5fa26773b7bc.JPG" alt="jsp16"><br><img src="https://user-images.githubusercontent.com/33630505/57175071-6755f080-6e82-11e9-94d0-c349c61fe57b.JPG" alt="jsp17"><br><img src="https://user-images.githubusercontent.com/33630505/57175089-805ea180-6e82-11e9-8e2f-17a58f21c3fb.JPG" alt="jsp18"><br><img src="https://user-images.githubusercontent.com/33630505/57175072-6755f080-6e82-11e9-8eef-47c9b6f06871.JPG" alt="jsp19"><br><img src="https://user-images.githubusercontent.com/33630505/57175073-6755f080-6e82-11e9-9958-a3c491ff6be1.JPG" alt="jsp20"><br><img src="https://user-images.githubusercontent.com/33630505/57175074-67ee8700-6e82-11e9-88dc-9cdee7b6be15.JPG" alt="jsp21"><br><img src="https://user-images.githubusercontent.com/33630505/57175075-67ee8700-6e82-11e9-88e5-74350e518ef6.JPG" alt="jsp22"><br><img src="https://user-images.githubusercontent.com/33630505/57175076-67ee8700-6e82-11e9-9c72-edb65759c585.JPG" alt="jsp23"><br><img src="https://user-images.githubusercontent.com/33630505/57175077-67ee8700-6e82-11e9-951e-9415d0980efa.JPG" alt="jsp24"><br><img src="https://user-images.githubusercontent.com/33630505/57175078-68871d80-6e82-11e9-9df9-097804d17cf3.JPG" alt="jsp25"><br><img src="https://user-images.githubusercontent.com/33630505/57175079-68871d80-6e82-11e9-80a7-52afd8159389.JPG" alt="jsp26"><br><img src="https://user-images.githubusercontent.com/33630505/57175091-8e142700-6e82-11e9-8f2b-227318b19f6a.JPG" alt="jsp27"><br><img src="https://user-images.githubusercontent.com/33630505/57175080-68871d80-6e82-11e9-8953-507aca693401.JPG" alt="jsp28"></p>]]></content>
      
      
      <categories>
          
          <category> JSP &amp; Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 한눈에 보기 </tag>
            
            <tag> Jsp </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
