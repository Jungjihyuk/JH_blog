<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/22/hello-world/"/>
      <url>/2020/02/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Helper Function for Clean code (Python)</title>
      <link href="/2020/02/04/python-skills/"/>
      <url>/2020/02/04/python-skills/</url>
      
        <content type="html"><![CDATA[<center><span style="color: orange; font-size: 35px">Python 코드의 가독성을 높여보자</span></center><br><h1 id="상황-1-URL에서-쿼리-문자열을-디코드해야-할-때"><a href="#상황-1-URL에서-쿼리-문자열을-디코드해야-할-때" class="headerlink" title="#상황 1. URL에서 쿼리 문자열을 디코드해야 할 때"></a>#상황 1. URL에서 쿼리 문자열을 디코드해야 할 때</h1><br><blockquote><p>URL에서 인코딩, 디코딩의 의미는 보안에서의 의미와 살짝 다르다. <br><br>인코딩 <br><br><a href="http://www.google.com/떡볶이" target="_blank" rel="noopener">http://www.google.com/떡볶이</a> 먹고싶다!! <br><br>=&gt; <a href="http://www.google.com/search?sxsrf=ACYBGNTgapWszfC06soR1IlVyLsC2w_7EQ%" target="_blank" rel="noopener">http://www.google.com/search?sxsrf=ACYBGNTgapWszfC06soR1IlVyLsC2w_7EQ%</a> <br><br>3A1580777854450&amp;source=hp&amp;ei=fsE4Xri1GdWRr7wPvM2UOA&amp;q=떡볶이+먹고싶다!! <br><br>주소에 한글/공백/특수기호가 들어가면 안되기 때문에 가능하도록 변환하는 작업 <br><br>디코딩은 그 반대</p></blockquote><h2 id="Boolean-표현식"><a href="#Boolean-표현식" class="headerlink" title="Boolean 표현식"></a>Boolean 표현식</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line">my_values = parse_qs(<span class="string">'red=5&amp;blue=0&amp;green='</span>,keep_blank_values=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 값 전체 (dictionary로 저장)</span></span><br><span class="line">print(my_values)</span><br><span class="line">: &#123;<span class="string">'red'</span>: [<span class="string">'5'</span>], <span class="string">'green'</span>:[<span class="string">''</span>],<span class="string">'blue'</span>:[<span class="string">'0'</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 각각의 값을 뽑을 때</span></span><br><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>평가 =&gt;</code> 이 표현식은 읽기도 불편하고 필요한 작업을 수행하지도 못하는 좋지 못한 코딩</p><br><h3 id="Boolean-표현식-변형"><a href="#Boolean-표현식-변형" class="headerlink" title="Boolean 표현식 변형"></a>Boolean 표현식 변형</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">                    ∥</span><br><span class="line">                    ∨</span><br><span class="line">red = int(my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">green = int(my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">opacity = int(my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])[<span class="number">0</span>] <span class="keyword">or</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><br><h2 id="if-else-조건식-삼항-표현식"><a href="#if-else-조건식-삼항-표현식" class="headerlink" title="if/else 조건식(삼항 표현식)"></a>if/else 조건식(삼항 표현식)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line">my_values = parse_qs(<span class="string">'red=5&amp;blue=0&amp;green='</span>,keep_blank_values=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])</span><br><span class="line">red = int(red[<span class="number">0</span>]) <span class="keyword">if</span> red[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])</span><br><span class="line">green = int(green[<span class="number">0</span>]) <span class="keyword">if</span> green[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])</span><br><span class="line">opacity = int(opacity[<span class="number">0</span>]) <span class="keyword">if</span> opacity[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br><p><code>평가 =&gt;</code> 삼항 표현식은 코드를 짧게 유지하면서도 명확하게 표현 할 수 있는 장점이 있지만 복잡한 로직일 경우 남발하면 안된다.</p><br><h2 id="여러줄에-걸친-if-else-문"><a href="#여러줄에-걸친-if-else-문" class="headerlink" title="여러줄에 걸친 if/else 문"></a>여러줄에 걸친 if/else 문</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">green = my_values.get(<span class="string">'green'</span>,[<span class="string">''</span>])</span><br><span class="line"><span class="keyword">if</span> green[<span class="number">0</span>]:</span><br><span class="line">    green = int(green[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    green = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">red = my_values.get(<span class="string">'red'</span>,[<span class="string">''</span>])</span><br><span class="line"><span class="keyword">if</span> red[<span class="number">0</span>]:</span><br><span class="line">    red = int(red[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    red = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">opacity = my_values.get(<span class="string">'opacity'</span>,[<span class="string">''</span>])</span><br><span class="line"><span class="keyword">if</span> opacity[<span class="number">0</span>]:</span><br><span class="line">    opacity = int(opacity[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opacity = <span class="number">0</span></span><br></pre></td></tr></table></figure><br><p><code>평가 =&gt;</code> 직관적이고 이해하기 편하나 코드의 길이가 길어 속도가 느려질 수 있다. 그리고 오히려 복잡한 수학 문제 같은 경우 코드가 길면 이해하기 더 힘들 수 있다.</p><br><h2 id="Helper-Function"><a href="#Helper-Function" class="headerlink" title="Helper Function"></a>Helper Function</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_first_int</span><span class="params">(values, key, default=<span class="number">0</span>)</span>:</span></span><br><span class="line">     found = values.get(key, [<span class="string">''</span>])</span><br><span class="line">     <span class="keyword">if</span> found[<span class="number">0</span>]:</span><br><span class="line">         found = int(found[<span class="number">0</span>])</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         found = default</span><br><span class="line">     <span class="keyword">return</span> found</span><br><span class="line"></span><br><span class="line">green = get_first_int(my_values, <span class="string">'green'</span>)</span><br><span class="line">red = get_first_int(my_values, <span class="string">'red'</span>)</span><br><span class="line">opacity = get_first_int(my_values, <span class="string">'opacity'</span>)</span><br></pre></td></tr></table></figure><p><code>평가 =&gt;</code> 복잡한 표현식보다 호출 코드가 훨씬 명확해진다. 하지만 아주 간단한 문제인데도 불구하고 너무 헬퍼 함수를 쓰는 것도 그리 좋지 않다.</p><center><span style="color: #ca6257; font-size: 20px">최종 평가</span></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">상황에 잘 맞게 적절하게 코드를 짜야 한다!</span><br><span class="line">그리고</span><br><span class="line">표현식이 복잡해지기 시작하면 최대한 빨리 해당 표현식을 작은 조각으로 분할하고</span><br><span class="line">로직을 헬퍼 함수로 옮기는 방안을 고려해야 한다.</span><br><span class="line"></span><br><span class="line">무조건 짧은 코드를 만들기보다는 가독성을 선택하는 편이 나을때가 많다.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> clean code </tag>
            
            <tag> helper function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yield와 send 함수를 알아보자 (Python)</title>
      <link href="/2020/02/03/python-yield-send/"/>
      <url>/2020/02/03/python-yield-send/</url>
      
        <content type="html"><![CDATA[<center> <span style="color: orange; font-size:35px">Generator의 yield와 send에 대해 알아보자!</span></center><br> <blockquote><p>Generator, Yield, Send가 도대체 뭐야? <br> </p></blockquote><br><center>우선 Generator는 generator(iterator를 반환하기 위한 객체)를 생성해주는 함수!</center><center>그럼 iterator는 무엇이냐! iterator는 반복할 수 있는 객체의 요소를 리턴할 때 호출 한 시점에 값을 리턴하며 값을 지우고 그 상태를 유지해준다.</center><center>그러면 Yield는 무슨 관계가 있는데? yield는 generator를 만들때 함수 안에 yield를 삽입하면 yield를 만나는 순간 iterator 처럼 행동한다.</center><br> <blockquote><p>Generator 작동 순서 </p></blockquote><br> <p><span style="color: orange">Step 1: </span>Generator 메소드 호출 (Generator 객체 생성)<br><br><span style="color: orange">Step 2: </span>생성된 generator를 next함수로 호출<br><br><span style="color: orange">Step 3: </span>yield까지 실행<br><br><span style="color: orange">Step 4: </span>첫번째 yield에서 중단(suspend)<br><br><span style="color: orange">Step 5: </span>호출자에게 expression_list 값을 반환(return)<br><br><span style="color: orange">Step 6: </span>중단된 지점에서 모든 상태가 보존(지역 변수들의 현재 연결들, 명령 포인터, 내부 연산 스택, 모든 예외처리)<br><br><span style="color: orange">Step 7: </span>1~5 step 반복<br></p><br><p><strong>※ next함수 vs send함수</strong> next함수를 통해 호출되면 return은 None, send함수를 통해 호출되면 return은 메소드로 전달된 값<br>{: .notice}</p><br> <blockquote><p>Generator랑 Coroutine과의 관계는? 둘이 같은건가? </p></blockquote><br> <p>우선 컴퓨터 프로그램에서 <span style="color: orange; font-weight:bold;">routine</span>이라는 말을 자주 찾아 볼 수 있는데, 이때의 routine은 “어떤 일을 담당하는 하나의 정리된 일” 이라고 한다.<br><br>프로그램은 여러가지 routine을 조합하여 만들어지며, <span style="color: orange; font-weight:bold;">main routine</span>과 <span style="color: orange; font-weight:bold;">sub routine</span>으로 나눌 수 있다. <br><br>main routine은 프로그램의 주요한 부분이고 전체의 개략적인 동작 절차를 표시하도록 만들어진다. <br><br>sub routine은 사용빈도가 높고 자주 사용하는 부분을 모아 별도로 묶어 놓은 것으로 메인루틴을 보조한다. (메소로 묶음)<br><br>(서브루틴을 사용하면 함수호출시에만 저장된 메모리로 이동하기 때문에 메모리를 효율적으로 사용할 수 있다)<br>이제 진짜로 알아보려고 했던 <span style="color: orange; font-weight:bold;">Co-routine</span>은 sub-routine과 비슷하다. <br><br>자주 쓰는 기능들을 별도의 공간에 모아 두었다는 점에서 서브루틴과 동일하지만, 코루틴은 yield까지 수행하고 상태를 중지한 후<br>메인루틴으로 돌아가 마치 동시에 실행되는 것처럼 작동한다. (co에서 볼 수 있듯 메인루틴과 협력관계임)<br><span style="color:#f35952; font-size: 20px;">따라서 코루틴은 메인루틴에 종속적이지 않아 데이터를 주고 받을 수 있다! (이러한 특성때문에 send가 가능한 것임) </span><br><br><span style="color:#f35952; font-size: 20px;">결국 Generator로 생성된 generator객체(iterator)는 co-routine과 같은 역할을 한다고 보면된다!</span></p><br> <p><img src="https://user-images.githubusercontent.com/33630505/74531168-39541f80-4f6f-11ea-8e78-e4764567af65.png" alt="mainroutine"><br><br><img src="https://user-images.githubusercontent.com/33630505/74531171-3a854c80-4f6f-11ea-87f4-a1788bd13552.png" alt="coroutine"><br><img src="https://user-images.githubusercontent.com/33630505/74531173-3b1de300-4f6f-11ea-8ce1-7e4ee456f29b.jpg" alt="coroutine2"></p><br><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        number *= <span class="number">2</span> </span><br><span class="line"><span class="keyword">yield</span> number </span><br><span class="line"></span><br><span class="line">d = double(<span class="number">3</span>)</span><br><span class="line">d.send(<span class="literal">None</span>)  <span class="comment"># 처음에 왜 None을 넣어야 모르겠음 .... ㅠㅠ </span></span><br><span class="line">: <span class="number">6</span> </span><br><span class="line">d.send(<span class="number">1</span>)</span><br><span class="line">: <span class="number">12</span> </span><br><span class="line">d.send(<span class="number">10</span>)</span><br><span class="line">: <span class="number">24</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double2</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        number *= <span class="number">2</span> </span><br><span class="line">number = <span class="keyword">yield</span> number</span><br><span class="line"></span><br><span class="line">d2 = double2(<span class="number">4</span>) </span><br><span class="line">d2.send(<span class="literal">None</span>)</span><br><span class="line">: <span class="number">8</span></span><br><span class="line">d2.send(<span class="number">1</span>)</span><br><span class="line">: <span class="number">2</span></span><br><span class="line">d2.send(<span class="number">100</span>)</span><br><span class="line">: <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">yield</span> x == number</span><br><span class="line"></span><br><span class="line">number = <span class="number">123</span> </span><br><span class="line"></span><br><span class="line">c1 = check1()</span><br><span class="line">c1.send(<span class="literal">None</span>)</span><br><span class="line">c1.send(<span class="number">123</span>)</span><br><span class="line">: <span class="literal">True</span></span><br><span class="line">c1.send(<span class="literal">None</span>)</span><br><span class="line">c1.send(<span class="number">1234</span>)</span><br><span class="line">: <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check2</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="keyword">yield</span> </span><br><span class="line">    <span class="keyword">yield</span> x == number2</span><br><span class="line"></span><br><span class="line">number2 = <span class="number">1234</span> </span><br><span class="line"></span><br><span class="line">c2 = check2() </span><br><span class="line">c2.send(<span class="literal">None</span>)</span><br><span class="line">c2.send(<span class="number">1234</span>)</span><br><span class="line">:<span class="literal">True</span> </span><br><span class="line">c2.send(<span class="number">1234</span>) </span><br><span class="line">: StopIteration</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> (<span class="keyword">yield</span>) == number3 </span><br><span class="line">    </span><br><span class="line">number3 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c3 = check3()</span><br><span class="line">c3.send(<span class="literal">None</span>) </span><br><span class="line">c3.send(<span class="number">123</span>)</span><br><span class="line">: <span class="literal">False</span> </span><br><span class="line">c3.send(<span class="number">2</span>)</span><br><span class="line">: StopIteration </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">        <span class="keyword">yield</span> (<span class="keyword">yield</span>) == number4</span><br><span class="line"></span><br><span class="line">number4 = <span class="number">777</span></span><br><span class="line"></span><br><span class="line">c4 = check4()</span><br><span class="line">c4.send(<span class="literal">None</span>) </span><br><span class="line">c4.send(<span class="number">123</span>)</span><br><span class="line">: <span class="literal">False</span> </span><br><span class="line">c4.send(<span class="number">7777</span>) <span class="comment"># interger 객체 7777은 return 값이 None이기 때문에 None을 넣었을 때와 같음 </span></span><br><span class="line">c4.send(<span class="number">777</span>) </span><br><span class="line">: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    n = c4.send(<span class="number">777</span>)</span><br><span class="line">    print(n)</span><br><span class="line">: <span class="literal">None</span></span><br><span class="line">  <span class="literal">True</span></span><br><span class="line">  <span class="literal">None</span> </span><br><span class="line">  <span class="literal">True</span> </span><br><span class="line">  <span class="literal">None</span></span><br></pre></td></tr></table></figure><br> <p>출처: <a href="https://blueshw.github.io/2016/01/25/python-co-routine-vs-sub-routine/" target="_blank" rel="noopener">co-routine</a>, <a href="https://m.blog.naver.com/PostView.nhn?blogId=pxkey&logNo=221296053953&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">co-routine2</a> <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://devbox.tistory.com/entry/IT%EC%9A%A9%EC%96%B4-%E3%84%B9" target="_blank" rel="noopener">IT 용어</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> generator </tag>
            
            <tag> yield </tag>
            
            <tag> send </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
